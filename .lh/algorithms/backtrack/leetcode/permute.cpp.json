{
    "sourceFile": "algorithms/backtrack/leetcode/permute.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1721746953274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721746963227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,10 @@\n+#include <vector>\n \n+using vvs = std::vector<std::vector<int>>;\n \n+namespace algorithms::backtrack::leetcode\n+\n+\n  vector<vector<int>> permute(vector<int>& nums) {\n         return permuteHelper(nums);\n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721746969119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n-\n-\n- vector<vector<int>> permute(vector<int>& nums) {\n+{\n+    std::vector<vector<int>> permute(vector<int>& nums) {\n         return permuteHelper(nums);\n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721746974957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<vector<int>> permute(vector<int>& nums) {\n+    std::vector<std::vector<int>> permute(vector<int>& nums) {\n         return permuteHelper(nums);\n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721746981413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> permute(vector<int>& nums) {\n+    std::vector<std::vector<int>> permute(std::vector<int>& nums) {\n         return permuteHelper(nums);\n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721746991217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,8 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> permute(std::vector<int>& nums) {\n-        return permuteHelper(nums);\n-    }\n\\ No newline at end of file\n+    std::vector<std::vector<int>> permute(std::vector<int>& nums) \n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721746996936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,6 +5,7 @@\n namespace algorithms::backtrack::leetcode\n {\n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721747004385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,7 +5,7 @@\n namespace algorithms::backtrack::leetcode\n {\n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n-        \n+        return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721747012498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n+    // https://leetcode.com/problems/permutations\n+    \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721747018818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n-    \n+    // Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721747128994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n-    // Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n+    // Given an array nums of distinct integers, return all the possible permutations. \n+    // You can return the answer in any order.\n+    \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721747151318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    \n+    void rec()\n+\n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721747158510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec()\n+    void rec(std::vector<int>& nums)\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n"
                },
                {
                    "date": 1721747193162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec(std::vector<int>& nums)\n+    void rec(std::vector<int>& nums, vvs)\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n"
                },
                {
                    "date": 1721747551349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,13 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec(std::vector<int>& nums, vvs)\n+    void rec(std::vector<int>& nums, vvs& ans, int mask)\n+    {\n \n+    }\n+\n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721747560091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n-\n+        for(int )\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n"
                },
                {
                    "date": 1721747565797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n-        for(int )\n+        for(int i = 0; i < )\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n"
                },
                {
                    "date": 1721747573160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+#include <vector>\n+\n+using vvs = std::vector<std::vector<int>>;\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/permutations\n+    // Given an array nums of distinct integers, return all the possible permutations. \n+    // You can return the answer in any order.\n+    void rec(std::vector<int>& nums, vvs& ans, int mask)\n+    {\n+        for(int i = 0; i < nums.size(); i++)\n+    }\n+\n+    std::vector<std::vector<int>> permute(std::vector<int>& nums) \n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721747584261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,30 +9,14 @@\n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n         for(int i = 0; i < nums.size(); i++)\n+        {\n+            if(mask & (1 << i))\n+        }\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n     {\n         return {};\n     }\n-}\n-#include <vector>\n-\n-using vvs = std::vector<std::vector<int>>;\n-\n-namespace algorithms::backtrack::leetcode\n-{\n-    // https://leetcode.com/problems/permutations\n-    // Given an array nums of distinct integers, return all the possible permutations. \n-    // You can return the answer in any order.\n-    void rec(std::vector<int>& nums, vvs& ans, int mask)\n-    {\n-        for(int i = 0; i < )\n-    }\n-\n-    std::vector<std::vector<int>> permute(std::vector<int>& nums) \n-    {\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721747590372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n         for(int i = 0; i < nums.size(); i++)\n         {\n-            if(mask & (1 << i))\n+            if(!mask & (1 << i))\n         }\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n"
                },
                {
                    "date": 1721747596304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,10 @@\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n         for(int i = 0; i < nums.size(); i++)\n         {\n-            if(!mask & (1 << i))\n+            if(!(mask & (1 << i)))\n+              \n         }\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n"
                },
                {
                    "date": 1721747616225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     {\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n-              \n+              rec()\n         }\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n"
                },
                {
                    "date": 1721747641999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, int mask)\n     {\n+        if()\n+\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n               rec()\n"
                },
                {
                    "date": 1721747811801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n \n+\n+\n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n"
                },
                {
                    "date": 1721747822360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n+using ll = long long;\n \n \n-\n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n"
                },
                {
                    "date": 1721747863216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec(std::vector<int>& nums, vvs& ans, int mask)\n+    void rec(std::vector<int>& nums, vvs& ans, ll mask)\n     {\n-        if()\n+        if(mask )\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n"
                },
                {
                    "date": 1721747873400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,18 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n+const int N = \n \n-\n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, ll mask)\n     {\n-        if(mask )\n+        if(mask = )\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n"
                },
                {
                    "date": 1721747880441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n-const int N = \n+const int N = 6;\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n"
                },
                {
                    "date": 1721747886300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n-const int N = 6;\n+const int N = 31;\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n"
                },
                {
                    "date": 1721747896684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,18 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n-const int N = 31;\n+const int N = 63;\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, ll mask)\n     {\n-        if(mask = )\n+        if(mask = N)\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n"
                },
                {
                    "date": 1721747988809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n-const int N = 63;\n+const int N = 64;\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n@@ -11,8 +11,9 @@\n     // You can return the answer in any order.\n     void rec(std::vector<int>& nums, vvs& ans, ll mask)\n     {\n         if(mask = N)\n+          return;\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1 << i)))\n"
                },
                {
                    "date": 1721748036964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n using vvs = std::vector<std::vector<int>>;\n using ll = long long;\n-const int N = 64;\n+const int N = 63;\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/permutations\n@@ -15,9 +15,9 @@\n           return;\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n-            if(!(mask & (1 << i)))\n+            if(!(mask & (1LL << i)))\n               rec()\n         }\n     }\n \n"
                },
                {
                    "date": 1721748049236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n+            {\n               rec()\n         }\n     }\n \n"
                },
                {
                    "date": 1721748057121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n         {\n             if(!(mask & (1LL << i)))\n             {\n               rec()\n+            }\n         }\n     }\n \n     std::vector<std::vector<int>> permute(std::vector<int>& nums) \n"
                },
                {
                    "date": 1721748063015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n             {\n-              rec()\n+                rec(nums, )\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748076114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n             {\n-                rec(nums, )\n+                rec(nums, ans, mask )\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748081180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n             {\n-                rec(nums, ans, mask )\n+                rec(nums, ans, mask | (1 << ))\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748088408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n             {\n-                rec(nums, ans, mask | (1 << ))\n+                rec(nums, ans, mask | (1LL << i));\n+                \n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748115856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec(std::vector<int>& nums, vvs& ans, ll mask)\n+    void rec(std::vector<int>& nums, vvs& ans, std::vector<int> ll mask)\n     {\n         if(mask = N)\n           return;\n \n@@ -18,9 +18,9 @@\n         {\n             if(!(mask & (1LL << i)))\n             {\n                 rec(nums, ans, mask | (1LL << i));\n-                \n+\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748131580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         for(int i = 0; i < nums.size(); i++)\n         {\n             if(!(mask & (1LL << i)))\n             {\n-                rec(nums, ans, mask | (1LL << i));\n+                rec(nums, ans, tmp, mask | (1LL << i));\n \n             }\n         }\n     }\n"
                },
                {
                    "date": 1721748177583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    void rec(std::vector<int>& nums, vvs& ans, std::vector<int>& tmp, ll mask)\n+    std::vector<int> rec(std::vector<int>& nums, vvs& ans, std::vector<int>& tmp, ll mask)\n     {\n         if(mask = N)\n           return;\n \n@@ -18,10 +18,10 @@\n         {\n             if(!(mask & (1LL << i)))\n             {\n                 rec(nums, ans, tmp, mask | (1LL << i));\n-                \n \n+\n             }\n         }\n     }\n \n"
                },
                {
                    "date": 1721748183591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n {\n     // https://leetcode.com/problems/permutations\n     // Given an array nums of distinct integers, return all the possible permutations. \n     // You can return the answer in any order.\n-    std::vector<int> rec(std::vector<int>& nums, vvs& ans, std::vector<int>& tmp, ll mask)\n+    std::vector<int> rec(std::vector<int>& nums, vvs& ans, ll mask)\n     {\n         if(mask = N)\n           return;\n \n"
                }
            ],
            "date": 1721746953274,
            "name": "Commit-0",
            "content": "\n\n vector<vector<int>> permute(vector<int>& nums) {\n        return permuteHelper(nums);\n    }"
        }
    ]
}