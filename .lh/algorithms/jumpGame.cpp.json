{
    "sourceFile": "algorithms/jumpGame.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1718194215462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718194223004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n namespace leetcode::dp\n {\n-    \n+    // https://leetcode.com/problems/jump-game\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718194244803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n+    bool canJump(vector<int>& nums) {   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718194250344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n-    bool canJump(vector<int>& nums) {   \n+    bool canJump(vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718194264933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+#include <vector>\n+\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n     bool canJump(vector<int>& nums) { return false; }   \n"
                },
                {
                    "date": 1718194270007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,6 @@\n \n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n-    bool canJump(vector<int>& nums) { return false; }   \n+    bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195628050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,8 @@\n \n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n+    /*\n+    */\n     bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195636478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,10 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n     /*\n+      You are given an integer array nums. You are initially positioned at the array's first index, \n+      and each element in the array represents your maximum jump length at that position.\n+Return true if you can reach the last index, or false otherwise.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195641689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/jump-game\n     /*\n-      You are given an integer array nums. You are initially positioned at the array's first index, \n-      and each element in the array represents your maximum jump length at that position.\n-Return true if you can reach the last index, or false otherwise.\n+       You are given an integer array nums. You are initially positioned at the array's first index, \n+       and each element in the array represents your maximum jump length at that position.\n+       Return true if you can reach the last index, or false otherwise.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195656554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,7 +6,11 @@\n     /*\n        You are given an integer array nums. You are initially positioned at the array's first index, \n        and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n+\n+       Input: nums = [2,3,1,1,4]\n+Output: true\n+Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195663974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n        and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n \n        Input: nums = [2,3,1,1,4]\n-Output: true\n-Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n+       Output: true\n+       Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718195838468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        You are given an integer array nums. You are initially positioned at the array's first index, \n        and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n \n-       Input: nums = [2,3,1,1,4]\n+       Input: nums = [2, 3,1,1,4]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n"
                },
                {
                    "date": 1718195844351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        You are given an integer array nums. You are initially positioned at the array's first index, \n        and each element in the array represents your maximum jump length at that position.\n        Return true if you can reach the last index, or false otherwise.\n \n-       Input: nums = [2, 3, 1, 1, 4 ]\n+       Input: nums = [ 2, 3, 1, 1, 4 ]\n        Output: true\n        Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n     */\n     bool canJump(std::vector<int>& nums) { return false; }   \n"
                },
                {
                    "date": 1718196059995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+#include <vector>\n+\n+namespace leetcode::dp\n+{\n+    // https://leetcode.com/problems/jump-game\n+    /*\n+       You are given an integer array nums. You are initially positioned at the array's first index, \n+       and each element in the array represents your maximum jump length at that position.\n+       Return true if you can reach the last index, or false otherwise.\n+\n+       Input: nums = [ 2, 3, 1, 1, 4 ]\n+       Output: true\n+       Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n+       J()\n+    */\n+    bool canJump(std::vector<int>& nums) { return false; }   \n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1718194215462,
            "name": "Commit-0",
            "content": "namespace leetcode::dp\n{\n    \n}"
        }
    ]
}