{
    "sourceFile": "algorithms/array/leetcode/rotateArray.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1719644681573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719644695733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,28 @@\n namespace algorithms::leetcode::array\n {\n-    \n+    // https://leetcode.com/problems/rotate-array\n+void rotateArray(vector<int>& xs, int k) \n+{\n+     auto r = k > xs.size() ? k % xs.size() : k;\n+\n+     std::reverse(xs.begin(), xs.end());\n+     // left part \n+     int left = 0;\n+     int right = r - 1;\n+     while(left < right)\n+     {\n+         std::swap(xs[left], xs[right]);\n+         left++;\n+         right--;\n+     }\n+     // right part\n+     left = r;\n+     right = xs.size() - 1;\n+     while(left < right)\n+     {\n+         std::swap(xs[left], xs[right]);\n+         left++;\n+         right--;\n+     }\n+}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719644712009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,30 @@\n+#include <vector>\n+\n namespace algorithms::leetcode::array\n {\n     // https://leetcode.com/problems/rotate-array\n-void rotateArray(vector<int>& xs, int k) \n-{\n-     auto r = k > xs.size() ? k % xs.size() : k;\n+    void rotateArray(vector<int>& xs, int k) \n+    {\n+        auto r = k > xs.size() ? k % xs.size() : k;\n \n-     std::reverse(xs.begin(), xs.end());\n-     // left part \n-     int left = 0;\n-     int right = r - 1;\n-     while(left < right)\n-     {\n-         std::swap(xs[left], xs[right]);\n-         left++;\n-         right--;\n-     }\n-     // right part\n-     left = r;\n-     right = xs.size() - 1;\n-     while(left < right)\n-     {\n-         std::swap(xs[left], xs[right]);\n-         left++;\n-         right--;\n-     }\n-}\n+        std::reverse(xs.begin(), xs.end());\n+        // left part \n+        int left = 0;\n+        int right = r - 1;\n+        while(left < right)\n+        {\n+            std::swap(xs[left], xs[right]);\n+            left++;\n+            right--;\n+        }\n+        // right part\n+        left = r;\n+        right = xs.size() - 1;\n+        while(left < right)\n+        {\n+            std::swap(xs[left], xs[right]);\n+            left++;\n+            right--;\n+        }\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719644721037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::leetcode::array\n {\n     // https://leetcode.com/problems/rotate-array\n-    void rotateArray(vector<int>& xs, int k) \n+    void rotateArray(std::vector<int>& xs, int k) \n     {\n         auto r = k > xs.size() ? k % xs.size() : k;\n \n         std::reverse(xs.begin(), xs.end());\n"
                }
            ],
            "date": 1719644681573,
            "name": "Commit-0",
            "content": "namespace algorithms::leetcode::array\n{\n    \n}"
        }
    ]
}