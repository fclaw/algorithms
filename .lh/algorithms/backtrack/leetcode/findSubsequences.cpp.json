{
    "sourceFile": "algorithms/backtrack/leetcode/findSubsequences.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1721883597133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721883605080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n namespace algorithms::backtrack::leetcode\n {\n-    \n+    vector<vector<int>> findSubsequences(vector<int>& nums) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721883612220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n namespace algorithms::backtrack::leetcode\n {\n-    vector<vector<int>> findSubsequences(vector<int>& nums) {\n+    std::vector<std::vector<int>> findSubsequences(vector<int>& nums) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721883618666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> findSubsequences(vector<int>& nums) {\n-        \n+    std::vector<std::vector<int>> findSubsequences(std::vector<int>& nums) {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721883623690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> findSubsequences(std::vector<int>& nums) {\n+    std::vector<std::vector<int>> findSubsequences(std::vector<int>& nums) \n+    {\n+        return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721883635782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n+\n+\n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> findSubsequences(std::vector<int>& nums) \n+    std::vector<std::vector<int>> findSubsequences(std::vector<int> nums) \n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721883653583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \n \n namespace algorithms::backtrack::leetcode\n {\n+    // https://leetcode.com/problems/non-decreasing-subsequences\n     std::vector<std::vector<int>> findSubsequences(std::vector<int> nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721883667664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/non-decreasing-subsequences\n     std::vector<std::vector<int>> findSubsequences(std::vector<int> nums) \n"
                },
                {
                    "date": 1721883700238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,11 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/non-decreasing-subsequences\n-    \n+    /*\n+    Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\n+    */\n     std::vector<std::vector<int>> findSubsequences(std::vector<int> nums) \n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1721884030126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/non-decreasing-subsequences\n+    /*\n+       Given an integer array nums, return all the different \n+       possible non-decreasing subsequences of the given array \n+       with at least two elements. You may return the answer in any order.\n+    */\n+    std::vector<std::vector<int>> findSubsequences(std::vector<int> nums) \n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1721883597133,
            "name": "Commit-0",
            "content": "namespace algorithms::backtrack::leetcode\n{\n    \n}"
        }
    ]
}