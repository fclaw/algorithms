{
    "sourceFile": "algorithms/graph/onlinejudge/checkers.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1727589269435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727589290985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n \n \n-namespace algorithms::graph::onlinejudge::\n\\ No newline at end of file\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+    /** counting paths in DAG; DP */\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727594888883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n namespace algorithms::graph::onlinejudge::checkers\n {\n-    /** counting paths in DAG; DP */\n+    /** https://onlinejudge.org/external/119/11957.pdf \n+     * counting paths in DAG; DP */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727594898548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n \n \n namespace algorithms::graph::onlinejudge::checkers\n {\n-    /** https://onlinejudge.org/external/119/11957.pdf \n-     * counting paths in DAG; DP */\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727791301737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,5 +2,6 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792519494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,6 @@\n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     \n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792531176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    countPaths\n     \n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792538719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    countPaths\n+    int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792549445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,8 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792562952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n     const char \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792569418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n-    const char \n+    const char Black = 'B';\n+    const \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792575933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n-    const \n+    const char W\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792581797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n-    const char W\n+    const char White = 'W';\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792611170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,7 +5,9 @@\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n     const char White = 'W';\n+        bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < M && c >= 0 && c < N; }\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792618189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    \n     const char Empty = '.';\n     const char Black = 'B';\n     const char White = 'W';\n-        bool checkBoundary(int r, int c) \n+    bool checkBoundary(int r, int c) \n     { return r >= 0 && r < M && c >= 0 && c < N; }\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792625160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,12 @@\n \n namespace algorithms::graph::onlinejudge::checkers\n {\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    \n     const char Empty = '.';\n     const char Black = 'B';\n     const char White = 'W';\n+    int R\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < M && c >= 0 && c < N; }\n     int countPaths() { return 1; }\n     \n"
                },
                {
                    "date": 1727792632303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n     const char White = 'W';\n-    int R\n+    int R, C;\n     bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < M && c >= 0 && c < N; }\n+    { return r >= 0 && r < R && c >= 0 && c < N; }\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727792672705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n     const char Black = 'B';\n     const char White = 'W';\n     int R, C;\n     bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < R && c >= 0 && c < N; }\n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+    \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793037253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n \n \n namespace algorithms::graph::onlinejudge::checkers\n {\n+\n+using dir = std::vector<std::pair<int, int>>;\n+\n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n     const char White = 'W';\n"
                },
                {
                    "date": 1727793045960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+#include <vec\n \n \n namespace algorithms::graph::onlinejudge::checkers\n {\n"
                },
                {
                    "date": 1727793053224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-#include <vec\n+#include <vector>\n \n-\n namespace algorithms::graph::onlinejudge::checkers\n {\n \n using dir = std::vector<std::pair<int, int>>;\n"
                },
                {
                    "date": 1727793081064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,14 @@\n     const char White = 'W';\n     int R, C;\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < R && c >= 0 && c < C; }\n-    \n+    All checkers moving rules (for the white piece) are applied:\n+• Target cell must be free.\n+• From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n+or (x − 1, y + 1).\n+• If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n+or (x − 2, y + 2) respectively\n+    dir \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793087345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <vector>\n+\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+\n+using dir = std::vector<std::pair<int, int>>;\n+\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n+    const char Black = 'B';\n+    const char White = 'W';\n+    int R, C;\n+    bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+//   All checkers moving rules (for the white piece) are applied:\n+// • Target cell must be free.\n+// • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n+// or (x − 1, y + 1).\n+// • If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n+// or (x − 2, y + 2) respectively\n+    dir \n+    int countPaths() { return 1; }\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793096158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,38 +11,14 @@\n     const char White = 'W';\n     int R, C;\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < R && c >= 0 && c < C; }\n-//   All checkers moving rules (for the white piece) are applied:\n-// • Target cell must be free.\n+    /**  All checkers moving rules (for the white piece) are applied:\n+     *   • Target cell must be free.\n // • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n // or (x − 1, y + 1).\n // • If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n // or (x − 2, y + 2) respectively\n     dir \n     int countPaths() { return 1; }\n     \n-}\n-#include <vector>\n-\n-namespace algorithms::graph::onlinejudge::checkers\n-{\n-\n-using dir = std::vector<std::pair<int, int>>;\n-\n-    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    const char Empty = '.';\n-    const char Black = 'B';\n-    const char White = 'W';\n-    int R, C;\n-    bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < R && c >= 0 && c < C; }\n-    All checkers moving rules (for the white piece) are applied:\n-• Target cell must be free.\n-• From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n-or (x − 1, y + 1).\n-• If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n-or (x − 2, y + 2) respectively\n-    dir \n-    int countPaths() { return 1; }\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793101696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n-// • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n+     *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n // or (x − 1, y + 1).\n // • If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n // or (x − 2, y + 2) respectively\n     dir \n"
                },
                {
                    "date": 1727793108055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n-     *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1)\n-// or (x − 1, y + 1).\n+     *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n // • If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n // or (x − 2, y + 2) respectively\n     dir \n     int countPaths() { return 1; }\n"
                },
                {
                    "date": 1727793115637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n      *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n-// • If cell (x+ 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n+     *   • If cell (x + 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n // or (x − 2, y + 2) respectively\n     dir \n     int countPaths() { return 1; }\n     \n"
                },
                {
                    "date": 1727793122330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n      *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y+ 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x+ 2, y+ 2)\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y+ 2)\n // or (x − 2, y + 2) respectively\n     dir \n     int countPaths() { return 1; }\n     \n"
                },
                {
                    "date": 1727793127525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,9 @@\n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n      *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y+ 2)\n-// or (x − 2, y + 2) respectively\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively\n     dir \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793137474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n      *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793146298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n     bool checkBoundary(int r, int c) \n     { return r >= 0 && r < R && c >= 0 && c < C; }\n     /**  All checkers moving rules (for the white piece) are applied:\n      *   • Target cell must be free.\n-     *   • From position (x, y) checker can move only forward by one of diagonals to position (x + 1, y + 1) or (x − 1, y + 1).\n+     *   • From position (x, y) checker can move only forward by one of diagonals \n+     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir \n     int countPaths() { return 1; }\n     \n"
                },
                {
                    "date": 1727793152032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <vector>\n+\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+\n+using dir = std::vector<std::pair<int, int>>;\n+\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n+    const char Black = 'B';\n+    const char White = 'W';\n+    int R, C;\n+    bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+    /**  All checkers moving rules (for the white piece) are applied:\n+     *   • Target cell must be free.\n+     *   • From position (x, y) checker can move only forward by one of diagonals \n+     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n+     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n+    dir\n+    int countPaths() { return 1; }\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793164595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,31 +17,8 @@\n      *   • From position (x, y) checker can move only forward by one of diagonals \n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir\n+    dir dirs = { {} }\n     int countPaths() { return 1; }\n     \n-}\n-#include <vector>\n-\n-namespace algorithms::graph::onlinejudge::checkers\n-{\n-\n-using dir = std::vector<std::pair<int, int>>;\n-\n-    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    const char Empty = '.';\n-    const char Black = 'B';\n-    const char White = 'W';\n-    int R, C;\n-    bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < R && c >= 0 && c < C; }\n-    /**  All checkers moving rules (for the white piece) are applied:\n-     *   • Target cell must be free.\n-     *   • From position (x, y) checker can move only forward by one of diagonals \n-     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir \n-    int countPaths() { return 1; }\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793171900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,8 @@\n      *   • From position (x, y) checker can move only forward by one of diagonals \n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir dirs = { {} }\n+    dir dirs = { {1, 1} }\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793178786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n      *   • From position (x, y) checker can move only forward by one of diagonals \n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir dirs = { {1, 1} }\n+    dir dirs = { {1, 1}, {1, -1} };\n+    dir au\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793186947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n      *   • From position (x, y) checker can move only forward by one of diagonals \n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir dirs = { {1, 1}, {1, -1} };\n-    dir au\n+    dir main_dirs = { {1, 1}, {1, -1} };\n+    dir aux = \n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793197081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+#include <vector>\n+\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+\n+using dir = std::vector<std::pair<int, int>>;\n+\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n+    const char Black = 'B';\n+    const char White = 'W';\n+    int R, C;\n+    bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+    /**  All checkers moving rules (for the white piece) are applied:\n+     *   • Target cell must be free.\n+     *   • From position (x, y) checker can move only forward by one of diagonals \n+     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n+     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n+    dir main_dirs = { {1, 1}, {1, -1} };\n+    dir aux_dirs =  {1, 1}, {1, -1} }\n+    int countPaths() { return 1; }\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793205018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,33 +18,8 @@\n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n-    dir aux_dirs =  {1, 1}, {1, -1} }\n+    dir aux_dirs =  { {2, 2}, {1, -1} };\n     int countPaths() { return 1; }\n     \n-}\n-#include <vector>\n-\n-namespace algorithms::graph::onlinejudge::checkers\n-{\n-\n-using dir = std::vector<std::pair<int, int>>;\n-\n-    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    const char Empty = '.';\n-    const char Black = 'B';\n-    const char White = 'W';\n-    int R, C;\n-    bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < R && c >= 0 && c < C; }\n-    /**  All checkers moving rules (for the white piece) are applied:\n-     *   • Target cell must be free.\n-     *   • From position (x, y) checker can move only forward by one of diagonals \n-     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n-     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir main_dirs = { {1, 1}, {1, -1} };\n-    dir aux = \n-    int countPaths() { return 1; }\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793210321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,8 @@\n      *     to position (x + 1, y + 1) or (x − 1, y + 1).\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n-    dir aux_dirs =  { {2, 2}, {1, -1} };\n+    dir aux_dirs =  { {2, 2}, {2, -2} };\n     int countPaths() { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793293377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+#include \"../lp_dag.cpp\"\n+\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+\n+using dir = std::vector<std::pair<int, int>>;\n+\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n+    const char Black = 'B';\n+    const char White = 'W';\n+    int R, C;\n+    bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+    /**  All checkers moving rules (for the white piece) are applied:\n+     *   • Target cell must be free.\n+     *   • From position (x, y) checker can move only forward by one of diagonals \n+     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n+     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n+    dir main_dirs = { {1, 1}, {1, -1} };\n+    dir aux_dirs =  { {2, 2}, {2, -2} };\n+    int countPaths() { return 1; }\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793308286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,32 +20,7 @@\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n-    int countPaths() { return 1; }\n+    int countPaths(const lp::adj& graph,) { return 1; }\n     \n-}\n-#include <vector>\n-\n-namespace algorithms::graph::onlinejudge::checkers\n-{\n-\n-using dir = std::vector<std::pair<int, int>>;\n-\n-    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n-    const char Empty = '.';\n-    const char Black = 'B';\n-    const char White = 'W';\n-    int R, C;\n-    bool checkBoundary(int r, int c) \n-    { return r >= 0 && r < R && c >= 0 && c < C; }\n-    /**  All checkers moving rules (for the white piece) are applied:\n-     *   • Target cell must be free.\n-     *   • From position (x, y) checker can move only forward by one of diagonals \n-     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n-     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n-     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n-    dir main_dirs = { {1, 1}, {1, -1} };\n-    dir aux_dirs =  { {2, 2}, {2, -2} };\n-    int countPaths() { return 1; }\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793314352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,7 @@\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n-    int countPaths(const lp::adj& graph,) { return 1; }\n+    int countPaths(const lp::adj& graph, int sink) { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793327973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,7 @@\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n-    int countPaths(const lp::adj& graph, int sink) { return 1; }\n+    int countPaths(const lp::adj& graph, ) { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793337063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,7 @@\n      *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n-    int countPaths(const lp::adj& graph, ) { return 1; }\n+    int countPaths(const lp::adj& graph) { return 1; }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793346536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,6 +21,7 @@\n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n     int countPaths(const lp::adj& graph) { return 1; }\n+    v\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793358309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n namespace algorithms::graph::onlinejudge::checkers\n {\n \n using dir = std::vector<std::pair<int, int>>;\n+namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n     const char Empty = '.';\n     const char Black = 'B';\n"
                },
                {
                    "date": 1727793364977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n     int countPaths(const lp::adj& graph) { return 1; }\n-    v\n+    void submit()\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793375285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n     int countPaths(const lp::adj& graph) { return 1; }\n-    void submit()\n+    void submit(std::optional<char*> file)\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793381857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,11 @@\n      *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n     dir main_dirs = { {1, 1}, {1, -1} };\n     dir aux_dirs =  { {2, 2}, {2, -2} };\n     int countPaths(const lp::adj& graph) { return 1; }\n-    \n+\n     void submit(std::optional<char*> file)\n+    {\n+        \n+    }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727793389931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+#include <vector>\n+#include <iostream>\n+#include <cassert>\n+#include <optional>\n+#include \"../lp_dag.cpp\"\n+\n+namespace algorithms::graph::onlinejudge::checkers\n+{\n+\n+using dir = std::vector<std::pair<int, int>>;\n+namespace lp = algorithms::graph::lp_dag;\n+\n+    /** https://onlinejudge.org/external/119/11957.pdf, counting paths in DAG; DP */\n+    const char Empty = '.';\n+    const char Black = 'B';\n+    const char White = 'W';\n+    int R, C;\n+    bool checkBoundary(int r, int c) \n+    { return r >= 0 && r < R && c >= 0 && c < C; }\n+    /**  All checkers moving rules (for the white piece) are applied:\n+     *   • Target cell must be free.\n+     *   • From position (x, y) checker can move only forward by one of diagonals \n+     *     to position (x + 1, y + 1) or (x − 1, y + 1).\n+     *   • If cell (x + 1, y + 1) or (x−1, y+ 1) is occupied by enemy piece \n+     *     it can jump over to cell (x + 2, y + 2) or (x − 2, y + 2) respectively */\n+    dir main_dirs = { {1, 1}, {1, -1} };\n+    dir aux_dirs =  { {2, 2}, {2, -2} };\n+    int countPaths(const lp::adj& graph) { return 1; }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+\n+    }\n+    \n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1727589269435,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::onlinejudge::"
        }
    ]
}