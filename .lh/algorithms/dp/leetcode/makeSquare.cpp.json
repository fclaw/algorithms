{
    "sourceFile": "algorithms/dp/leetcode/makeSquare.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1720336368092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720336381918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,6 @@\n-algorithms::leetcode::dp\n+namespace algorithms::leetcode::dp\n+{\n+    bool makesquare(vector<int>& matchsticks) {\n+        \n+    }\n+}\n"
                },
                {
                    "date": 1720336397309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+#include <vector>\n+\n namespace algorithms::leetcode::dp\n {\n-    bool makesquare(vector<int>& matchsticks) {\n+    bool makeSquare(vector<int>& matchsticks) {\n         \n     }\n }\n"
                },
                {
                    "date": 1720336405347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    bool makeSquare(vector<int>& matchsticks) {\n+    bool makeSquare(std::vector<int> matchsticks) {\n         \n     }\n }\n"
                },
                {
                    "date": 1720336413174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    bool makeSquare(std::vector<int> matchsticks) {\n-        \n+    bool makeSquare(std::vector<int> matchsticks) \n+    {\n+        return false;\n     }\n }\n"
                },
                {
                    "date": 1720336430748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n+    // https://leetcode.com/problems/matchsticks-to-square\n     bool makeSquare(std::vector<int> matchsticks) \n     {\n         return false;\n     }\n"
                },
                {
                    "date": 1720336443102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/matchsticks-to-square\n+    \n     bool makeSquare(std::vector<int> matchsticks) \n     {\n         return false;\n     }\n"
                },
                {
                    "date": 1720336452683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,13 @@\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/matchsticks-to-square\n-    \n+    /*\n+       You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n+\n+Return true if you can make this square and false otherwise\n+    */\n     bool makeSquare(std::vector<int> matchsticks) \n     {\n         return false;\n     }\n"
                },
                {
                    "date": 1720336459552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/matchsticks-to-square\n     /*\n-       You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n+       You are given an integer array matchsticks where matchsticks[i] \n+       is the length of the ith matchstick. You want to use all the matchsticks to make one square. \n+       You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n \n Return true if you can make this square and false otherwise\n     */\n     bool makeSquare(std::vector<int> matchsticks) \n"
                },
                {
                    "date": 1720336466153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n     /*\n        You are given an integer array matchsticks where matchsticks[i] \n        is the length of the ith matchstick. You want to use all the matchsticks to make one square. \n        You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n-\n Return true if you can make this square and false otherwise\n     */\n     bool makeSquare(std::vector<int> matchsticks) \n     {\n"
                },
                {
                    "date": 1720336472248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     /*\n        You are given an integer array matchsticks where matchsticks[i] \n        is the length of the ith matchstick. You want to use all the matchsticks to make one square. \n        You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n-Return true if you can make this square and false otherwise\n+       Return true if you can make this square and false otherwise\n     */\n     bool makeSquare(std::vector<int> matchsticks) \n     {\n         return false;\n"
                },
                {
                    "date": 1720336477545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n     // https://leetcode.com/problems/matchsticks-to-square\n     /*\n        You are given an integer array matchsticks where matchsticks[i] \n        is the length of the ith matchstick. You want to use all the matchsticks to make one square. \n-       You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n+       You should not break any stick, but you can link them up, \n+       and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise\n     */\n     bool makeSquare(std::vector<int> matchsticks) \n     {\n"
                },
                {
                    "date": 1720336486994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n {\n     // https://leetcode.com/problems/matchsticks-to-square\n     /*\n        You are given an integer array matchsticks where matchsticks[i] \n-       is the length of the ith matchstick. You want to use all the matchsticks to make one square. \n+       is the length of the ith matchstick. \n+       You want to use all the matchsticks to make one square. \n        You should not break any stick, but you can link them up, \n        and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise\n     */\n"
                },
                {
                    "date": 1720337154069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/matchsticks-to-square\n+    /*\n+       You are given an integer array matchsticks where matchsticks[i] \n+       is the length of the ith matchstick. \n+       You want to use all the matchsticks to make one square. \n+       You should not break any stick, but you can link them up, \n+       and each matchstick must be used exactly one time.\n+       Return true if you can make this square and false otherwise\n+    */\n+    bool makeSquare(std::vector<int> matchsticks) \n+    {\n+        return false;\n+    }\n+}\n"
                },
                {
                    "date": 1720441262715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,22 +15,4 @@\n     {\n         return false;\n     }\n }\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/matchsticks-to-square\n-    /*\n-       You are given an integer array matchsticks where matchsticks[i] \n-       is the length of the ith matchstick. \n-       You want to use all the matchsticks to make one square. \n-       You should not break any stick, but you can link them up, \n-       and each matchstick must be used exactly one time.\n-       Return true if you can make this square and false otherwise\n-    */\n-    bool makeSquare(std::vector<int> matchsticks) \n-    {\n-        return false;\n-    }\n-}\n"
                },
                {
                    "date": 1720858951175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n        You should not break any stick, but you can link them up, \n        and each matchstick must be used exactly one time.\n        Return true if you can make this square and false otherwise\n     */\n-    bool makeSquare(std::vector<int> matchsticks) \n+    bool makeSquare(std::vector<int> matchsticks)\n     {\n         return false;\n     }\n }\n"
                }
            ],
            "date": 1720336368092,
            "name": "Commit-0",
            "content": "algorithms::leetcode::dp\n"
        }
    ]
}