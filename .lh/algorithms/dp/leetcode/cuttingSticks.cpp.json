{
    "sourceFile": "algorithms/dp/leetcode/cuttingSticks.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1721219313227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721219320938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n #include <vector>\n+#include <vector>\n+#include <vector>\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n"
                },
                {
                    "date": 1721219329188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n-#include <vector>\n-#include <vector>\n+#include <iostream>\n+#include <ios\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n"
                },
                {
                    "date": 1721219412345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n #include <iostream>\n-#include <ios\n+#include <iomanip>\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n@@ -9,9 +9,9 @@\n     {\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = 1; r <= stick; r++)\n+        for(int r = ; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219420381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = ; r <= stick; r++)\n+        for(int r = std::min(); r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219426734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = std::min(); r <= stick; r++)\n+        for(int r = std::min(1, cuts[0]); r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219445305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <vector>\n+#include <iostream>\n+#include <iomanip>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n+    int minCost(int stick, std::vector<int> cuts) \n+    {\n+        std::sort()\n+        int n = cuts.size();\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        \n+        for(int r = std::min(1, cuts[0]); r <= stick; r++)\n+          for(int l = r - 1; l >= 0; l--)\n+          {\n+             int cost = INT32_MAX;\n+             for (int i = 0; i < n; i++)\n+               if(cuts[i] > l && cuts[i] < r)\n+                 cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n+             dp[l][r] = cost == INT32_MAX ? 0 : cost;\n+          }\n+\n+    for ( const auto &row : dp )\n+    {\n+        for ( const auto &s : row ) \n+          std::cout << std::setw(5) << s << ' ';\n+        std::cout << std::endl;\n+    }\n+\n+        return dp[0][stick];\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721219454006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n     int minCost(int stick, std::vector<int> cuts) \n     {\n-        std::sort()\n+        std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = std::min(1, cuts[0]); r <= stick; r++)\n@@ -29,37 +29,5 @@\n     }\n \n         return dp[0][stick];\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-#include <iomanip>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n-    int minCost(int stick, std::vector<int> cuts) \n-    {\n-        int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n-        \n-        for(int r = std::min(1, cuts[0]); r <= stick; r++)\n-          for(int l = r - 1; l >= 0; l--)\n-          {\n-             int cost = INT32_MAX;\n-             for (int i = 0; i < n; i++)\n-               if(cuts[i] > l && cuts[i] < r)\n-                 cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n-             dp[l][r] = cost == INT32_MAX ? 0 : cost;\n-          }\n-\n-    for ( const auto &row : dp )\n-    {\n-        for ( const auto &s : row ) \n-          std::cout << std::setw(5) << s << ' ';\n-        std::cout << std::endl;\n-    }\n-\n-        return dp[0][stick];\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721219475876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = std::min(1, cuts[0]); r <= stick; r++)\n+        for(int r = cuts[0]); r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219508517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1 - , std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = cuts[0]); r <= stick; r++)\n+        for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219513976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1 - , std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1 - cuts[0], std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721219559036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n-               if(cuts[i] > l && cuts[i] < r)\n+              //  if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n"
                },
                {
                    "date": 1721219569434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n-              //  if(cuts[i] > l && cuts[i] < r)\n+               if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n"
                },
                {
                    "date": 1721219582261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1 - cuts[0], std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = cuts[0]; r <= stick; r++)\n+        for(int r = 1; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n"
                },
                {
                    "date": 1721219599626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,7 @@\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n-\n-    for ( const auto &row : dp )\n-    {\n-        for ( const auto &s : row ) \n-          std::cout << std::setw(5) << s << ' ';\n-        std::cout << std::endl;\n-    }\n-\n         return dp[0][stick];\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721219606406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1 - cuts[0], std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = 1; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721219623292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,18 +8,26 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1 - cuts[0], std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = 1; r <= stick; r++)\n+        for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = 0; i < n; i++)\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n+\n+    for ( const auto &row : dp )\n+    {\n+        for ( const auto &s : row ) \n+          std::cout << std::setw(5) << s << ' ';\n+        std::cout << std::endl;\n+    }\n+\n         return dp[0][stick];\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721219664024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1 - cuts[0], std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n@@ -20,14 +20,7 @@\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n-    for ( const auto &row : dp )\n-    {\n-        for ( const auto &s : row ) \n-          std::cout << std::setw(5) << s << ' ';\n-        std::cout << std::endl;\n-    }\n-\n         return dp[0][stick];\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721219874055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1 - , INT32_MAX));\n         \n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721219879709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1 - , INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1 - cuts[0], INT32_MAX));\n         \n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721219892670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1 - cuts[0], INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721220029599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n-             for (int i = 0; i < n; i++)\n+             for (int i = ; i < n; i++)\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n"
                },
                {
                    "date": 1721220037483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         for(int r = cuts[0]; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n-             for (int i = ; i < n; i++)\n+             for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n"
                },
                {
                    "date": 1721220052100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n           {\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n-                 cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n+                 cost = std::min(cost, r - l + dp[l][] + dp[cuts[i]][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n         return dp[0][stick];\n"
                },
                {
                    "date": 1721220062215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n           {\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n-                 cost = std::min(cost, r - l + dp[l][] + dp[cuts[i]][r]);\n+                 cost = std::min(cost, r - l + dp[l][i] + dp[i][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n         return dp[0][stick];\n"
                },
                {
                    "date": 1721220207059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n           {\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n-                 cost = std::min(cost, r - l + dp[l][i] + dp[i][r]);\n+                 cost = std::min(cost, cuts[r] - cuts[l] + dp[l][i] + dp[i][r]);\n              dp[l][r] = cost == INT32_MAX ? 0 : cost;\n           }\n \n         return dp[0][stick];\n"
                },
                {
                    "date": 1721220217430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, cuts[r] - cuts[l] + dp[l][i] + dp[i][r]);\n-             dp[l][r] = cost == INT32_MAX ? 0 : cost;\n+             dp[l][r] = cost  cost;\n           }\n \n         return dp[0][stick];\n     }\n"
                },
                {
                    "date": 1721220227742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n                if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, cuts[r] - cuts[l] + dp[l][i] + dp[i][r]);\n-             dp[l][r] = cost  cost;\n+             dp[l][r] = cost;\n           }\n \n         return dp[0][stick];\n     }\n"
                },
                {
                    "date": 1721220251451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n-               if(cuts[i] > l && cuts[i] < r)\n+              //  if(cuts[i] > l && cuts[i] < r)\n                  cost = std::min(cost, cuts[r] - cuts[l] + dp[l][i] + dp[i][r]);\n              dp[l][r] = cost;\n           }\n \n"
                },
                {
                    "date": 1721220290198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n         std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n         \n-        for(int r = cuts[0]; r <= stick; r++)\n+        for(int r = ; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n              int cost = INT32_MAX;\n              for (int i = l + 1; i < r; i++)\n"
                },
                {
                    "date": 1721220306906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<int>> dp(stick + 2, std::vector<int>(stick + 1, INT32_MAX));\n         \n         for(int r = 1; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                },
                {
                    "date": 1721220549396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     int minCost(int stick, std::vector<int> cuts) \n     {\n         std::sort(cuts.begin(), cuts.end());\n         int n = cuts.size();\n-        std::vector<std::vector<ll>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n+        std::vector<std::vector<ll>> dp(stick + 1, std::vector<ll>(stick + 1, INT32_MAX));\n         \n         for(int r = 1; r <= stick; r++)\n           for(int l = r - 1; l >= 0; l--)\n           {\n"
                }
            ],
            "date": 1721219313227,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace algorithms::leetcode::dp\n{\n    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n    int minCost(int stick, std::vector<int> cuts) \n    {\n        int n = cuts.size();\n        std::vector<std::vector<int>> dp(stick + 1, std::vector<int>(stick + 1, INT32_MAX));\n        \n        for(int r = 1; r <= stick; r++)\n          for(int l = r - 1; l >= 0; l--)\n          {\n             int cost = INT32_MAX;\n             for (int i = 0; i < n; i++)\n               if(cuts[i] > l && cuts[i] < r)\n                 cost = std::min(cost, r - l + dp[l][cuts[i]] + dp[cuts[i]][r]);\n             dp[l][r] = cost == INT32_MAX ? 0 : cost;\n          }\n\n    for ( const auto &row : dp )\n    {\n        for ( const auto &s : row ) \n          std::cout << std::setw(5) << s << ' ';\n        std::cout << std::endl;\n    }\n\n        return dp[0][stick];\n    }\n}"
        }
    ]
}