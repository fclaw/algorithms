{
    "sourceFile": "algorithms/graph/onlinejudge/fuelTank.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1724776690850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724776704343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n \n \n \n+namespace algorithms::graph::onlinejudge::\n \n+\n  // https://onlinejudge.org/external/113/11367.pdf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724776710652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \n \n \n-namespace algorithms::graph::onlinejudge::\n+namespace algorithms::graph::onlinejudge::fuel_tank\n \n \n  // https://onlinejudge.org/external/113/11367.pdf\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724776717787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \n \n \n namespace algorithms::graph::onlinejudge::fuel_tank\n-\n-\n- // https://onlinejudge.org/external/113/11367.pdf\n\\ No newline at end of file\n+{\n+     // https://onlinejudge.org/external/113/11367.pdf\n+     \n+}\n"
                },
                {
                    "date": 1724776736025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n \n namespace algorithms::graph::onlinejudge::fuel_tank\n {\n      // https://onlinejudge.org/external/113/11367.pdf\n-     \n+     int chea\n }\n"
                },
                {
                    "date": 1724776742046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n \n namespace algorithms::graph::onlinejudge::fuel_tank\n {\n      // https://onlinejudge.org/external/113/11367.pdf\n-     int chea\n+     int cheapesTrip\n }\n"
                },
                {
                    "date": 1724776747684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,5 +4,8 @@\n namespace algorithms::graph::onlinejudge::fuel_tank\n {\n      // https://onlinejudge.org/external/113/11367.pdf\n      int cheapestTrip()\n+     {\n+        \n+     }\n }\n"
                },
                {
                    "date": 1724784759110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n namespace algorithms::graph::onlinejudge::fuel_tank\n {\n      /** \n       *  https://onlinejudge.org/external/113/11367.pdf\n-      * \n+      * Abridged problem description: Given a connected weighted graph length that stores the road length between E pairs of cities i and j (1 ≤ V ≤ 1000, 0 ≤ E ≤ 10000), the price p[i] of fuel at each city i, and the fuel tank capacity c of a car (1 ≤ c ≤ 100), determine the cheapest trip cost from starting city s to ending city e using a car with fuel capacity c. All cars use one unit of fuel per unit of distance and start with an empty fuel tank.\n+With this problem, we want to discuss the importance of graph modeling. The explicitly given graph in this problem is a weighted graph of the road network. However, we cannot solve this problem with just this graph. This is because the state10 of this problem requires not just the current location (city) but also the fuel level at that location. Otherwise, we cannot determine whether the car has enough fuel to make a trip along a certain road (because we cannot refuel in the middle of the road). Therefore, we use a pair of information to represent the state: (location,fuel) and by doing so, the total number of vertices of the modified graph explodes from just 1000 vertices to 1000 × 100 = 100000 vertices. We call the modified graph: ‘State-Space’ graph.\n+In the State-Space graph, the source vertex is state (s, 0)—at starting city s with empty fuel tank and the target vertices are states (e, any)—at ending city e with any level of fuel between [0..c]. There are two types of edge in the State-Space graph: 0-weighted edge that goes from vertex (x, fuelx) to vertex (y, fuelx − length(x, y)) if the car has sufficient fuel to travel from vertex x to vertex y, and the p[x]-weighted edge that goes from vertex (x,fuelx) to vertex (x, f uelx + 1) if the car can refuel at vertex x by one unit of fuel (note that the fuel level cannot exceed the fuel tank capacity c). Now, running Dijkstra’s on this State-Space graph gives us the solution for this problem\n \n      int cheapestTrip()\n      {\n         return 1;\n"
                }
            ],
            "date": 1724776690849,
            "name": "Commit-0",
            "content": "\n\n\n\n // https://onlinejudge.org/external/113/11367.pdf"
        }
    ]
}