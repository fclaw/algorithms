{
    "sourceFile": "algorithms/dp/leetcode/jumpGame2.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1721579758632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721579764359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         i + j < n\n       Return the minimum number of jumps to reach nums[n - 1]. \n       The test cases are generated such that you can reach nums[n - 1]\n     */\n-    int minJumps(std::vector<int>& nums) \n+    int minJumps(std::vector<int> nums) \n     {\n         int n = nums.size();\n         int i = 0;\n         int end = i - 1;\n"
                },
                {
                    "date": 1721579904575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/jump-game-ii\n+    /*\n+      You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n+      Each element nums[i] represents the maximum length of a forward jump from index i. \n+      In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n+        0 <= j <= nums[i]\n+        i + j < n\n+      Return the minimum number of jumps to reach nums[n - 1]. \n+      The test cases are generated such that you can reach nums[n - 1]\n+    */\n+    int minJumps(std::vector<int> nums) \n+    {\n+        int n = nums.size();\n+        int i = 0;\n+        int end = n - 1;\n+        int jumps = 0;\n+\n+        while(i != end)\n+        {\n+            int k = 0;\n+            for(int j = nums[i] + i; j > nums[i]; j--)\n+                if(nums[j] + j > k)\n+                  k = nums[j] + j;\n+            i = k;\n+            jumps++;\n+        };\n+\n+        return jumps;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721579943492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,48 +21,14 @@\n \n         while(i != end)\n         {\n             int k = 0;\n-            for(int j = nums[i] + i; j > nums[i]; j--)\n+            for(int j = nums[i] + i; j > i; j--)\n                 if(nums[j] + j > k)\n                   k = nums[j] + j;\n             i = k;\n             jumps++;\n         };\n \n         return jumps;\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/jump-game-ii\n-    /*\n-      You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n-      Each element nums[i] represents the maximum length of a forward jump from index i. \n-      In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n-        0 <= j <= nums[i]\n-        i + j < n\n-      Return the minimum number of jumps to reach nums[n - 1]. \n-      The test cases are generated such that you can reach nums[n - 1]\n-    */\n-    int minJumps(std::vector<int> nums) \n-    {\n-        int n = nums.size();\n-        int i = 0;\n-        int end = i - 1;\n-        int jumps = 0;\n-\n-        while(i != end)\n-        {\n-            int k = 0;\n-            for(int j = nums[i] + i; j > nums[i]; j--)\n-                if(nums[j] + j > k)\n-                  k = nums[j] + j;\n-            i = k;\n-            jumps++;\n-        };\n-\n-        return jumps;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721580080152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n         while(i != end)\n         {\n             int k = 0;\n-            for(int j = nums[i] + i; j > i; j--)\n+            for(int j = nums[i]; j > i; j--)\n                 if(nums[j] + j > k)\n                   k = nums[j] + j;\n             i = k;\n             jumps++;\n"
                },
                {
                    "date": 1721580094787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n \n         while(i != end)\n         {\n             int k = 0;\n-            for(int j = nums[i]; j > i; j--)\n-                if(nums[j] + j > k)\n+            for(int j = i + nums[i]; j > i; j--)\n+                if(nums[j] > k)\n                   k = nums[j] + j;\n             i = k;\n             jumps++;\n         };\n"
                },
                {
                    "date": 1721580105081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         while(i != end)\n         {\n             int k = 0;\n             for(int j = i + nums[i]; j > i; j--)\n-                if(nums[j] > k)\n+                if(j + nums[j] > k && )\n                   k = nums[j] + j;\n             i = k;\n             jumps++;\n         };\n"
                },
                {
                    "date": 1721580113073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/jump-game-ii\n+    /*\n+      You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n+      Each element nums[i] represents the maximum length of a forward jump from index i. \n+      In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n+        0 <= j <= nums[i]\n+        i + j < n\n+      Return the minimum number of jumps to reach nums[n - 1]. \n+      The test cases are generated such that you can reach nums[n - 1]\n+    */\n+    int minJumps(std::vector<int> nums) \n+    {\n+        int n = nums.size();\n+        int i = 0;\n+        int end = n - 1;\n+        int jumps = 0;\n+\n+        while(i != end)\n+        {\n+            int k = 0;\n+            for(int j = i + nums[i]; j > i; j--)\n+                if(j + nums[j] > k && j + nums[j] )\n+                  k = nums[j] + j;\n+            i = k;\n+            jumps++;\n+        };\n+\n+        return jumps;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721580118717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n         while(i != end)\n         {\n             int k = 0;\n             for(int j = i + nums[i]; j > i; j--)\n-                if(j + nums[j] > k && j + nums[j] != 0)\n+                if(j + nums[j] > k && \n+                   j + nums[j] != 0)\n                   k = nums[j] + j;\n             i = k;\n             jumps++;\n         };\n"
                },
                {
                    "date": 1721580152039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         while(i != end)\n         {\n             int k = 0;\n             int j = i + nums[i]\n-            while(j )\n+            while(j > i)\n             for(int j = i + nums[i]; j > i; j--)\n                 if(j + nums[j] > k && \n                    j + nums[j] != 0)\n                   k = nums[j] + j;\n"
                }
            ],
            "date": 1721579758632,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace algorithms::leetcode::dp\n{\n    // https://leetcode.com/problems/jump-game-ii\n    /*\n      You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\n      Each element nums[i] represents the maximum length of a forward jump from index i. \n      In other words, if you are at nums[i], you can jump to any nums[i + j] where:\n        0 <= j <= nums[i]\n        i + j < n\n      Return the minimum number of jumps to reach nums[n - 1]. \n      The test cases are generated such that you can reach nums[n - 1]\n    */\n    int minJumps(std::vector<int>& nums) \n    {\n        int n = nums.size();\n        int i = 0;\n        int end = i - 1;\n        int jumps = 0;\n\n        while(i != end)\n        {\n            int k = 0;\n            for(int j = nums[i] + i; j > nums[i]; j--)\n                if(nums[j] + j > k)\n                  k = nums[j] + j;\n            i = k;\n            jumps++;\n        };\n\n        return jumps;\n    }\n}"
        }
    ]
}