{
    "sourceFile": "algorithms/overlapIntervals.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 68,
            "patches": [
                {
                    "date": 1717677236402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717677250530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-eraseOverlapIntervals\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677256787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1 @@\n+int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677261950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,3 @@\n+\n+\n int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677276307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n-\n+// https://leetcode.com/problems/non-overlapping-intervals/\n int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677283441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,5 @@\n \n-// https://leetcode.com/problems/non-overlapping-intervals/\n+\n+\n+// https://leetcode.com/problems/non-overlapping-intervals\n int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677290366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n+#include <vec\n \n \n-\n // https://leetcode.com/problems/non-overlapping-intervals\n int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677296112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-#include <vec\n+#include <vector>\n \n-\n // https://leetcode.com/problems/non-overlapping-intervals\n\\ No newline at end of file\n-int eraseOverlapIntervals(vector<vector<int>>& intervals) { return 0; }\n+int eraseOverlapIntervals(std::vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677301166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n #include <vector>\n \n // https://leetcode.com/problems/non-overlapping-intervals\n-int eraseOverlapIntervals(std::vector<vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n+int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677559637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n #include <vector>\n \n+name\n+\n // https://leetcode.com/problems/non-overlapping-intervals\n int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677572183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n-name\n+namespace Leetcode;\n \n // https://leetcode.com/problems/non-overlapping-intervals\n int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677577983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n-namespace Leetcode;\n+namespace leetcode\n \n // https://leetcode.com/problems/non-overlapping-intervals\n int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677587634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #include <vector>\n \n-namespace leetcode\n+namespace leetcode \n+{\n \n\\ No newline at end of file\n // https://leetcode.com/problems/non-overlapping-intervals\n-int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n+int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717677592801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n #include <vector>\n \n namespace leetcode \n {\n-\n-// https://leetcode.com/problems/non-overlapping-intervals\n-int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n+    // https://leetcode.com/problems/non-overlapping-intervals\n+    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684044444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,6 @@\n \n namespace leetcode \n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n-    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) { return 0; }\n+    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684054329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,9 @@\n \n namespace leetcode \n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n-    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) {}\n+    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n+    {\n+        int \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684059409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,7 @@\n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n-        int \n+        int counter = 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684064640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,8 @@\n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n+        if()\n         int counter = 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684075573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n-        if()\n+        if(intervals.size() == 1)\n         int counter = 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684087303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n-        if(intervals.size() == 1)\n+        if(intervals.size() == 1 || intervals.size() == 0)\n         int counter = 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684096243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n {\n     // https://leetcode.com/problems/non-overlapping-intervals\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n-        if(intervals.size() == 1 || intervals.size() == 0)\n+        if(intervals.size() <= 1)\n+          return 0;\n         int counter = 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684103596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,7 +6,9 @@\n     int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n     {\n         if(intervals.size() <= 1)\n           return 0;\n+\n         int counter = 0;\n+        int \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684111000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,7 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int \n+        int curr_max\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684117935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,7 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int curr_max\n+        int curr_max_idx = inter\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684126888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,8 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int curr_max_idx = inter\n+        int curr_max_idx = intervals[0];\n+        int \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684134402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,8 @@\n           return 0;\n \n         int counter = 0;\n         int curr_max_idx = intervals[0];\n-        int \n+        int i = 0;\n+        while()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684141092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n         int counter = 0;\n         int curr_max_idx = intervals[0];\n         int i = 0;\n-        while()\n+        while(++i < )\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684146960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,8 @@\n \n         int counter = 0;\n         int curr_max_idx = intervals[0];\n         int i = 0;\n-        while(++i < )\n+        while(++i < intervals.size())\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684162345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,12 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int curr_max_idx = intervals[0];\n+        int curr_max_idx = intervals[0][0];\n         int i = 0;\n         while(++i < intervals.size())\n-        \n+        {\n+            //\n+        }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684176098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int curr_max_idx = intervals[0][0];\n+        int curr_max_idx = intervals[0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             //\n"
                },
                {
                    "date": 1717684184528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         if(intervals.size() <= 1)\n           return 0;\n \n         int counter = 0;\n-        int curr_max_idx = intervals[0;\n+        int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             //\n"
                },
                {
                    "date": 1717684223430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,8 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            //\n+            if()\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684229112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,10 @@\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             if()\n+            {}\n+\n+            if()\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717684270787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if()\n+            if(intervals[])\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684277104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[])\n+            if(intervals[i][0])\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684289248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0])\n+            if(intervals[i][0] < )\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684294298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] < )\n+            if(intervals[i][0] < intervals[] )\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684301174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] < intervals[] )\n+            if(intervals[i][0] < intervals[curr_max_idx][0] )\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684312285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] < intervals[curr_max_idx][0] )\n+            if(intervals[i][0] < intervals[curr_max_idx][0] && \n+               intervals[i][0] < intervals[curr_max_idx][0])\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684732490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] < intervals[curr_max_idx][0] && \n-               intervals[i][0] < intervals[curr_max_idx][0])\n+            if(intervals[i][0] > intervals[curr_max_idx][0] && \n+               intervals[i][1] < intervals[curr_max_idx][0])\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684738655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] > intervals[curr_max_idx][0] && \n-               intervals[i][1] < intervals[curr_max_idx][0])\n+               intervals[i][1]  intervals[curr_max_idx][0])\n             {}\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684745256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] > intervals[curr_max_idx][0] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1]  intervals[curr_max_idx][0])\n             {}\n \n             if()\n"
                },
                {
                    "date": 1717684884927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1]  intervals[curr_max_idx][0])\n-            {}\n+            {}m\n \n             if()\n         }\n     }\n"
                },
                {
                    "date": 1717684962375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n-               intervals[i][1]  intervals[curr_max_idx][0])\n-            {}m\n+               intervals[i][1] > intervals[curr_max_idx][0])\n+            {}\n \n             if()\n         }\n     }\n"
                },
                {
                    "date": 1717684982890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n-            {}\n+            {\n+                \n+            }\n \n             if()\n         }\n     }\n"
                },
                {
                    "date": 1717684990657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n-                \n+                coin\n             }\n \n             if()\n         }\n"
                },
                {
                    "date": 1717684997709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+\n+namespace leetcode \n+{\n+    // https://leetcode.com/problems/non-overlapping-intervals\n+    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n+    {\n+        if(intervals.size() <= 1)\n+          return 0;\n+\n+        int counter = 0;\n+        int curr_max_idx = 0;\n+        int i = 0;\n+        while(++i < intervals.size())\n+        {\n+            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n+               intervals[i][1] > intervals[curr_max_idx][0])\n+            {\n+                counter++;\n+                \n+            }\n+\n+            if()\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685003632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,36 +16,11 @@\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n-                \n+                curr_max_idx = \n             }\n \n             if()\n         }\n     }\n-}\n-#include <vector>\n-\n-namespace leetcode \n-{\n-    // https://leetcode.com/problems/non-overlapping-intervals\n-    int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) \n-    {\n-        if(intervals.size() <= 1)\n-          return 0;\n-\n-        int counter = 0;\n-        int curr_max_idx = 0;\n-        int i = 0;\n-        while(++i < intervals.size())\n-        {\n-            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n-               intervals[i][1] > intervals[curr_max_idx][0])\n-            {\n-                coin\n-            }\n-\n-            if()\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685029314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,11 @@\n             if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n-                curr_max_idx = \n+                curr_max_idx = i;\n             }\n \n-            if()\n+            if(intervals[i][0] <= intervals[curr_max_idx][0])\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685036081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,8 @@\n                 counter++;\n                 curr_max_idx = i;\n             }\n \n-            if(intervals[i][0] <= intervals[curr_max_idx][0])\n+            if(intervals[i][0] > intervals[curr_max_idx][0])\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685048281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n                 counter++;\n                 curr_max_idx = i;\n             }\n \n-            if(intervals[i][0] > intervals[curr_max_idx][0])\n+            if(intervals[i][0] >= intervals[curr_max_idx][0])\n+              \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685054600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,8 @@\n                 curr_max_idx = i;\n             }\n \n             if(intervals[i][0] >= intervals[curr_max_idx][0])\n-              \n+              curr_max_idx = i;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685066365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,8 @@\n             }\n \n             if(intervals[i][0] >= intervals[curr_max_idx][0])\n               curr_max_idx = i;\n-        }\n+        };\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685072087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n \n             if(intervals[i][0] >= intervals[curr_max_idx][0])\n               curr_max_idx = i;\n         };\n-        \n+        return counter;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685105517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n+        \n+        \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n@@ -22,7 +24,8 @@\n \n             if(intervals[i][0] >= intervals[curr_max_idx][0])\n               curr_max_idx = i;\n         };\n+\n         return counter;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717685112691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        \n-        \n+        std::sort(intervals.);\n+\n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n"
                },
                {
                    "date": 1717685139155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.);\n+        std::sort(intervals.begin(), intervals.end(), []);\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685145384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.begin(), intervals.end(), []);\n+        std::sort(intervals.begin(), intervals.end(), [](auto ));\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685150844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.begin(), intervals.end(), [](auto ));\n+        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) {  } );\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685155916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) {  } );\n+        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) { x[0] } );\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685163926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) { x[0] } );\n+        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) { x[0] < y[0]; } );\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685213036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     {\n         if(intervals.size() <= 1)\n           return 0;\n \n-        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) { x[0] < y[0]; } );\n+        std::sort(intervals.begin(), intervals.end(), [](auto x, auto y) { return x[0] < y[0]; } );\n \n         int counter = 0;\n         int curr_max_idx = 0;\n         int i = 0;\n"
                },
                {
                    "date": 1717685392902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][1] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685398805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] <= intervals[curr_max_idx][1] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][i] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685489132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] <= intervals[curr_max_idx][i] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][1] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685513486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] <= intervals[curr_max_idx][1] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685526497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n         int curr_max_idx = 0;\n         int i = 0;\n         while(++i < intervals.size())\n         {\n-            if(intervals[i][0] <= intervals[curr_max_idx][0] && \n+            if(intervals[i][0] <= intervals[curr_max_idx][0] &&\n+               intervals[i][0] <= intervals[curr_max_idx][0] \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685534414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] &&\n-               intervals[i][1] <= intervals[curr_max_idx][0] \n+               intervals[i][0] <= intervals[curr_max_idx][0] \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                },
                {
                    "date": 1717685540380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         int i = 0;\n         while(++i < intervals.size())\n         {\n             if(intervals[i][0] <= intervals[curr_max_idx][0] &&\n-               intervals[i][0] <= intervals[curr_max_idx][0] \n+               intervals[i][0] <= intervals[curr_max_idx][1] \n                intervals[i][1] > intervals[curr_max_idx][0])\n             {\n                 counter++;\n                 curr_max_idx = i;\n"
                }
            ],
            "date": 1717677236402,
            "name": "Commit-0",
            "content": "eraseOverlapIntervals"
        }
    ]
}