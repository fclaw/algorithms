{
    "sourceFile": "algorithms/graph/onlinejudge/fullTank.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1724787286154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724832262510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n \n \n namespace algorithms::graph::onlinejudge::full_tank\n {\n+\n+\n+\n      /** \n       *  https://onlinejudge.org/external/113/11367.pdf\n       * Abridged problem description: Given a connected weighted graph length \n       * that stores the road length between E pairs of cities i and j (1 ≤ V ≤ 1000, 0 ≤ E ≤ 10000), \n"
                },
                {
                    "date": 1724832268122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+#include <vec\n \n \n-\n namespace algorithms::graph::onlinejudge::full_tank\n {\n \n \n"
                },
                {
                    "date": 1724832281799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n-#include <vec\n+#include <vector>\n \n-\n namespace algorithms::graph::onlinejudge::full_tank\n {\n \n+using graph = std::vector<std::\n \n \n+\n      /** \n       *  https://onlinejudge.org/external/113/11367.pdf\n       * Abridged problem description: Given a connected weighted graph length \n       * that stores the road length between E pairs of cities i and j (1 ≤ V ≤ 1000, 0 ≤ E ≤ 10000), \n"
                },
                {
                    "date": 1724832290541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::onlinejudge::full_tank\n {\n \n-using graph = std::vector<std::tuple\n+using graph = std::vector<std::tuple<int, int, int>>>\n \n \n \n      /** \n"
                },
                {
                    "date": 1724832337740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace algorithms::graph::onlinejudge::full_tank\n {\n \n using graph = std::vector<std::tuple<int, int, int>>;\n-using fuel_price = std::vector<int>;. \n+using fuel_price = std::vector<int>; \n \n \n      /** \n       *  https://onlinejudge.org/external/113/11367.pdf\n"
                }
            ],
            "date": 1724787286154,
            "name": "Commit-0",
            "content": "\n\n\nnamespace algorithms::graph::onlinejudge::full_tank\n{\n     /** \n      *  https://onlinejudge.org/external/113/11367.pdf\n      * Abridged problem description: Given a connected weighted graph length \n      * that stores the road length between E pairs of cities i and j (1 ≤ V ≤ 1000, 0 ≤ E ≤ 10000), \n      * the price p[i] of fuel at each city i, and the fuel tank capacity c of a car (1 ≤ c ≤ 100), \n      * determine the cheapest trip cost from starting city s to ending city e using a car with fuel capacity c. \n      * All cars use one unit of fuel per unit of distance and start with an empty fuel tank.\n      * With this problem, we want to discuss the importance of graph modeling. \n      * The explicitly given graph in this problem is a weighted graph of the road network. \n      * However, we cannot solve this problem with just this graph. \n      * This is because the state of this problem requires not just the current location (city) \n      * but also the fuel level at that location. \n      * Otherwise, we cannot determine whether the car has enough fuel to make a trip along a certain road \n      * (because we cannot refuel in the middle of the road). \n      * Therefore, we use a pair of information to represent the state: (location, fuel) \n      * and by doing so, the total number of vertices of the modified graph explodes \n      * from just 1000 vertices to 1000 × 100 = 100000 vertices. We call the modified graph: ‘State-Space’ graph.\n      * In the State-Space graph, the source vertex is state (s, 0)—at starting city s with empty fuel tank \n      * and the target vertices are states (e, any)—at ending city e with any level of fuel between [0..c]. \n      * There are two types of edge in the State-Space graph: 0-weighted edge \n      * that goes from vertex (x, fuel(x)) to vertex (y, fuel(x) − length(x, y)) \n      * if the car has sufficient fuel to travel from vertex x to vertex y, \n      * and the p[x]-weighted edge that goes from vertex (x,fuel(x)) to vertex \n      * (x, fuel(x) + 1) if the car can refuel at vertex x by one unit of fuel \n      * (note that the fuel level cannot exceed the fuel tank capacity c). \n      * Now, running Dijkstra’s on this State-Space graph gives us the solution for this problem */\n     int cheapestTrip()\n     {\n        return 1;\n     }\n}\n"
        }
    ]
}