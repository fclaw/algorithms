{
    "sourceFile": "algorithms/graph/sf_dijkstra.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1724158979077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724158984205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n \n+namespace algorithms::graph::dfs\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724158989966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n \n-namespace algorithms::graph::dfs\n\\ No newline at end of file\n+namespace algorithms::graph::di\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724158998635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,5 @@\n \n-namespace algorithms::graph::di\n\\ No newline at end of file\n+namespace algorithms::graph::dijkstra\n+{\n+    // \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159036374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n \n namespace algorithms::graph::dijkstra\n {\n-    // \n+    /**/\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159047769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n \n namespace algorithms::graph::dijkstra\n {\n-    /**/\n+    /**\n+     * A straightforward implementation keeps track of which vertices are in X \n+     * by associating a Boolean variable with each vertex. Each iteration, it performs an exhaustive search through all the edges, computes the Dijkstra score for each edge with tail in X and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n+     * \n+     */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159054014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n namespace algorithms::graph::dijkstra\n {\n     /**\n      * A straightforward implementation keeps track of which vertices are in X \n-     * by associating a Boolean variable with each vertex. Each iteration, it performs an exhaustive search through all the edges, computes the Dijkstra score for each edge with tail in X and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n+     * by associating a Boolean variable with each vertex. \n+     * Each iteration, it performs an exhaustive search through all the edges, \n+     * computes the Dijkstra score for each edge with tail in X and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159060452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     /**\n      * A straightforward implementation keeps track of which vertices are in X \n      * by associating a Boolean variable with each vertex. \n      * Each iteration, it performs an exhaustive search through all the edges, \n-     * computes the Dijkstra score for each edge with tail in X and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n+     * computes the Dijkstra score for each edge with tail in X \n+     * and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159084752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n      * A straightforward implementation keeps track of which vertices are in X \n      * by associating a Boolean variable with each vertex. \n      * Each iteration, it performs an exhaustive search through all the edges, \n      * computes the Dijkstra score for each edge with tail in X \n-     * and head outside X (in constant time per edge), and returns the crossing edge with the smallest score (or correctly identifies tha\n+     * and head outside X (in constant time per edge), \n+     * and returns the crossing edge with the smallest score (or correctly identifies that\n+     * no crossing edges exist). After at most n \u0000 1 iterations, the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159092987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,8 @@\n      * Each iteration, it performs an exhaustive search through all the edges, \n      * computes the Dijkstra score for each edge with tail in X \n      * and head outside X (in constant time per edge), \n      * and returns the crossing edge with the smallest score (or correctly identifies that\n-     * no crossing edges exist). After at most n \u0000 1 iterations, the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n+     * no crossing edges exist). After at most n - 1 iterations, the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159098314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n      * Each iteration, it performs an exhaustive search through all the edges, \n      * computes the Dijkstra score for each edge with tail in X \n      * and head outside X (in constant time per edge), \n      * and returns the crossing edge with the smallest score (or correctly identifies that\n-     * no crossing edges exist). After at most n - 1 iterations, the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n+     * no crossing edges exist). After at most n - 1 iterations, \n+     * the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159106330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n      * computes the Dijkstra score for each edge with tail in X \n      * and head outside X (in constant time per edge), \n      * and returns the crossing edge with the smallest score (or correctly identifies that\n      * no crossing edges exist). After at most n - 1 iterations, \n-     * the Dijkstra algorithm runs out of new vertices to add to its set X. Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n+     * the Dijkstra algorithm runs out of new vertices to add to its set X. \n+     * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159141650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,5 +12,6 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159157228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,13 @@\n+#include <vector>\n \n namespace algorithms::graph::dijkstra\n {\n+\n+using adj = std::vector<std::vector<std::pair<int, int>>>;\n+using dist = std::vector<int>;\n+using vi = std::vector<bool>;\n+\n     /**\n      * A straightforward implementation keeps track of which vertices are in X \n      * by associating a Boolean variable with each vertex. \n      * Each iteration, it performs an exhaustive search through all the edges, \n"
                },
                {
                    "date": 1724159164474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n using adj = std::vector<std::vector<std::pair<int, int>>>;\n using dist = std::vector<int>;\n using vi = std::vector<bool>;\n \n+\n     /**\n      * A straightforward implementation keeps track of which vertices are in X \n      * by associating a Boolean variable with each vertex. \n      * Each iteration, it performs an exhaustive search through all the edges, \n"
                },
                {
                    "date": 1724159170336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n using adj = std::vector<std::vector<std::pair<int, int>>>;\n using dist = std::vector<int>;\n using vi = std::vector<bool>;\n \n-\n     /**\n      * A straightforward implementation keeps track of which vertices are in X \n      * by associating a Boolean variable with each vertex. \n      * Each iteration, it performs an exhaustive search through all the edges, \n@@ -19,6 +18,6 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n-    \n+    dist     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159182560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n-    dist     \n+    dist sf_dijkstra()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159188343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n-    dist sf_dijkstra()\n+    dist sf_dijkstra(const )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159193839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n-    dist sf_dijkstra(const )\n+    dist sf_dijkstra(const graph& g)\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159202844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,9 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n-    dist sf_dijkstra(const graph& g)\n+    dist sf_dijkstra(int v, const graph& g)\n+    {\n+        return \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724159211703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n      * the Dijkstra algorithm runs out of new vertices to add to its set X. \n      * Because the number of iterations is O(n) and each takes time O(m), the overall running time is O(mn).\n      * \n      */\n+    \n     dist sf_dijkstra(int v, const graph& g)\n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1724171537123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::dijkstra\n {\n \n-using graph = std::vector<std::tuple<int, int, int>>>;\n+using graph = std::vector<std::tuple<int, int, int>>;\n using dist = std::vector<int>;\n using vi = std::vector<bool>;\n \n     /**\n"
                }
            ],
            "date": 1724158979077,
            "name": "Commit-0",
            "content": "\n"
        }
    ]
}