{
    "sourceFile": "algorithms/cutStick.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1718379272815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718379286485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n-// https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n\\ No newline at end of file\n+// https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n+\n"
                },
                {
                    "date": 1718379293779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,6 @@\n // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n \n+namespace leetcode::dp\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718379303498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n \n namespace leetcode::dp\n {\n-    \n+    int minCost(int n, vector<int>& cuts) { }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718379311277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n-\n namespace leetcode::dp\n {\n-    int minCost(int n, vector<int>& cuts) { }\n+    int minCost(int n, vector<int>& cuts) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718379316501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+\n+\n namespace leetcode::dp\n {\n+    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n     int minCost(int n, vector<int>& cuts) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718379321728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n     int minCost(int n, vector<int>& cuts) {}\n"
                },
                {
                    "date": 1719996135080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,8 @@\n \n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n-    int minCost(int n, vector<int>& cuts) {}\n+    /*\n+    */\n+    int minCost(int n, std::vector<int>& cuts) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719996142278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,13 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n     /*\n+      Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n+You should perform the cuts in order, you can change the order of the cuts as you wish.\n+\n+The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n+\n+Return the minimum total cost of the cuts.\n     */\n     int minCost(int n, std::vector<int>& cuts) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719996149728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+#include <vector>\n+\n+namespace leetcode::dp\n+{\n+    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n+    /*\n+      Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n+      You should perform the cuts in order, you can change the order of the cuts as you wish.\n+      The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n+Return the minimum total cost of the cuts.\n+    */\n+    int minCost(int n, std::vector<int>& cuts) {}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719996159126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,24 +5,10 @@\n     // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n     /*\n       Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n       You should perform the cuts in order, you can change the order of the cuts as you wish.\n-      The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n-Return the minimum total cost of the cuts.\n+      The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n+      When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n+      Return the minimum total cost of the cuts.\n     */\n     int minCost(int n, std::vector<int>& cuts) {}\n-}\n-#include <vector>\n-\n-namespace leetcode::dp\n-{\n-    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n-    /*\n-      Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n-You should perform the cuts in order, you can change the order of the cuts as you wish.\n-\n-The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n-\n-Return the minimum total cost of the cuts.\n-    */\n-    int minCost(int n, std::vector<int>& cuts) {}\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1718379272815,
            "name": "Commit-0",
            "content": "// https://leetcode.com/problems/minimum-cost-to-cut-a-stick"
        }
    ]
}