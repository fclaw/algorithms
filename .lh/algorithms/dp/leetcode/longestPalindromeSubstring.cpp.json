{
    "sourceFile": "algorithms/dp/leetcode/longestPalindromeSubstring.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 119,
            "patches": [
                {
                    "date": 1719836771063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719836787638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,12 @@\n #include <string>\n #include <vector>\n #include <iostream>\n \n-using DP = std::vector<std::vector<int>>;\n-\n namespace algorithms::leetcode::dp\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n ?? (p[i1, j2], bool) - p-is the max palindrome in i,j, bool whether i-j is a palindrome , \n-    // where i an j are the right and left boundaries, n - max palindrome within i, j\n-    int longestPalindromeDp(std::string str)\n-    {\n-        int n = str.size();\n-        DP dp(n + 1, std::vector<int>(n + 1, 0));\n- \n-        // .... ???\n+    // Given a string s, return the longest palindromic substring in \n \n-        return dp[0][n];\n-    }\n-\n     int longestSubstringPalindrome(std::string s) { return longestPalindromeDp(s); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719836799620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n namespace algorithms::leetcode::dp\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in \n+    // Given a string s, return the longest palindromic substring in s\n \n-    int longestSubstringPalindrome(std::string s) { return longestPalindromeDp(s); }\n+    int longestSubstringPalindrome(std::string s) \n+    {  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837748149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,11 @@\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n \n+\n+\n     int longestSubstringPalindrome(std::string s) \n-    {  }\n+    {\n+\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837764111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,11 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n+    \n \n \n-\n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n"
                },
                {
                    "date": 1719837780400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string)\n+    {\n+        \n+    }\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837786563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,30 +8,13 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string)\n     {\n-        \n+        int f, l;\n     }\n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    \n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837803097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,8 @@\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string)\n-    {\n-        int f, l;\n     }\n \n \n     int longestSubstringPalindrome(std::string s) \n"
                },
                {
                    "date": 1719837809355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string)\n-    }\n+    bool isPalindrome(std::string) { return  }\n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n"
                },
                {
                    "date": 1719837814482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return  }\n+    bool isPalindrome(std::string) { return truel }\n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n"
                },
                {
                    "date": 1719837824345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,14 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return truel }\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    \n \n \n+\n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n"
                },
                {
                    "date": 1719837834548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) { return true; }\n     \n-    \n+    int longestSubstringPalindrome(std::string s, )\n \n \n \n     int longestSubstringPalindrome(std::string s) \n"
                },
                {
                    "date": 1719837845446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    int longestSubstringPalindrome(std::string s, int i, int j)\n+    {\n+        \n+    }\n+\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837863368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,36 +8,16 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) { return true; }\n     \n-    int longestSubstringPalindrome(std::string s, int i, int j)\n+    std::sting longestSubstringPalindrome(std::string s, int i, int j)\n     {\n-        \n+        if()\n     }\n \n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n-    \n-    int longestSubstringPalindrome(std::string s, )\n-\n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837868555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) { return true; }\n     \n-    std::sting longestSubstringPalindrome(std::string s, int i, int j)\n+    std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if()\n     }\n \n"
                },
                {
                    "date": 1719837908489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    std::string longestSubstringPalindrome(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return \n+    }\n+\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837916580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,37 +11,16 @@\n     \n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return \n+          return s[i];\n+        \n+          \n     }\n \n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n-    \n-    std::string longestSubstringPalindrome(std::string s, int i, int j)\n-    {\n-        if()\n-    }\n-\n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837924911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n           return s[i];\n-        \n+\n           \n     }\n \n \n"
                },
                {
                    "date": 1719837997615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     \n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s[i];\n+          return s.substr();\n \n           \n     }\n \n"
                },
                {
                    "date": 1719838014719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     \n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s.substr();\n+          return s.substr(i, );\n \n           \n     }\n \n"
                },
                {
                    "date": 1719838021128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n     \n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s.substr(i, );\n-\n+          return s.substr(i, j);\n+        \n           \n+          \n     }\n \n \n \n"
                },
                {
                    "date": 1719838027460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n     std::string longestSubstringPalindrome(std::string s, int i, int j)\n     {\n         if(i == j)\n           return s.substr(i, j);\n-        \n+\n+        std::string   \n           \n-          \n     }\n \n \n \n"
                },
                {
                    "date": 1719838035202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string   \n+        std::string s1 = longestSubstringPalindrome\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838042415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string s1 = longestSubstringPalindrome\n+        std::string \n+        std::string s1 = longestSubstringPalindrome()\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838048999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string \n-        std::string s1 = longestSubstringPalindrome()\n+        std::string max;\n+        std::string s1 = longestSubstringPalindrome(s, )\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838062862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         if(i == j)\n           return s.substr(i, j);\n \n         std::string max;\n-        std::string s1 = longestSubstringPalindrome(s, )\n+        std::string s1 = longestSubstringPalindrome(s, i + 1, j)\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838068714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n         if(i == j)\n           return s.substr(i, j);\n \n         std::string max;\n-        std::string s1 = longestSubstringPalindrome(s, i + 1, j)\n+        std::string s1 = longestSubstringPalindrome(s, i + 1, j);\n+        std::string s1 = longestSubstringPalindrome(s, i + 1, j);\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838077316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n         if(i == j)\n           return s.substr(i, j);\n \n         std::string max;\n+        std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string s1 = longestSubstringPalindrome(s, i + 1, j);\n-        std::string s1 = longestSubstringPalindrome(s, i + 1, j);\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838084338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n           return s.substr(i, j);\n \n         std::string max;\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string s1 = longestSubstringPalindrome(s, i + 1, j);\n+        std::string l = longestSubstringPalindrome(s, i, j);\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838097972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,11 @@\n           return s.substr(i, j);\n \n         std::string max;\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string l = longestSubstringPalindrome(s, i, j);\n+        std::string l = longestSubstringPalindrome(s, i, j - 1);\n+\n+        \n           \n     }\n \n \n"
                },
                {
                    "date": 1719838122764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,13 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string max;\n+        std::string max ;\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n \n-        \n+\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838130798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string max ;\n+        std::string max = ;\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n \n \n"
                },
                {
                    "date": 1719838144408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,13 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string max = ;\n+        std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n-\n-\n+       \n+        if()\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838153098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if()\n+        if(s[])\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838158207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[])\n+        if(s[i] == )\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838168533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == )\n+        if(s[i] == r[r.size() - 1] && )\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838174168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && )\n+        if(s[i] == r[r.size() - 1] && isPalindrome())\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838180098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome())\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr()))\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838216665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr()))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, )))\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838223491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string max = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, )))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838230460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,14 +13,15 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string max = \"\";\n+        std::string  = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n           \n+          \n     }\n \n \n \n"
                },
                {
                    "date": 1719838236604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n-        std::string  = \"\";\n+        std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n"
                },
                {
                    "date": 1719838248382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n+          maxPalindrome = std::max(maxPalindrome, )\n           \n-          \n     }\n \n \n \n"
                },
                {
                    "date": 1719838343902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-          maxPalindrome = std::max(maxPalindrome, )\n+          maxPalindrome = std::max(maxPalindrome, s.s)\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838350704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-          maxPalindrome = std::max(maxPalindrome, s.s)\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j))\n           \n     }\n \n \n"
                },
                {
                    "date": 1719838361003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    std::string longestSubstringPalindrome(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindrome(s, i + 1, j);\n+        std::string l = longestSubstringPalindrome(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return   \n+    }\n+\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838373659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,49 +17,17 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || )\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n-        return   \n+        return maxPalindrome;\n     }\n \n \n \n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n-    \n-    std::string longestSubstringPalindrome(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string l = longestSubstringPalindrome(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j))\n-          \n-    }\n-\n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838381231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || )\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[])\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719838419112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[])\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == )\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719838424340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == )\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && )\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719838429788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    std::string longestSubstringPalindrome(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindrome(s, i + 1, j);\n+        std::string l = longestSubstringPalindrome(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome)\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838436923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome)\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome())\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n@@ -29,38 +29,5 @@\n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n-    \n-    std::string longestSubstringPalindrome(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string l = longestSubstringPalindrome(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && )\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838443519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome())\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719838451771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr(1, )))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719838458789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string) { return true; }\n+    \n+    std::string longestSubstringPalindrome(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindrome(s, i + 1, j);\n+        std::string l = longestSubstringPalindrome(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+\n+\n+    int longestSubstringPalindrome(std::string s) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838466796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindrome(s, i + 1, j);\n         std::string l = longestSubstringPalindrome(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n     }\n@@ -29,38 +30,5 @@\n     int longestSubstringPalindrome(std::string s) \n     {\n \n     }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n-    \n-    std::string longestSubstringPalindrome(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string l = longestSubstringPalindrome(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || s[j] == l[0] && isPalindrome(l.substr(1, )))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838479690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,7 @@\n \n         return maxPalindrome;\n     }\n \n-\n-\n-    int longestSubstringPalindrome(std::string s) \n-    {\n-\n+    int longestSubstringPalindrome(std::string s) {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838488886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) { return true; }\n     \n-    std::string longestSubstringPalindrome(std::string s, int i, int j)\n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n           return s.substr(i, j);\n \n@@ -24,7 +24,6 @@\n \n         return maxPalindrome;\n     }\n \n-    int longestSubstringPalindrome(std::string s) {\n-    }\n+    int longestSubstringPalindrome(std::string s) { return  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838495556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n         if(i == j)\n           return s.substr(i, j);\n \n         std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindrome(s, i + 1, j);\n-        std::string l = longestSubstringPalindrome(s, i, j - 1);\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n"
                },
                {
                    "date": 1719838505309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,6 +24,6 @@\n \n         return maxPalindrome;\n     }\n \n-    int longestSubstringPalindrome(std::string s) { return  }\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec() }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838514783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,6 +24,6 @@\n \n         return maxPalindrome;\n     }\n \n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec() }\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1) }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838525590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,6 +24,6 @@\n \n         return maxPalindrome;\n     }\n \n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1) }\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838596448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) { return true; }\n+    bool isPalindrome(std::string) \n+    { return true; }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n"
                },
                {
                    "date": 1719838602007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,11 @@\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) \n-    { return true; }\n+    {\n+        int \n+    }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n"
                },
                {
                    "date": 1719838609246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     bool isPalindrome(std::string) \n     {\n-        int \n+        int f = 0;\n+        int l = \n     }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n"
                },
                {
                    "date": 1719838625582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        while()\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838634782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,12 @@\n     bool isPalindrome(std::string s) \n     {\n         int f = 0;\n         int l = s.size() - 1;\n-        while()\n+        while(f < l)\n+        {\n+            \n+        }\n     }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n@@ -30,38 +33,5 @@\n         return maxPalindrome;\n     }\n \n     int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string) \n-    {\n-        int f = 0;\n-        int l = \n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838639850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool is\n+        while(f < l)\n+        {\n+            \n+        }\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838645230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     bool isPalindrome(std::string s) \n     {\n         int f = 0;\n         int l = s.size() - 1;\n-        bool is\n+        bool isSame = \n         while(f < l)\n         {\n             \n         }\n@@ -34,42 +34,5 @@\n         return maxPalindrome;\n     }\n \n     int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string s) \n-    {\n-        int f = 0;\n-        int l = s.size() - 1;\n-        while(f < l)\n-        {\n-            \n-        }\n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838650430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,15 @@\n     bool isPalindrome(std::string s) \n     {\n         int f = 0;\n         int l = s.size() - 1;\n-        bool isSame = \n+        bool isSame = false;\n         while(f < l)\n         {\n             \n         }\n+\n+        return \n     }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n"
                },
                {
                    "date": 1719838658285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         {\n             \n         }\n \n-        return \n+        return isSame;\n     }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n"
                },
                {
                    "date": 1719838713247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int l = s.size() - 1;\n         bool isSame = false;\n         while(f < l)\n         {\n-            \n+               \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838733200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int l = s.size() - 1;\n         bool isSame = false;\n         while(f < l)\n         {\n-               \n+            if()   \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838739347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int l = s.size() - 1;\n         bool isSame = false;\n         while(f < l)\n         {\n-            if()   \n+            if(s[f] == )   \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838746042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n         int l = s.size() - 1;\n         bool isSame = false;\n         while(f < l)\n         {\n-            if(s[f] == )   \n+            if(s[f] == l[l])\n+                 \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838757448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool isSame = false;\n+        while(f < l)\n+        {\n+            if(s[f] == l[l])\n+              isSame = isSame    \n+        }\n+\n+        return isSame;\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838762636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,46 +37,5 @@\n         return maxPalindrome;\n     }\n \n     int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string s) \n-    {\n-        int f = 0;\n-        int l = s.size() - 1;\n-        bool isSame = false;\n-        while(f < l)\n-        {\n-            if(s[f] == l[l])\n-                 \n-        }\n-\n-        return isSame;\n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838771512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     bool isPalindrome(std::string s) \n     {\n         int f = 0;\n         int l = s.size() - 1;\n-        bool isSame = false;\n+        bool isSame = true;\n         while(f < l)\n         {\n             if(s[f] == l[l])\n               isSame = isSame    \n"
                },
                {
                    "date": 1719838776922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int l = s.size() - 1;\n         bool isSame = true;\n         while(f < l)\n         {\n-            if(s[f] == l[l])\n+            if(s[f] != l[l])\n               isSame = isSame    \n         }\n \n         return isSame;\n"
                },
                {
                    "date": 1719838783750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n         bool isSame = true;\n         while(f < l)\n         {\n             if(s[f] != l[l])\n-              isSame = isSame    \n+              isSame = false;\n+                  \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838909564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         while(f < l)\n         {\n             if(s[f] != l[l])\n               isSame = false;\n-                  \n+              break;  \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838916339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,13 @@\n         bool isSame = true;\n         while(f < l)\n         {\n             if(s[f] != l[l])\n+            {\n               isSame = false;\n-              break;  \n+              break;\n+            }\n+              \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838923186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,10 @@\n             {\n               isSame = false;\n               break;\n             }\n-              \n+            f++;\n+            l--;  \n         }\n \n         return isSame;\n     }\n"
                },
                {
                    "date": 1719838932882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         int l = s.size() - 1;\n         bool isSame = true;\n         while(f < l)\n         {\n-            if(s[f] != l[l])\n+            if(s[f] != s[l])\n             {\n               isSame = false;\n               break;\n             }\n"
                },
                {
                    "date": 1719838943746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n             }\n             f++;\n             l--;  \n         }\n-\n         return isSame;\n     }\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n"
                },
                {
                    "date": 1719838961392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,6 +40,6 @@\n \n         return maxPalindrome;\n     }\n \n-    int longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n+     longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838968891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,6 +40,6 @@\n \n         return maxPalindrome;\n     }\n \n-     longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n+    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839137029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool isSame = true;\n+        while(f < l)\n+        {\n+            if(s[f] != s[l])\n+            {\n+              isSame = false;\n+              break;\n+            }\n+            f++;\n+            l--;  \n+        }\n+        return isSame;\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return s.substr(i, j);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839235690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,50 +41,5 @@\n         return maxPalindrome;\n     }\n \n     std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string s) \n-    {\n-        int f = 0;\n-        int l = s.size() - 1;\n-        bool isSame = true;\n-        while(f < l)\n-        {\n-            if(s[f] != s[l])\n-            {\n-              isSame = false;\n-              break;\n-            }\n-            f++;\n-            l--;  \n-        }\n-        return isSame;\n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return s.substr(i, j);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1).size(); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839245675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n               isSame = false;\n               break;\n             }\n             f++;\n-            l--;  \n+            l--;\n         }\n         return isSame;\n     }\n     \n"
                },
                {
                    "date": 1719839461148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s.substr(i, j);\n+          return s.substr(i, i);\n \n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n"
                },
                {
                    "date": 1719839467599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s.substr(i, i);\n+          return s[i];\n \n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n"
                },
                {
                    "date": 1719839482741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return s[i];\n+          return new std::string(s[i];\n \n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n"
                },
                {
                    "date": 1719839487841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return new std::string(s[i];\n+          return new std::string(1, s[i]);\n \n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n"
                },
                {
                    "date": 1719839534524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n     \n     std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n     {\n         if(i == j)\n-          return new std::string(1, s[i]);\n+          return std::string(1, s[i]);\n \n-        std::string maxPalindrome = \"\";\n+        std::string maxPalindrome = std::str;\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n"
                },
                {
                    "date": 1719839540746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     {\n         if(i == j)\n           return std::string(1, s[i]);\n \n-        std::string maxPalindrome = std::str;\n+        std::string maxPalindrome = std::string::empty;\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n"
                },
                {
                    "date": 1719839563998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     {\n         if(i == j)\n           return std::string(1, s[i]);\n \n-        std::string maxPalindrome = std::string::empty;\n+        std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n"
                },
                {
                    "date": 1719839591152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(i, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n"
                },
                {
                    "date": 1719839604137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(i, r.size() - 1)) || \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n"
                },
                {
                    "date": 1719839638753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(, r.size() - 1)) || \n+        std::cout << \n+\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n         return maxPalindrome;\n"
                },
                {
                    "date": 1719839645050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool isSame = true;\n+        while(f < l)\n+        {\n+            if(s[f] != s[l])\n+            {\n+              isSame = false;\n+              break;\n+            }\n+            f++;\n+            l--;\n+        }\n+        return isSame;\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return std::string(1, s[i]);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        std::cout << \"r: \" << r \n+\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n+\n+        return maxPalindrome;\n+    }\n+\n+    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839650198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        std::cout << \"r: \" << r \n+        std::cout << \"r: \" << r << \", l\"\n \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n@@ -43,52 +43,5 @@\n         return maxPalindrome;\n     }\n \n     std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string s) \n-    {\n-        int f = 0;\n-        int l = s.size() - 1;\n-        bool isSame = true;\n-        while(f < l)\n-        {\n-            if(s[f] != s[l])\n-            {\n-              isSame = false;\n-              break;\n-            }\n-            f++;\n-            l--;\n-        }\n-        return isSame;\n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return std::string(1, s[i]);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        std::cout << \n-\n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839656208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        std::cout << \"r: \" << r << \", l\"\n+        std::cout << \"r: \" << r << \", l: \" << l << std::end\n \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n"
                },
                {
                    "date": 1719839702957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        std::cout << \"r: \" << r << \", l: \" << l << std::end\n+    \n \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n"
                },
                {
                    "date": 1719839739924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,14 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-    \n-\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n+        std::cout << \n+\n         return maxPalindrome;\n     }\n \n     std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1719839746596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n-        std::cout << \n+        std::cout << maxPal\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719839752404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n-        std::cout << maxPal\n+        std::cout << maxPalindrome << std::end\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719839762614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n-        std::cout << maxPalindrome << std::end\n+        std::cout << maxPalindrome << std::endl;\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719839779696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,8 @@\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n \n-        std::cout << maxPalindrome << std::endl;\n-\n         return maxPalindrome;\n     }\n \n     std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1719839847173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool isSame = true;\n+        while(f < l)\n+        {\n+            if(s[f] != s[l])\n+            {\n+              isSame = false;\n+              break;\n+            }\n+            f++;\n+            l--;\n+        }\n+        return isSame;\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return std::string(1, s[i]);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, );\n+\n+        return maxPalindrome;\n+    }\n+\n+    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839866111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,50 +41,5 @@\n         return maxPalindrome;\n     }\n \n     std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n-}\n-#include <string>\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-     \n-    // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest palindromic substring in s\n-    bool isPalindrome(std::string s) \n-    {\n-        int f = 0;\n-        int l = s.size() - 1;\n-        bool isSame = true;\n-        while(f < l)\n-        {\n-            if(s[f] != s[l])\n-            {\n-              isSame = false;\n-              break;\n-            }\n-            f++;\n-            l--;\n-        }\n-        return isSame;\n-    }\n-    \n-    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n-    {\n-        if(i == j)\n-          return std::string(1, s[i]);\n-\n-        std::string maxPalindrome = \"\";\n-        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n-        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n-       \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.substr(i, j));\n-\n-        return maxPalindrome;\n-    }\n-\n-    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839886285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, );\n+          maxPalindrome = std::max(maxPalindrome, s.pre);\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719839892629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, s.pre);\n+          maxPalindrome = std::max(maxPalindrome, );\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719839908490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)) || \n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1))\n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, );\n \n         return maxPalindrome;\n"
                },
                {
                    "date": 1719839917447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n         std::string maxPalindrome = \"\";\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n-        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1))\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n+           std::string(1, s[i]) ++ \n+\n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, );\n \n         return maxPalindrome;\n"
                },
                {
                    "date": 1719839923123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-           std::string(1, s[i]) ++ \n+           std::string(1, s[i]) + r;\n \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, );\n \n"
                },
                {
                    "date": 1719839932406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-           std::string(1, s[i]) + r;\n+          maxPalindrome = std::max(maxPalindrome, std::string(1, s[i]) + r;\n \n            s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, );\n \n"
                },
                {
                    "date": 1719839943019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n         std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n         std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n        \n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n-          maxPalindrome = std::max(maxPalindrome, std::string(1, s[i]) + r;\n+           maxPalindrome = std::max(maxPalindrome, std::string(1, s[i]) + r);\n \n-           s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+        ifs[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n           maxPalindrome = std::max(maxPalindrome, );\n \n         return maxPalindrome;\n     }\n"
                },
                {
                    "date": 1719839957724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n            maxPalindrome = std::max(maxPalindrome, std::string(1, s[i]) + r);\n \n         if(s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n-          maxPalindrome = std::max(maxPalindrome, );\n+          maxPalindrome = std::max(maxPalindrome, l + );\n \n         return maxPalindrome;\n     }\n \n"
                },
                {
                    "date": 1719840241591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+#include <string>\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+     \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+    // Given a string s, return the longest palindromic substring in s\n+    bool isPalindrome(std::string s) \n+    {\n+        int f = 0;\n+        int l = s.size() - 1;\n+        bool isSame = true;\n+        while(f < l)\n+        {\n+            if(s[f] != s[l])\n+            {\n+              isSame = false;\n+              break;\n+            }\n+            f++;\n+            l--;\n+        }\n+        return isSame;\n+    }\n+    \n+    std::string longestSubstringPalindromeRec(std::string s, int i, int j)\n+    {\n+        if(i == j)\n+          return std::string(1, s[i]);\n+\n+        std::string maxPalindrome = \"\";\n+        std::string r = longestSubstringPalindromeRec(s, i + 1, j);\n+        std::string l = longestSubstringPalindromeRec(s, i, j - 1);\n+       \n+        std::cout << \"i: \" << s[i] << \", r: \" << r << std::endl;\n+\n+        if(s[i] == r[r.size() - 1] && isPalindrome(r.substr(0, r.size() - 1)))\n+           maxPalindrome = std::max(maxPalindrome, std::string(1, s[i]) + r);\n+        else \n+\n+        if(s[j] == l[0] && isPalindrome(l.substr(1, l.size())))\n+          maxPalindrome = std::max(maxPalindrome, l + std::string(1, s[j]));\n+\n+        return maxPalindrome;\n+    }\n+\n+    std::string longestSubstringPalindrome(std::string s) { return longestSubstringPalindromeRec(s, 0, s.size() - 1); }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719836771063,
            "name": "Commit-0",
            "content": "#include <string>\n#include <vector>\n#include <iostream>\n\nusing DP = std::vector<std::vector<int>>;\n\nnamespace algorithms::leetcode::dp\n{\n     \n    // https://leetcode.com/problems/longest-palindromic-substring\n    // Given a string s, return the longest palindromic substring in s\n    // Objective fuction: P(i, j) = n ?? (p[i1, j2], bool) - p-is the max palindrome in i,j, bool whether i-j is a palindrome , \n    // where i an j are the right and left boundaries, n - max palindrome within i, j\n    int longestPalindromeDp(std::string str)\n    {\n        int n = str.size();\n        DP dp(n + 1, std::vector<int>(n + 1, 0));\n \n        // .... ???\n\n        return dp[0][n];\n    }\n\n    int longestSubstringPalindrome(std::string s) { return longestPalindromeDp(s); }\n}"
        }
    ]
}