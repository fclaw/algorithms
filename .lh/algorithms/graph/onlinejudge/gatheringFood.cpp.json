{
    "sourceFile": "algorithms/graph/onlinejudge/gatheringFood.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1728282053370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728282059457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace algorithms::graph::onlinejudge::food\n {\n-    \n+    /** https://onlinejudge.org/external/114/11487.pdf */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282630206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n namespace algorithms::graph::onlinejudge::food\n {\n-    /** https://onlinejudge.org/external/114/11487.pdf */\n+    /** https://onlinejudge.org/external/114/11487.pdf, s: row, col, cur food, len; t: 4 dirs */\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282635268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \n \n namespace algorithms::graph::onlinejudge::food\n {\n-    /** https://onlinejudge.org/external/114/11487.pdf, s: row, col, cur food, len; t: 4 dirs */\n+    /** https://onlinejudge.org/external/114/11487.pdf, \n+     * s: row, col, cur food, len; t: 4 dirs */\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282644063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n-     * s: row, col, cur food, len; t: 4 dirs */\n+     * state: row, col, cur food, len; t: 4 dirs */\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282653154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n-     * state: row, col, cur food, len; t: 4 dirs */\n+     * state: row, col, current food, length; t: 4 dirs */\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282658552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n-     * state: row, col, current food, length; t: 4 dirs */\n+     * state: row, col, current food, length; transition: 4 dirs */\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282665114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,7 @@\n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs */\n+    \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282684917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs */\n-    \n+    void collectFood\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282690190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+\n+\n+namespace algorithms::graph::onlinejudge::food\n+{\n+    /** https://onlinejudge.org/external/114/11487.pdf, \n+     * state: row, col, current food, length; transition: 4 dirs */\n+    void collectFood()\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282706406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,7 @@\n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs */\n-    void collectFood()\n+    void collectAllFoods() {}\n \n-}\n-\n-\n-namespace algorithms::graph::onlinejudge::food\n-{\n-    /** https://onlinejudge.org/external/114/11487.pdf, \n-     * state: row, col, current food, length; transition: 4 dirs */\n-    void collectFood\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282713524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,6 +4,7 @@\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs */\n     void collectAllFoods() {}\n+    \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282847397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,28 @@\n \n namespace algorithms::graph::onlinejudge::food\n {\n     /** https://onlinejudge.org/external/114/11487.pdf, \n-     * state: row, col, current food, length; transition: 4 dirs */\n+     * state: row, col, current food, length; transition: 4 dirs \n+     * For this problem, we are interested in the 3-rd example and we will be focusing on ‘Yogi Bear’.\n+Yogi Bear is in the middle of some forest. The forest can be modeled as a square grid of size N × N.\n+Each cell of the grid consists of one of the following.\n+. an empty space\n+# an obstacle\n+[A-Z] an English alphabet\n+There will be at least 1 alphabet and all the letters in the grid will be distinct. If there are n letters,\n+then it will be from the first n alphabets. Suppose n = 3, that means there will be exactly 1 A, 1 B\n+and 1 C.\n+The letters actually represent foods lying on the ground. Yogi starts from position ‘A’ and sets off\n+with a basket in the hope of collecting all other foods. Yogi can move to a cell if it shares an edge with\n+the current one. For some superstitious reason, Yogi decides to collect all the foods in order. That is,\n+he first collects A, then B, then C and so on until he reaches the food with the highest alphabet value.\n+Another philosophy he follows is that if he lands on a particular food he must collect it.\n+Help Yogi to collect all the foods in minimum number of moves so that he can have a long sleep in\n+the winter. You are also required to find the total number of shortest paths he can take that meets the\n+above constraints\n+     * \n+     * */\n     void collectAllFoods() {}\n-    \n+       \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728282856856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs \n      * For this problem, we are interested in the 3-rd example and we will be focusing on ‘Yogi Bear’.\n      * Yogi Bear is in the middle of some forest. The forest can be modeled as a square grid of size N × N.\n-Each cell of the grid consists of one of the following.\n+     * Each cell of the grid consists of one of the following.\n . an empty space\n # an obstacle\n [A-Z] an English alphabet\n There will be at least 1 alphabet and all the letters in the grid will be distinct. If there are n letters,\n"
                },
                {
                    "date": 1728282864529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n     /** https://onlinejudge.org/external/114/11487.pdf, \n      * state: row, col, current food, length; transition: 4 dirs \n      * For this problem, we are interested in the 3-rd example and we will be focusing on ‘Yogi Bear’.\n      * Yogi Bear is in the middle of some forest. The forest can be modeled as a square grid of size N × N.\n-     * Each cell of the grid consists of one of the following: . an empty space\n+     * Each cell of the grid consists of one of the following: \n+     * . an empty space\n # an obstacle\n [A-Z] an English alphabet\n There will be at least 1 alphabet and all the letters in the grid will be distinct. If there are n letters,\n then it will be from the first n alphabets. Suppose n = 3, that means there will be exactly 1 A, 1 B\n"
                }
            ],
            "date": 1728282053370,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::onlinejudge::food\n{\n    \n}"
        }
    ]
}