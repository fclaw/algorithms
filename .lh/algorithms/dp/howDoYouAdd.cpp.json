{
    "sourceFile": "algorithms/dp/howDoYouAdd.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1720789245774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720789276042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,13 @@\n \n \n-/\n\\ No newline at end of file\n+/*\n+First, we have to determine the parameters of this problem to be selected to represent distinct states of this problem. There are only two parameters in this problem, n and K. Therefore, there are only 4 possible combinations:\n+1. If we do not choose any of them, we cannot represent a state. This option is ignored.\n+2. If we choose only n, then we do not know how many numbers ≤ n have been used.\n+3. If we choose only K, then we do not know the target sum n.\n+4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n+Next, we have to determine the base case(s). It turns out that this problem is very easy when K = 1. Whatever n is, there is only one way to add exactly one number less than or equal to n to get n: Use n itself. There is no other base case for this problem.\n+For the general case, we have this recursive formulation which is not too difficult to derive: At state (n,K) where K > 1, we can split n into one number X ∈ [0..n] and n−X,i.e. n=X+(n−X). Bydoingthis,wearriveatthesubproblem(n−X,K−1), i.e. given a number n−X, how many ways can K −1 numbers less than or equal to n−X add up to n − X? We can then sum all these ways.\n+These ideas can be written as the following Complete Search recurrence ways(n, K): 1. ways(n, 1) = 1\n+2. ways(n, K) = nX=0 ways(n - X, K - 1)\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720789283405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,6 @@\n 4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n Next, we have to determine the base case(s). It turns out that this problem is very easy when K = 1. Whatever n is, there is only one way to add exactly one number less than or equal to n to get n: Use n itself. There is no other base case for this problem.\n For the general case, we have this recursive formulation which is not too difficult to derive: At state (n,K) where K > 1, we can split n into one number X ∈ [0..n] and n−X,i.e. n=X+(n−X). Bydoingthis,wearriveatthesubproblem(n−X,K−1), i.e. given a number n−X, how many ways can K −1 numbers less than or equal to n−X add up to n − X? We can then sum all these ways.\n These ideas can be written as the following Complete Search recurrence ways(n, K): 1. ways(n, 1) = 1\n-2. ways(n, K) = nX=0 ways(n - X, K - 1)\n+2. ways(n, K) = S ways(n - X, K - 1)\n */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720789289765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,6 @@\n 4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n Next, we have to determine the base case(s). It turns out that this problem is very easy when K = 1. Whatever n is, there is only one way to add exactly one number less than or equal to n to get n: Use n itself. There is no other base case for this problem.\n For the general case, we have this recursive formulation which is not too difficult to derive: At state (n,K) where K > 1, we can split n into one number X ∈ [0..n] and n−X,i.e. n=X+(n−X). Bydoingthis,wearriveatthesubproblem(n−X,K−1), i.e. given a number n−X, how many ways can K −1 numbers less than or equal to n−X add up to n − X? We can then sum all these ways.\n These ideas can be written as the following Complete Search recurrence ways(n, K): 1. ways(n, 1) = 1\n-2. ways(n, K) = S ways(n - X, K - 1)\n+2. ways(n, K) = S(0, n) ways(n - X, K - 1)\n */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720789296987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \n \n /*\n-First, we have to determine the parameters of this problem to be selected to represent distinct states of this problem. There are only two parameters in this problem, n and K. Therefore, there are only 4 possible combinations:\n+  First, we have to determine the parameters of this problem to be selected to represent distinct states of this problem. There are only two parameters in this problem, n and K. Therefore, there are only 4 possible combinations:\n 1. If we do not choose any of them, we cannot represent a state. This option is ignored.\n 2. If we choose only n, then we do not know how many numbers ≤ n have been used.\n 3. If we choose only K, then we do not know the target sum n.\n 4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n"
                },
                {
                    "date": 1720789305480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \n \n /*\n   First, we have to determine the parameters of this problem to be selected to represent distinct states of this problem. \n-  There are only two parameters in this problem, n and K. Therefore, there are only 4 possible combinations:\n+  There are only two parameters in this problem, n and K. \n+  Therefore, there are only 4 possible combinations:\n 1. If we do not choose any of them, we cannot represent a state. This option is ignored.\n 2. If we choose only n, then we do not know how many numbers ≤ n have been used.\n 3. If we choose only K, then we do not know the target sum n.\n 4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n"
                },
                {
                    "date": 1720789319290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   There are only two parameters in this problem, n and K. \n   Therefore, there are only 4 possible combinations:\n   1. If we do not choose any of them, we cannot represent a state. This option is ignored.\n   2. If we choose only n, then we do not know how many numbers ≤ n have been used.\n-3. If we choose only K, then we do not know the target sum n.\n+  3. If we choose only K, then we do not know the target sum n.\n 4. Therefore, the state of this problem should be represented by a pair (or tuple) (n, K). The order of chosen parameter(s) does not matter, i.e. the pair (K, n) is also OK.\n Next, we have to determine the base case(s). It turns out that this problem is very easy when K = 1. Whatever n is, there is only one way to add exactly one number less than or equal to n to get n: Use n itself. There is no other base case for this problem.\n For the general case, we have this recursive formulation which is not too difficult to derive: At state (n,K) where K > 1, we can split n into one number X ∈ [0..n] and n−X,i.e. n=X+(n−X). Bydoingthis,wearriveatthesubproblem(n−X,K−1), i.e. given a number n−X, how many ways can K −1 numbers less than or equal to n−X add up to n − X? We can then sum all these ways.\n These ideas can be written as the following Complete Search recurrence ways(n, K): 1. ways(n, 1) = 1\n"
                }
            ],
            "date": 1720789245774,
            "name": "Commit-0",
            "content": "\n\n/"
        }
    ]
}