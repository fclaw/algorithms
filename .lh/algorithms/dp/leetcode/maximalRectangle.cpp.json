{
    "sourceFile": "algorithms/dp/leetcode/maximalRectangle.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1719429645900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719429654780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,6 @@\n namespace algorithms::leetcode::dp\n-{\n\\ No newline at end of file\n+{\n+    int maximalRectangle(vector<vector<char>>& matrix) {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719429666200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n namespace algorithms::leetcode::dp\n {\n-    int maximalRectangle(vector<vector<char>>& rect) {   \n-    }\n+    int maximalRectangle(vector<vector<char>>& rect) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719429733705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/maximal-rectangle\n-    \n+    // Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area\n     int maximalRectangle(std::vector<std::vector<char>> rect) { return 0; }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719429645900,
            "name": "Commit-0",
            "content": "namespace algorithms::leetcode::dp\n{"
        }
    ]
}