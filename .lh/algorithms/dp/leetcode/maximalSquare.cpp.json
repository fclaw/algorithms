{
    "sourceFile": "algorithms/dp/leetcode/maximalSquare.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1719384531114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719384543677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n         std::cout << std::endl;\n     }\n }\n \n-namespace leetcode::dp\n-namespace leetcode::dp\n+namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n"
                },
                {
                    "date": 1719384550877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,21 +19,6 @@\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     {\n-        int m = rect.size();\n-        int n = rect[0].size();\n-        std::vector<std::vector<int>> dp(m, std::vector<int>(n, 0));\n-\n-        dp[0][0] = rect[0][0] - '0';\n-\n-        for (size_t i = 1; i < n; i++)\n-          dp[0][i] = std::max(dp[0][i], dp[0][i - 1]);\n-\n-        for (size_t i = 1; i < m; i++)\n-          dp[i][0] = std::max(dp[i][0], dp[i - 1][0]);\n-\n-        printMaximalSquareDp(dp);\n- \n-        return dp[m - 1][n - 1];\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719384557225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,9 @@\n #include <vector>\n #include <iostream>\n #include <iomanip>\n \n-using DP = std::vector<std::vector<int>>;\n \n-void printMaximalSquareDp(DP dp)\n-{\n-    for ( const auto &row : dp )\n-    {\n-        for ( const auto &s : row ) \n-          std::cout << std::setw(5) << s << ' ';\n-        std::cout << std::endl;\n-    }\n-}\n-\n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area\n"
                },
                {
                    "date": 1719384567290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,11 @@\n #include <vector>\n-#include <iostream>\n-#include <iomanip>\n \n-\n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/maximal-square\n-    // Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area\n+    // Given an m x n binary matrix filled with 0's and 1's, \n+    // find the largest square containing only 1's and return its area\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719385310729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,11 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/maximal-square\n+    // Given an m x n binary matrix filled with 0's and 1's, \n+    // find the largest square containing only 1's and return its area\n+    int maximalSquare(std::vector<std::vector<char>>& rect)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719385315758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,7 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>>& rect)\n-    {\n+    int maximalSquare(std::vector<std::vector<char>>& rect) {\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/maximal-square\n-    // Given an m x n binary matrix filled with 0's and 1's, \n-    // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>>& rect) \n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719385321215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,6 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>>& rect) {\n-    }\n+    int maximalSquare(std::vector<std::vector<char>>& rect) { return 0;  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719385329155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,6 +4,6 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>>& rect) { return 0;  }\n+    int maximalSquare(std::vector<std::vector<char>>& rect) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719405947951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,6 +4,7 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>>& rect) { return 0; }\n+    int maximalSquare(std::vector<std::vector<char>>& rect) \n+    { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719405955039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,8 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n+    \n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406079292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,11 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/maximal-square\n+    // Given an m x n binary matrix filled with 0's and 1's, \n+    // find the largest square containing only 1's and return its area\n+    int maximalSquare( )\n+    int maximalSquare(std::vector<std::vector<char>>& rect) \n+    { return 0; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406085710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,8 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare( )\n+    int maximalSquare(std::vector<std::vector<char>> )\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     { return 0; }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/maximal-square\n-    // Given an m x n binary matrix filled with 0's and 1's, \n-    // find the largest square containing only 1's and return its area\n-    \n-    int maximalSquare(std::vector<std::vector<char>>& rect) \n-    { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406091057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,11 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/maximal-square\n+    // Given an m x n binary matrix filled with 0's and 1's, \n+    // find the largest square containing only 1's and return its area\n+    int maximalSquare(std::vector<std::vector<char>> rect, int  )\n+    int maximalSquare(std::vector<std::vector<char>>& rect) \n+    { return 0; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406098790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>> rect, int  )\n+    int maximalSquare(std::vector<std::vector<char>> rect, int x, int  )\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406104786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,19 +4,11 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>> rect, int x, int  )\n+    int maximalSquare(std::vector<std::vector<char>> rect, int x, int y)\n+    {\n+        return 0;\n+    }\n     int maximalSquare(std::vector<std::vector<char>>& rect) \n     { return 0; }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/maximal-square\n-    // Given an m x n binary matrix filled with 0's and 1's, \n-    // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>> )\n-    int maximalSquare(std::vector<std::vector<char>>& rect) \n-    { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406128648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,10 @@\n {\n     // https://leetcode.com/problems/maximal-square\n     // Given an m x n binary matrix filled with 0's and 1's, \n     // find the largest square containing only 1's and return its area\n-    int maximalSquare(std::vector<std::vector<char>> rect, int x, int y)\n+    int maximalSquareRec(std::vector<std::vector<char>> rect, int x, int y)\n     {\n         return 0;\n     }\n-    int maximalSquare(std::vector<std::vector<char>>& rect) \n-    { return 0; }\n+    int maximalSquare(std::vector<std::vector<char>>& rect) {  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406137955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,6 @@\n     int maximalSquareRec(std::vector<std::vector<char>> rect, int x, int y)\n     {\n         return 0;\n     }\n-    int maximalSquare(std::vector<std::vector<char>>& rect) { return maximalSquareRec() }\n+    int maximalSquare(std::vector<std::vector<char>>& rect) { return maximalSquareRec(rect) }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719406154919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/maximal-square\n+    // Given an m x n binary matrix filled with 0's and 1's, \n+    // find the largest square containing only 1's and return its area\n+    int maximalSquareRec(std::vector<std::vector<char>> rect, int x, int y)\n+    {\n+        return 0;\n+    }\n+    int maximalSquare(std::vector<std::vector<char>> rect) \n+    {\n+        int  \n+      return maximalSquareRec(rect) }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719384531114,
            "name": "Commit-0",
            "content": "#include <vector>\n#include <iostream>\n#include <iomanip>\n\nusing DP = std::vector<std::vector<int>>;\n\nvoid printMaximalSquareDp(DP dp)\n{\n    for ( const auto &row : dp )\n    {\n        for ( const auto &s : row ) \n          std::cout << std::setw(5) << s << ' ';\n        std::cout << std::endl;\n    }\n}\n\nnamespace leetcode::dp\nnamespace leetcode::dp\n{\n    // https://leetcode.com/problems/maximal-square\n    // Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area\n    int maximalSquare(std::vector<std::vector<char>>& rect) \n    {\n        int m = rect.size();\n        int n = rect[0].size();\n        std::vector<std::vector<int>> dp(m, std::vector<int>(n, 0));\n\n        dp[0][0] = rect[0][0] - '0';\n\n        for (size_t i = 1; i < n; i++)\n          dp[0][i] = std::max(dp[0][i], dp[0][i - 1]);\n\n        for (size_t i = 1; i < m; i++)\n          dp[i][0] = std::max(dp[i][0], dp[i - 1][0]);\n\n        printMaximalSquareDp(dp);\n \n        return dp[m - 1][n - 1];\n    }\n}"
        }
    ]
}