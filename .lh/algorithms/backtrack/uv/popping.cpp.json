{
    "sourceFile": "algorithms/backtrack/uv/popping.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1722966128687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722966137961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n namespace algorithms::backtrack::uv\n {\n-    // https://onlinejudge.org/external/104/10452.pdf\n+    // https://onlinejudge.org/external/12/1261.pdf\n     /**\n      * The first line of the input contains a single number indicating the number of test cases that follow.\n      * Each test case starts with a line containing two numbers m and n (2 ≤ m, n ≤ 8), the length m\n      * and the width n of the cobblestone path. Then follow m lines, each containing n characters (‘A’ to ‘Z’,\n"
                },
                {
                    "date": 1722966144060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,9 @@\n namespace algorithms::backtrack::uv\n {\n     // https://onlinejudge.org/external/12/1261.pdf\n     /**\n-     * The first line of the input contains a single number indicating the number of test cases that follow.\n-     * Each test case starts with a line containing two numbers m and n (2 ≤ m, n ≤ 8), the length m\n-     * and the width n of the cobblestone path. Then follow m lines, each containing n characters (‘A’ to ‘Z’,\n-     * ‘@’, ‘#’), the engravement of the respective cobblestone. Indy’s starting position is marked with the ‘@’\n-     * character in the last line, the destination with the character ‘#’ in the first line of the cobblestone path.\n-     * Each of the letters in ‘IEHOVA’ and the characters ‘@’ and ‘#’ appear exactly once in each test case.\n-     * There will always be exactly one path from Indy’s starting position via the stones with the letters\n-     * ‘IEHOVA’ engraved on (in that order) to the destination. There will be no other way to safely reach the destination.\n+     * \n      */\n       void submit_uv_10452()\n       {\n       }\n"
                },
                {
                    "date": 1722966158838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,21 @@\n namespace algorithms::backtrack::uv\n {\n     // https://onlinejudge.org/external/12/1261.pdf\n     /**\n-     * \n+     * We are given a string s of two characters ‘a’ and ‘b’. Let a group be a maximal consecutive substring\n+of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n+string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n+process until either the string becomes the empty string or there is no more group of length at least\n+two.\n+For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n+into the empty string by popping groups in the following sequence (the underlined group is to be popped\n+in the sequence):\n+babbbaaabb → baaaabb → bbb → empty string\n+But the group may not turn to an empty string by a different sequence of pop operations:\n+babbbaaabb → babbbaaa → baaaa → b\n+Given a string, write a program to decide whether the string can be turned into the empty string\n+by some sequence of popping operations.\n      */\n       void submit_uv_10452()\n       {\n       }\n"
                },
                {
                    "date": 1722966165957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n {\n     // https://onlinejudge.org/external/12/1261.pdf\n     /**\n      * We are given a string s of two characters ‘a’ and ‘b’. Let a group be a maximal consecutive substring\n-of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n-string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n+     * of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n+     * string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n process until either the string becomes the empty string or there is no more group of length at least\n two.\n For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n into the empty string by popping groups in the following sequence (the underlined group is to be popped\n"
                },
                {
                    "date": 1722966174807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,10 @@\n     /**\n      * We are given a string s of two characters ‘a’ and ‘b’. Let a group be a maximal consecutive substring\n      * of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n      * string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n-process until either the string becomes the empty string or there is no more group of length at least\n-two.\n-For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n+     * process until either the string becomes the empty string or there is no more group of length at least two.\n+     * For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n into the empty string by popping groups in the following sequence (the underlined group is to be popped\n in the sequence):\n babbbaaabb → baaaabb → bbb → empty string\n But the group may not turn to an empty string by a different sequence of pop operations:\n"
                },
                {
                    "date": 1722966180826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n      * of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n      * string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n      * process until either the string becomes the empty string or there is no more group of length at least two.\n      * For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n-into the empty string by popping groups in the following sequence (the underlined group is to be popped\n+     * into the empty string by popping groups in the following sequence (the underlined group is to be popped\n in the sequence):\n babbbaaabb → baaaabb → bbb → empty string\n But the group may not turn to an empty string by a different sequence of pop operations:\n babbbaaabb → babbbaaa → baaaa → b\n"
                },
                {
                    "date": 1722966189015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,10 @@\n      * of the same character. Any group g of s of length at least two can be removed (or popped) and a new\n      * string is constructed by concatenating the remaining left and right substrings of s. We repeat this\n      * process until either the string becomes the empty string or there is no more group of length at least two.\n      * For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n-     * into the empty string by popping groups in the following sequence (the underlined group is to be popped\n-in the sequence):\n-babbbaaabb → baaaabb → bbb → empty string\n+     * into the empty string by popping groups in the following sequence (the underlined group is to be popped in the sequence):\n+     * babbbaaabb → baaaabb → bbb → empty string\n But the group may not turn to an empty string by a different sequence of pop operations:\n babbbaaabb → babbbaaa → baaaa → b\n Given a string, write a program to decide whether the string can be turned into the empty string\n by some sequence of popping operations.\n"
                },
                {
                    "date": 1722966194841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n      * process until either the string becomes the empty string or there is no more group of length at least two.\n      * For example, string s = babbbaaabb has 5 groups b, a, bbb, aaa, and bb. The string s can be turned\n      * into the empty string by popping groups in the following sequence (the underlined group is to be popped in the sequence):\n      * babbbaaabb → baaaabb → bbb → empty string\n-But the group may not turn to an empty string by a different sequence of pop operations:\n-babbbaaabb → babbbaaa → baaaa → b\n+     * But the group may not turn to an empty string by a different sequence of pop operations:\n+     * babbbaaabb → babbbaaa → baaaa → b\n Given a string, write a program to decide whether the string can be turned into the empty string\n by some sequence of popping operations.\n      */\n       void submit_uv_10452()\n"
                },
                {
                    "date": 1722966201263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,9 @@\n      * into the empty string by popping groups in the following sequence (the underlined group is to be popped in the sequence):\n      * babbbaaabb → baaaabb → bbb → empty string\n      * But the group may not turn to an empty string by a different sequence of pop operations:\n      * babbbaaabb → babbbaaa → baaaa → b\n-     * Given a string, write a program to decide whether the string can be turned into the empty string\n-by some sequence of popping operations.\n+     * Given a string, write a program to decide whether the string can be turned into the empty string by some sequence of popping operations.\n      */\n       void submit_uv_10452()\n       {\n       }\n"
                },
                {
                    "date": 1722966214335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,8 @@\n      * babbbaaabb → babbbaaa → baaaa → b\n      * Given a string, write a program to decide whether the string can be turned into the empty string \n      * by some sequence of popping operations.\n      */\n-      void submit_uv_10452()\n+      void submit_uv_1261()\n       {\n       }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1722966128687,
            "name": "Commit-0",
            "content": "namespace algorithms::backtrack::uv\n{\n    // https://onlinejudge.org/external/104/10452.pdf\n    /**\n     * The first line of the input contains a single number indicating the number of test cases that follow.\n     * Each test case starts with a line containing two numbers m and n (2 ≤ m, n ≤ 8), the length m\n     * and the width n of the cobblestone path. Then follow m lines, each containing n characters (‘A’ to ‘Z’,\n     * ‘@’, ‘#’), the engravement of the respective cobblestone. Indy’s starting position is marked with the ‘@’\n     * character in the last line, the destination with the character ‘#’ in the first line of the cobblestone path.\n     * Each of the letters in ‘IEHOVA’ and the characters ‘@’ and ‘#’ appear exactly once in each test case.\n     * There will always be exactly one path from Indy’s starting position via the stones with the letters\n     * ‘IEHOVA’ engraved on (in that order) to the destination. There will be no other way to safely reach the destination.\n     */\n      void submit_uv_10452()\n      {\n      }\n}"
        }
    ]
}