#include <vector>
#include <vector>
#include <functional> // for std::function
#include <algorithm>
#include <set>
#include <unordered_map>
#include <set>
#include <stack>
#include <cassert>
#include <stdexcept>
#include <queue>
#include <tuple>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <numeric>
#include <stdexcept>
#include <cstring>
#include <bitset>
#include <unordered_map>
#include <map>
#include <unordered_set>
#include <queue>
#include <tuple>
#include <algorithm>
#include <cmath>
#include <limits>
#include <utility>
#include <functional>
#include <set>
#include <deque>


template<typename F>
inline void loop(size_t n, F&& f) {
  for(size_t i = 0; i < n; ++i)
    std::forward<F>(f)(i);
}

// Overloading the >> operator for std::pair<int, int>
std::istream& operator >> (std::istream& is, std::pair<int, int>& p) { return is >> p.first >> p.second; }

template<typename... Args>
bool while_read(Args&... args) { return (... && static_cast<bool>(std::cin >> args)); }


namespace algorithms::onlinejudge::graph::tools
{
    enum State { Unvisited, Explored, Visited };
    enum CutNode { Leaf, Root, Parent, Bridge };

    struct Edge
    {
        const int from;
        const int to;
        Edge(int a, int b) : from(std::min(a, b)), to(std::max(a, b)) {}
    };

    bool operator < (const Edge& lhs, const Edge& rhs) 
    { return lhs.from < rhs.from || (lhs.from == rhs.from && lhs.to < rhs.to); }
     bool operator == (const Edge& lhs, const Edge& rhs) 
     { return lhs.from == rhs.from && lhs.to == rhs.to; }

    std::ostream& operator << (std::ostream& os, const Edge& e) 
    { return os << "{" << e.from << ", " << e.to << "}"; }

    typedef std::vector<int> vi;
    typedef std::vector<bool> vb;
    typedef std::vector<vi> vvi;
    typedef std::vector<State> v_state;
    typedef std::set<CutNode> s_cut_node;
    typedef std::vector<s_cut_node> vs_cut_node;
    typedef std::set<Edge> s_cut_edge;

    int start_vertex = 0;

    struct Unit {};

    bool operator == (const Unit& lhs, const Unit& rhs) { return true; }
    std::ostream& operator << (std::ostream& os, const Unit& u) { return os << "{}"; }

    template <typename T = Unit>
    struct Node 
    {
        int node;
        T value;
        bool operator == (const Node<T>& other) const {
          return node == other.node && value == other.value;
        }
    };

    Node<> def_node = {0, {}};
 
    Node<> mkDefNode(int v) { return {v, {}}; }

    typedef std::vector<tools::Node<>> v_def_node;
    typedef std::vector<std::vector<tools::Node<>>> vv_def_node;

    template <typename T = Unit>
    using Graph = std::vector<std::vector<Node<T>>>;

    // Overload operator<< for Node<T>
    template <typename T>
    std::ostream& operator << (std::ostream& os, const Node<T>& n) 
    { return os << "{node: " << n.node << ", value: " << n.value << "}"; }

    template <typename T = Unit>
    struct Dfs
    {
        v_state state;
        vi entry_t;
        vi exit_t;
        vi parent;
        int time;
        int root_children;
        int& root = start_vertex;
        std::function<void(Node<T>&)> on_discover;
        std::function<void(Node<T>&)> on_leaving;
        // Tree edge: The edge traversed by DFS, i.e. an edge from a vertex currently with state:
        // EXPLORED to a vertex with state: UNVISITED
        std::function<bool(const Node<T>&, const Node<T>&)> process_tree_edge;
        // Back edge: Edge that is part of a cycle, i.e. an edge from a vertex currently with state:
        // EXPLORED to a vertex with state: EXPLORED too. This is an important application of
        // this algorithm. Note that we usually do not count bi-directional edges as having a
        // ‘cycle’ (We need to remember dfs_parent to distinguish this, see the code below).
        std::function<void(const Node<T>&, const Node<T>&)> process_back_edge;
        /* Forward/Cross edges from vertex with state: EXPLORED to vertex with state: VISITED (only for Directed Graphs)
           Edge classification in DFS (Directed Graphs):
            - Forward Edge:
                An edge from a node `u` to a descendant `v` in the DFS tree,
                but not the edge that first discovered `v`.
                Example: u → v, where `v` is in the subtree of `u`, but not directly.

            - Cross Edge:
                An edge from a node `u` to a previously visited node `v` that is
                neither an ancestor nor a descendant in the DFS tree.
                It connects different DFS branches or finished subtrees.
                Example: u → v, where DFS has already finished processing `v`.

            Note: These edge types do not apply to undirected graphs.
        */
        std::function<void(const Node<T>&, const Node<T>&)> process_forward_edge;
        std::function<void(const Node<T>&, const Node<T>&)> process_cross_edge;
        bool is_finished;

    };

    const int sentinel = -1;

    template <typename T = Unit>
    Dfs<T> init_dfs(int V) {
      Dfs<T> dfs_s;
      dfs_s.is_finished = false;
      dfs_s.state = tools::v_state(V, tools::Unvisited);
      dfs_s.time = 1;
      dfs_s.entry_t = tools::vi(V);
      dfs_s.exit_t = tools::vi(V);
      dfs_s.parent = tools::vi(V, sentinel);
      dfs_s.root_children = 0;
      return dfs_s;
    }

    template <typename T = Unit>
    void reset_dfs(int V, Dfs<T>& dfs_s) {
      dfs_s.is_finished = false;
      std::fill(dfs_s.state.begin(), dfs_s.state.end(), Unvisited);
      dfs_s.time = 1;
      dfs_s.entry_t = tools::vi(V);
      dfs_s.exit_t = tools::vi(V);
      dfs_s.parent = tools::vi(V, sentinel);
      dfs_s.root_children = 0;
    }


    template <typename T = Unit>
    void dfs(const std::vector<std::vector<Node<T>>>& adj_list, Dfs<T>& dfs_s, Node<T>& u)
    {

        if(dfs_s.is_finished) return;

        dfs_s.state[u.node] = Explored;
        dfs_s.entry_t[u.node] = dfs_s.time;
        dfs_s.time++;

        if(dfs_s.on_discover) dfs_s.on_discover(u);

        bool should_continue = true;
        for(Node<T> v : adj_list[u.node]) {
          if(dfs_s.state[v.node] == Unvisited) {
            if(dfs_s.process_tree_edge) 
              should_continue = dfs_s.process_tree_edge(u, v);
            
            if(!should_continue) continue; // ← Skip DFS if not allowed

            dfs_s.parent[v.node] = u.node;
            if (dfs_s.parent[u.node] == sentinel)  // u is root
              dfs_s.root_children++;
            dfs(adj_list, dfs_s, v);
          } else if(dfs_s.state[v.node] == Explored) {
            if(dfs_s.process_back_edge)
              dfs_s.process_back_edge(u, v);
          } else if(dfs_s.state[v.node] == Visited) {
            if(dfs_s.entry_t[v.node] > dfs_s.entry_t[u.node])
              if(dfs_s.process_forward_edge)
                dfs_s.process_forward_edge(u, v);
            if(dfs_s.entry_t[v.node] < dfs_s.entry_t[u.node])
              if(dfs_s.process_cross_edge)
                dfs_s.process_cross_edge(u, v);      
          }
        }

        dfs_s.state[u.node] = Visited;
        dfs_s.exit_t[u.node] = dfs_s.time;
        dfs_s.time++;

        if(dfs_s.on_leaving) dfs_s.on_leaving(u);
    }

    
    vi reachable_ancestor;
    vi tree_out_degree;
    vs_cut_node cut_nodes;
    s_cut_edge cut_edges;


    void init_cut_points(int V) {
      reachable_ancestor.clear();
      tree_out_degree.clear();
      cut_nodes.clear();
      cut_edges.clear();
      reachable_ancestor.resize(V);
      tree_out_degree.resize(V);
      cut_nodes.resize(V);
      for(auto& v : cut_nodes) v.insert(Leaf);
    }

    void init_ancestor(int v) { reachable_ancestor[v] = v; }
    void incr_tree_out_degree(int v) { tree_out_degree[v]++; }

    template <typename T = Unit>
    void set_ancestor(int u, int v, Dfs<T>& dfs) {
      if(dfs.entry_t[v] < dfs.entry_t[reachable_ancestor[u]] && dfs.parent[u] != v)
        // subtree of u hits one of ancestors v 
        reachable_ancestor[u] = v;
    }

    // ---- 3 possibilities -----

    // Root cut-nodes – If the root of the DFS tree has two or more children, it must
    // be an articulation vertex. No edges from the subtree of the second child can
    // possibly connect to the subtree of the first child.

    // Bridge cut-nodes – If the earliest reachable vertex from v is v, then deleting
    // the single edge (parent[v], v) disconnects the graph. Clearly parent[v] must
    // be an articulation vertex, since it cuts v from the graph. Vertex v is also an
    // articulation vertex unless it is a leaf of the DFS tree. For any leaf, nothing
    // falls off when you cut it.

    // Parent cut-nodes – If the earliest reachable vertex from v is the parent of v,
    // then deleting the parent must sever v from the tree unless the parent is the root.

    // The routine below systematically evaluates each of the three conditions as we
    // back up from the vertex after traversing all outgoing edges. We use entry time[v]
    // to represent the age of vertex v. The reachability time time v calculated below
    // denotes the oldest vertex that can be reached using back edges. Getting back to
    // an ancestor above v rules out the possibility of v being a cut-node:
    template <typename T = Unit> 
    void detect_cut_points(int v, Dfs<T>& dfs) {

        // Root cut-node case
        if(v == dfs.root) {
          if(dfs.root_children > 1)
            cut_nodes[v].insert(Root);
          return;
        }

        // Parent cut-node
        int p = dfs.parent[v];
        if (p != sentinel && 
            p != dfs.root && 
            reachable_ancestor[v] == p)
          cut_nodes[p].insert(Parent);

        // Bridge cut-node
        if(reachable_ancestor[v] == v) {
          if(dfs.parent[v] != dfs.root && 
             dfs.parent[v] != sentinel)
            cut_nodes[dfs.parent[v]].insert(Bridge);
          if(tree_out_degree[v] > 0) {
            cut_nodes[v].insert(Bridge);
          }
          
          // This line detects bridges  
          if(dfs.parent[v] != sentinel) cut_edges.insert({dfs.parent[v], v});
        }

        // Update reachable_ancestor of parent
        if (dfs.parent[v] != sentinel) {
          int time_v = dfs.entry_t[reachable_ancestor[v]];
          int time_parent = dfs.entry_t[reachable_ancestor[dfs.parent[v]]];
          if (time_v < time_parent) reachable_ancestor[dfs.parent[v]] = reachable_ancestor[v];
        }
    }

    struct Dir
    {
        int r_shift;
        int c_shift;
    };

    typedef std::vector<Dir> v_dir;
    typedef std::vector<char> vc;
    typedef std::vector<vc> vvc;

    // Default DAG directions: only right and down
    const v_dir dirs_4 = 
      { {-1, 0}, // up
        {1, 0},  // down
        {0, -1}, // left
        {0, 1}   // right
      };


    const v_dir dirs_8 = {
        {-1,  0}, // up
        { 1,  0}, // down
        { 0, -1}, // left
        { 0,  1}, // right
        {-1, -1}, // upper-left
        {-1,  1}, // upper-right
        { 1, -1}, // lower-left
        { 1,  1}  // lower-right
    };

    template <typename T, typename F = char>
    struct GridGraph {
      Graph<T> adj;
      std::unordered_map<int, T> vertex_value;
      std::function<T(F)> cell_to_value;
      std::function<bool(T)> is_blocked;
    };

    template <typename T, typename F = char>
    GridGraph<T, F> init_grid_graph() {
      Graph<T> graph;
      std::unordered_map<int, T> vertex_value;
      return GridGraph<T, F>{graph, vertex_value};
    }


    template <typename T, typename F = char>
    void grid_to_adj_list(
      GridGraph<T, F>& g,
      const std::vector<std::vector<F>>& grid,
      v_dir directions = dirs_4,
      bool bidirectional = false,
      bool scroll_x = false,
      bool scroll_y = false) {

        if(!g.cell_to_value && !g.is_blocked)
          throw std::runtime_error("grid_to_adj_list: cell_to_value not set!");

        int rows = grid.size();
        if (rows == 0) return;
        int cols = grid[0].size();

        g.adj.resize(rows * cols);

        auto wrap = 
          [&](int r, int c) -> std::pair<int, int> {
            if(scroll_y) r = (r + rows) % rows;
            if(scroll_x) c = (c + cols) % cols;
            return {r, c};
          };

        auto in_bounds = 
          [&](int r, int c) {
            return (!scroll_y ? (r >= 0 && r < rows) : true) &&
                   (!scroll_x ? (c >= 0 && c < cols) : true);
          };

        for(int r = 0; r < rows; ++r) {
          for(int c = 0; c < cols; ++c) {
            int u = r * cols + c;
            T val = g.cell_to_value(grid[r][c]);
            g.vertex_value[u] = val;
            if(g.is_blocked(val)) continue;
            for(const Dir& d : directions) {
              int nr = r + d.r_shift, nc = c + d.c_shift;
              if(!in_bounds(nr, nc)) continue;
              auto [wr, wc] = wrap(nr, nc);
               
              T w_val = g.cell_to_value(grid[wr][wc]);
              if(g.is_blocked(w_val)) continue;

              int v = wr * cols + wc;
              g.adj[u].push_back(Node<T>{v, w_val});
              if(bidirectional) {
                g.adj[v].push_back(Node<T>{u, val});
              }
            }
          }
        }
    }

    // strongly connected components
    // we are mostly concerned with back and cross edges
    // cross edges that point vertices
    // from previous strongly connected components of the graph cannot help us, because
    // there can be no way back from them to v, but otherwise cross edges are fair game.
    // Forward edges have no impact on reachability over the depth-first tree edges, and
    // hence can be disregarded
    template<typename T = Unit>
    struct SCC
    {
        //  Define low[v] to be the oldest vertex known to be in the same strongly connected
        // component as v. This vertex is not necessarily an ancestor, but may also
        // be a distant cousin of v because of cross edges
        vi low;
        vi components;
        int count;
        std::stack<int> active_comp;
        SCC(int V) : count(0) {
          low.resize(V);
          components.resize(V);
          for(int v = 0; v < V; ++v) {
            low[v] = v;
            components[v] = sentinel;
          }
        }
    };

    template<typename T = Unit>
    void handle_back_edge(
      Dfs<T>& dfs,
      SCC<T>& scc,
      const Node<T>& u, 
      const Node<T>& v) {
        if(dfs.entry_t[v.node] < 
           dfs.entry_t[scc.low[u.node]])
          scc.low[u.node] = v.node;
    }

    template<typename T = Unit>
    void handle_cross_edge(
      Dfs<T>& dfs,
      SCC<T>& scc,
      const Node<T>& u, 
      const Node<T>& v) {
        if(scc.components[v.node] == sentinel) {
          if(dfs.entry_t[v.node] < 
             dfs.entry_t[scc.low[u.node]])
            scc.low[u.node] = v.node;
        }
    }
    template<typename T = Unit>
    void handle_on_discover(SCC<T>& scc, Node<T>& u) 
    { scc.active_comp.push(u.node); }

    // A new strongly connected component is found whenever the lowest reachable
    // vertex from v is v. If so, we can clear the stack of this component. Otherwise, we
    // give our parent the benefit of the oldest ancestor we can reach and backtrack
    template<typename T = Unit>
    void handle_on_leaving(
      SCC<T>& scc, 
      Dfs<T>& dfs, 
      Node<T>& u) {
      
      assert(!scc.active_comp.empty() && "handle_on_leaving:stack is empty!!");  

      if(scc.low[u.node] == u.node && 
         !scc.active_comp.empty()) 
        pop_component(scc, u.node);
      if(dfs.parent[u.node] != sentinel) {  
        if(dfs.entry_t[scc.low[u.node]] < 
           dfs.entry_t[scc.low[dfs.parent[u.node]]])
          scc.low[dfs.parent[u.node]] = scc.low[u.node];   
      } 
    }

    int stack_top(std::stack<int>& stack) {
      int t = stack.top();
      stack.pop();
      return t;
    }

    template<typename T = Unit>
    void pop_component(SCC<T>& scc, int u) {
      int p; // vertex placeholder;
      scc.count++;
      scc.components[u] = scc.count;
      while((p = stack_top(scc.active_comp)) != u) scc.components[p] = scc.count;
    }
}



namespace tools = algorithms::onlinejudge::graph::tools;

namespace algorithms::onlinejudge::graph::tools::wg
{
    template <typename T = tools::Unit, typename W = int>
    struct WNode
    {
        int node;
        W weight;
        T value;
    };

    template <typename T, typename W>
    std::ostream& operator << 
    (std::ostream& out, const WNode<T, W>& node) 
    { return out << "{n: " << node.node << ", w: "  << node.weight << "}"; }

    template <typename T = tools::Unit, typename W = int>
    using WGraph = std::vector<std::vector<WNode<T, W>>>;

    template <typename T = tools::Unit, typename W = int>
    WNode<T, W> mkWNode(int n, W w, T v = tools::Unit{}) { return {n, w, v}; }

    template <typename T = tools::Unit, typename W = int>
    void pair(WGraph<T, W>& graph, int u, int v, W w, bool is_bi) {
      graph[u].push_back(wg::mkWNode(v, w));
      if(is_bi) graph[v].push_back(wg::mkWNode(u, w));
    }
}

namespace algorithms::onlinejudge::graph::tools
{

    typedef std::vector<int> vi;
    // Union-Find Disjoint Sets Library written in OOP manner, using both path compression and union by rank heuristics
    // courtesy of Competitive Programming 4
    class UnionFind {                                // OOP style
      private: 
        vi p, rank, setSize;                  // vi p is the key part
        int numSets;
        int V;
      public:
        UnionFind(int N) {
          p.assign(N, 0); 
          for (int i = 0; i < N; ++i) p[i] = i;
          rank.assign(N, 0);                           // optional speedup
          setSize.assign(N, 1);                        // optional feature
          numSets = N;                                 // optional feature
          V = N;
        }
        int findSet(int i) 
        { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }
        bool isSameSet(int i, int j) 
        { return findSet(i) == findSet(j); }
        void unionSet(int i, int j) {
          if(!isSameSet(i, j)) {
            int x = findSet(i);
            int y = findSet(j);                        // find both rep items
            if(rank[x] > rank[y]) 
              std::swap(x, y);                              // keep x 'shorter' than y
            p[x] = y;                                  // set x under y
            if(rank[x] == rank[y]) ++rank[y];          // optional speedup
            setSize[y] += setSize[x];                  // combine set sizes at y
            --numSets;                                 // a union reduces numSets
          }
        }
        int numDisjointSets() { return numSets; }
        int sizeOfSet(int i) { return setSize[findSet(i)]; }
        vi getMembers(int el) {
          int rep = this->findSet(el);
          tools::vi members;
          // To get all the members of the set of `e.from`, iterate over all nodes and find the ones in the same set
          for(int v = 0; v < V; ++v) {
            if(this->findSet(v) == rep)
              members.push_back(v);
          }
          return members;
        }
    };
}


/*
--------------------------------------------
 Prim's vs Kruskal's Algorithm (MST Summary)
--------------------------------------------

🔹 Purpose: 
  Both algorithms find a Minimum Spanning Tree (MST) of a weighted undirected graph.

🔹 Key Differences:

1. Strategy:
   - Prim's: Grows the MST one vertex at a time, always choosing the minimum-weight edge
             that connects a new vertex to the growing tree.
   - Kruskal's: Adds edges one by one in increasing order of weight, ensuring no cycles are formed.

2. Data Structure:
   - Prim's: Uses a priority queue (min-heap) to select the next lightest edge.
   - Kruskal's: Uses Disjoint Set Union (Union-Find) to track connected components and avoid cycles.

3. Edge vs Vertex Focus:
   - Prim's: Vertex-based; starts from any node and expands outward.
   - Kruskal's: Edge-based; sorts all edges up front and processes them globally.

4. Graph Requirements:
   - Prim's: Requires a connected graph to function properly.
   - Kruskal's: Can handle disconnected graphs (returns a forest of MSTs).

5. Time Complexity:
   - Prim's: O(E log V) with min-heap and adjacency list.
   - Kruskal's: O(E log E) due to edge sorting and DSU operations.

🔹 When to Use:
   - Prim’s is preferred for dense graphs (many edges).
   - Kruskal’s is better for sparse graphs (fewer edges).

*/


namespace wg = algorithms::onlinejudge::graph::tools::wg;
namespace tools = algorithms::onlinejudge::graph::tools;

namespace algorithms::onlinejudge::graph::tools::mst
{

   typedef std::pair<int, int> ii;
     tools::vb taken;
     template <typename T, typename W>
     using queue = std::priority_queue<wg::WNode<T, W>>;

     template <typename T = tools::Unit, typename W = int> 
     struct Prim
     {
         int V;
         W min_cost;
         bool is_finished;
         bool is_min;
         std::function<void(W&, W)> mappend;
         std::function<void(const wg::WNode<T, W>&)> on_adding_point;
     };

     template <typename T = tools::Unit, typename W = int>
     Prim<T, W> initPrim(int V) {
       auto def_mappend = [](W& acc, W val) { acc += val; }; // generic default
       auto def_on_adding_point = [](const wg::WNode<T, W>&) {};
        return {V, W{}, false, true, def_mappend, def_on_adding_point};
     }

     template <typename T, typename W> 
     void enqueue_neighs
       (const wg::WGraph<T, W>& graph, 
        wg::WNode<T, W> node,
        const Prim<T, W>& prim_s,
        queue<T, W>& pq) { // set u as taken and enqueue neighbors of u
        taken[node.node] = true;
        for(wg::WNode<T, W> neigh : graph[node.node]) {
          if(!taken[neigh.node]) {
            auto tmp = neigh;
            if(!prim_s.is_min) tmp.weight *= (-1);
            pq.emplace(tmp);  // sort by non-dec weight, then by inc id
          }
        }
     }

    template <typename T, typename W>    
    void prim
      (const wg::WGraph<T, W>& graph, 
       Prim<T, W>& prim_s, 
       wg::WNode<T, W>& node) {

      if(!prim_s.mappend && 
         !prim_s.on_adding_point) 
        throw std::runtime_error("prim: callbacks are not set!");

      queue<T, W> pq;   
      taken.assign(prim_s.V, false);
      enqueue_neighs(graph, node, prim_s, pq);
      int num_taken = 0;                            // no edge has been taken
      while(!pq.empty()) {                          // up to O(E)
        wg::WNode<T, W> next = pq.top(); pq.pop();
        if(!prim_s.is_min) next.weight *= (-1);
        if(taken[next.node]) continue;                     // already taken, skipped
        prim_s.mappend(prim_s.min_cost, next.weight);       // add w of this edge
        prim_s.on_adding_point(next);
        enqueue_neighs(graph, next, prim_s, pq);        // take+process vertex u
        ++num_taken;                                // 1 more edge is taken
        if(num_taken == prim_s.V - 1 || prim_s.is_finished) break; // optimization
      }
    }

    template <typename W = int>
    struct Edge 
    {
        int from;
        int to;
        W weight;
        Edge(int a, int b, int w) {
          from = std::min(a, b);
          to = std::max(a, b);
          weight = w;
        }
        bool operator == (const Edge& other) const {
          return from == other.from && to == other.to && weight == other.weight;
        }
    };

    template <typename W>
    std::ostream& operator << 
    (std::ostream& out, const Edge<W>& edge) 
    { return out << "{from: " << edge.from << ", to: "  << edge.to << ", w: " << edge.weight << "}"; }


    template <typename W = int>
    bool operator < (const Edge<W>& lhs, const Edge<W>& rhs) {
      return lhs.weight < rhs.weight || 
             (lhs.weight == rhs.weight && 
              (std::tie(lhs.from, lhs.to) <
               std::tie(rhs.from, rhs.to)));
    }

    template <typename W = int>
    using VEdge = std::vector<Edge<W>>;

    template<typename W = int>
    Edge<W> mkDefEdge(int from, int to, W weight) {
      return Edge<W>(from, to, weight);
    }

   enum EdgeAction {
        Skip,  // Skip the current edge and continue
        GoOn,   // Proceed with the current edge
        Terminate
    };

    template <typename W = int> 
    struct Kruskal
    {
         int E;
         int V;
         W min_cost;
         tools::UnionFind uf;
         bool is_finished;
         std::function<void(W&, W)> mappend;
         std::function<void(int i, const Edge<W>&)> on_adding_edge;
         std::function<bool(const Edge<W>&, const Edge<W>& b)> cmp;
         std::function<EdgeAction(const Edge<W>&)> check_edge;
    };

    template <typename W = int>
    Kruskal<W> initKruskal(int V, int E, W def) {
      auto def_mappend = [](int& acc, int x) { acc += x; };
      auto def_on_adding_edge = [](int _, const Edge<W>& __) {};
      auto def_cmp = 
        [](const Edge<W>& a, const Edge<W>& b) 
        { return a.weight < b.weight; }; // Min-heap
      auto def_check = [](const Edge<W>& _) -> EdgeAction { return GoOn; };
      return {E, V, def, tools::UnionFind(V), false, def_mappend, def_on_adding_edge, def_cmp, def_check};
    }
 
    template <typename W = int>
    void kruskal(VEdge<W>& edges, Kruskal<W>& kruskal_s) {

      if(!kruskal_s.mappend && 
         !kruskal_s.on_adding_edge && 
         !kruskal_s.cmp) 
        throw std::runtime_error("kruskal: callbacks are not set!");

      std::sort(edges.begin(), edges.end(), kruskal_s.cmp);
      int num_taken = 0;                             // no edge has been taken
      tools::UnionFind& uf = kruskal_s.uf;
      for(int i = 0; i < kruskal_s.E; ++i) {         // up to O(E)
        Edge<W> e = edges[i];  
        if(uf.isSameSet(e.from, e.to)) continue;     // already in the same CC

        // decision-making block
        EdgeAction action = kruskal_s.check_edge(e);
        if(action == Skip) continue;
        else if(action == Terminate) break;
        else if(action == GoOn) {
          kruskal_s.mappend(kruskal_s.min_cost, e.weight); // add w of this edge
          uf.unionSet(e.from, e.to);                   // link them
          ++num_taken;                                 // 1 more edge is taken
          kruskal_s.on_adding_edge(i, e);
          if(num_taken == kruskal_s.V - 1 || 
          kruskal_s.is_finished) break;      // optimization
        }
      }
    }

}

namespace algorithms::onlinejudge::graph::tools
{

    struct TopSortKahn
    {
        tools::vi top_sort;
        bool is_cycle;   
    };

    // ---------- Kahn's algorithm for topological sort ----------
    // Step 1: Calculate the In-Degree of Each Node
    // In-degree represents the number of incoming edges to a node, i.e., its dependencies.
    // Initialize an array `in_degree[]` of size V (number of nodes) to zero.
    // Traverse the graph and for each edge u -> v, increment the in-degree of v by 1.

    // Step 2: Initialize the Queue
    // Create an empty queue to store nodes with an in-degree of 0 (i.e., nodes with no dependencies).
    // Traverse the in-degree array and enqueue all nodes with in-degree 0.

    // Step 3: Process the Nodes in the Queue (BFS-like)
    // While the queue is not empty:
    //   1. Remove a node `u` from the front of the queue.
    //   2. Add `u` to the topological order result list.
    //   3. For each adjacent node `v` of `u` (i.e., for each outgoing edge u -> v):
    //      - Decrease the in-degree of `v` by 1 (because we've processed one of its dependencies).
    //      - If the in-degree of `v` becomes 0, enqueue `v` (since it now has no dependencies and can be processed next).

    // Step 4: Cycle Detection
    // After processing all nodes, check if the number of nodes in the topological order matches the total number of nodes in the graph.
    // If the number of nodes in the result is less than the total number of nodes, a cycle exists in the graph.
    // In this case, a topological sort is not possible.

    // Step 5: Output the Topological Sort
    // If no cycle was detected and all nodes were processed, output the topological order.
    // If a cycle was detected (i.e., some nodes were not processed), report that topological sorting is not possible.
    template <typename T = tools::Unit>
    TopSortKahn top_sort_kahn(int V, const tools::Graph<T>& graph)
    {
        tools::vi in_degree(V, 0);
        for(int v = 0; v < V; ++v)
          for(const tools::Node<T>& u : graph[v])
            in_degree[u.node]++;
             
        std::priority_queue<int, std::vector<int>, std::greater<int>> no_degree;
        for(int v = 0; v < V; ++v)
          if(!in_degree[v])
            no_degree.push(v);
            
        tools::vi tops_sort;
        while(!no_degree.empty()) {
          int u = no_degree.top();
          no_degree.pop();
          tops_sort.push_back(u);

          for(const tools::Node<T>& v : graph[u]) {
            in_degree[v.node]--;
            if(!in_degree[v.node])
              no_degree.push(v.node);
          }
        }
        return {tops_sort, (int)tops_sort.size() == V};
    }

   enum BfsCheck { IsFinished, GoOn, Skip };

    // bfs traversal
    template <typename T = tools::Unit>
    struct Bfs 
    {
        tools::Node<T> source;
        tools::vi parent;
        tools::vi dist;
        Bfs(int V, const tools::Node<T>& source) {
          this->source = source;
          parent.assign(V, tools::sentinel);
          dist.assign(V, tools::sentinel);
          dist[source.node] = 0;
        }
        vi restore_path(const tools::Node<T>& sink) {
          vi path;
          int u = sink.node;
          while(u != this->source.node) {
            path.push_back(u);
            u = parent[u];
          }
          std::reverse(path.begin(), path.end());
          return path;
        }
        int getDistance(const tools::Node<T>& dest) {
          return dist[dest.node];
        }
        std::function<BfsCheck(const tools::Node<T>&)> check;
    };


    template <typename T = tools::Unit>
    void bfs(const tools::Graph<T>& graph, Bfs<T>& bfs_s) {

      if(graph.empty()) throw std::runtime_error("bfs: graph empty!");

      if(!bfs_s.check) throw std::runtime_error("bfs: callbacks are not set!");

      std::queue<tools::Node<T>> queue; 
      queue.push(bfs_s.source);
      bool is_finished = false;
      while(!queue.empty() && !is_finished) {
        tools::Node<T> u = queue.front(); queue.pop();
        BfsCheck check = bfs_s.check(u);
        if(check == IsFinished) break;
        if(check == Skip) continue;
        for(const tools::Node<T>& v : graph[u.node]) {
          if(~bfs_s.dist[v.node]) continue;
          queue.push(v);
          bfs_s.dist[v.node] = bfs_s.dist[u.node] + 1;
          bfs_s.parent[v.node] = u.node;
        }
      }
    }
}



namespace wg = algorithms::onlinejudge::graph::tools::wg;


// Custom comparator for the priority queue
template<typename T, typename W>
struct Compare {
    bool operator () (
      const std::pair<int, wg::WNode<T, W>>& a, 
      const std::pair<int, wg::WNode<T, W>>& b) const {
      // First compare by the 'int' value (node index)
      return a.first > b.first || (a.first == b.first && a.second.node < b.second.node); 
    }
};


template<typename W>
inline constexpr W inf = std::numeric_limits<W>::max();


// Custom comparator for the priority queue
template<typename T, typename W>
struct DijkstraCmp {
    bool operator () (
      const std::pair<int, wg::WNode<T, W>>& a, 
      const std::pair<int, wg::WNode<T, W>>& b) const {
      // First compare by the 'int' value (node index)
      return a.first > b.first || (a.first == b.first && a.second.node < b.second.node); 
    }
};

namespace algorithms::onlinejudge::graph::tools::dijkstra
{

    template<typename T, typename W>
    using piwn = std::pair<int, wg::WNode<T, W>>;
    typedef std::vector<int> vi;
    typedef std::pair<int, int> pii;
    template<typename T, typename W>
    using PQ = std::priority_queue<std::pair<int, wg::WNode<T, W>>, std::vector<std::pair<int, wg::WNode<T, W>>>, DijkstraCmp<T, W>>;

 template<typename T = tools::Unit, typename W = int>
    struct Dijkstra
    {
        std::vector<W> dist;
        PQ<T, W> queue;
        std::function<W(W, W)> mappend;
        std::function<void(int, int)> on_relaxation;
        std::function<void(int, int)> on_tied_path;
        Dijkstra(int V, const wg::WNode<T, W>& source) {
          dist.assign(V, inf<W>);
          dist[source.node] = 0;
          queue.emplace(0, source);
        }
    };
    
    // priority queue
    template<typename T, typename W>
    void dijkstra(
      const wg::WGraph<T, W>& graph, 
      Dijkstra<T, W>& dijkstra_s) {

      if(!dijkstra_s.mappend) 
        throw std::runtime_error("dijkstra: mappend are not set!");

      auto& queue = dijkstra_s.queue;
      while(!queue.empty()) {
        piwn<T, W> p = queue.top(); queue.pop();
        int d = p.first;
        wg::WNode<T, W> node = p.second;
        int u = node.node;
        if(d > dijkstra_s.dist[u]) continue; // lazy deletion
        for(const wg::WNode<T, W>& neigh : graph[u]) {
          int v = neigh.node;
          W w = neigh.weight;
          W nw = dijkstra_s.mappend(dijkstra_s.dist[u], w);
          if(dijkstra_s.dist[v] > nw) {
            dijkstra_s.dist[v] = nw;
            if(dijkstra_s.on_relaxation)
              dijkstra_s.on_relaxation(u, v);
            queue.emplace(nw, neigh);
          }
          else if(dijkstra_s.dist[v] == nw) {
            if(dijkstra_s.on_tied_path)
              dijkstra_s.on_tied_path(u, v);
          }   
        }
      }
    }
}

/*
 * ───────────────────────────────────────────────────────────────
 * 🧳 UVa 10187 From Dusk till Dawn, rt: s
 * ───────────────────────────────────────────────────────────────
*/



namespace tools = algorithms::onlinejudge::graph::tools;

typedef std::pair<int, int> pii;

struct Route
{
    std::string city; // name of the city
    int departure; // departure time
    int time; // travel time
}; 

struct State
{
    std::string city; // name of the city
    int arrival_tm;
    int blood_consumed; // blood consumed to reach this state
    int travel_tm;
    bool operator < (const State& other) const {
      // We want the priority queue to pop the state with the lowest blood_consumed
      return 
        blood_consumed > other.blood_consumed || 
        (blood_consumed == other.blood_consumed && 
         travel_tm > other.travel_tm); // Min-heap based on blood_consumed and travel time
    }
};


constexpr int MAX_TIME = 25;
constexpr int HOUR_24 = 24;


namespace algorithms::onlinejudge::graph::from_dusk_till_dawn
{
    /** https://onlinejudge.org/external/101/10187.pdf */
    int t_cases, R, c = 1;
    void submit(std::optional<char*> file, bool debug_mode)
    {
        if (file.has_value())
          // Attempt to reopen stdin with the provided file
          if (std::freopen(file.value(), "r", stdin) == nullptr) {
            // If freopen fails, throw an exception with a more detailed error message
            std::string name = file.value();
            std::string errorMessage = 
              "Failed to open file: " + name +
              " with error: " + std::strerror(errno);
            throw std::ios_base::failure(errorMessage);
          }
        
        std::cin >> t_cases;
        while(t_cases--) {
          std::cin >> R;
          std::unordered_map<std::string, std::vector<Route>> routes;
          std::unordered_map<std::string, int> city_index;
          int index = 0;
          for(int i = 0; i < R; ++i) {
            std::string from, dest;
            int departure, time;
            while_read(from, dest, departure, time);

            if(routes.find(from) == routes.end()) {
              routes[from] = std::vector<Route>();
              routes[from].push_back({dest, departure, time});
            } else routes[from].push_back({dest, departure, time});

            // Add cities to the index
            // This will ensure that each city has a unique index
            // and we can use it to represent the graph
            // in a more compact way
            // This is useful for the priority queue and distance array
            if(!city_index.count(from))
              city_index[from] = index++;
            if(!city_index.count(dest))
              city_index[dest] = index++;
          }

          int V = index; // Number of unique cities
          int min_blood = inf<int>;
          std::string start_city, dest_city;
          while_read(start_city, dest_city);

          if(start_city == dest_city) {
            printf("Test Case %d.\nVladimir needs 0 litre(s) of blood.\n", c++);
            continue;
          }

          bool can_start = false;
          std::priority_queue<State> queue;
          std::vector<std::vector<pii>> blood(V, std::vector<pii>(MAX_TIME, {inf<int>, inf<int>}));
          for(auto& p : routes) {
            if(p.first == start_city) {  
              int idx = city_index.at(start_city);
              for(auto& r : p.second) {
                if(r.departure > 6 && r.departure < 18) continue;
                if(!can_start) can_start = true;
                blood[idx][r.departure] = {0, 0};
                // Starting point, no blood consumed
                queue.emplace(start_city, r.departure, 0, 0);
              }
            }
          }


          while(can_start && !queue.empty()) {
            State state = queue.top(); queue.pop();
            std::string curr_city = state.city;
            int arrival_tm = state.arrival_tm;
            int blood_consumed = state.blood_consumed;
            int travel_tm = state.travel_tm;
    
            // If we reached the destination with enough blood
            if(curr_city == dest_city) {
              min_blood = blood_consumed; break;
            }

            // Explore all routes from the current city
            for(const Route& route : routes[state.city]) {
              if((route.departure > 6 &&
                  route.departure < 18) || 
                  route.time > 12)
                continue;
              int next_idx = city_index.at(route.city);
              int diff = (route.departure - arrival_tm + HOUR_24) % HOUR_24;
              int new_arrival_tm = (route.departure + route.time) % HOUR_24;

              if(new_arrival_tm > 6 && new_arrival_tm < 18) continue;

              int daylight_minutes = 0;
              for (int i = 0; i < diff; ++i) {
                int t = (arrival_tm + i) % 24;
                if (t >= 7 && t < 18) ++daylight_minutes;
              }

              int new_blood_consumed = blood_consumed + (int)(daylight_minutes > 0);
              int new_travel_tm = travel_tm + diff + route.time;
              pii new_blood = {new_blood_consumed, new_travel_tm};
              if(new_blood < blood[next_idx][new_arrival_tm]) {
                blood[next_idx][new_arrival_tm] = new_blood;
                queue.push({route.city, new_arrival_tm, new_blood_consumed, new_travel_tm});
              }
            }
          }
          printf("Test Case %d.\n", c++);
          min_blood == inf<int> ? printf("There is no route Vladimir can take.\n") : printf("Vladimir needs %d litre(s) of blood.\n", min_blood);
        }
    }
}



namespace from_dusk_till_dawn = algorithms::onlinejudge::graph::from_dusk_till_dawn;

int main() { 
        std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    
    from_dusk_till_dawn::submit(); 
}

