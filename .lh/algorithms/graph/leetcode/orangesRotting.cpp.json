{
    "sourceFile": "algorithms/graph/leetcode/orangesRotting.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1722614450967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722614465241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     * Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n     * Return the minimum number of minutes that must elapse until no cell has a fresh orange. \n     * If this is impossible, return -1\n    */\n-    int orangesRotting(mx grid)\n+    int timeTo(mx grid)\n     {\n         return 0;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722614478063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     * Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n     * Return the minimum number of minutes that must elapse until no cell has a fresh orange. \n     * If this is impossible, return -1\n    */\n-    int timeTo(mx grid)\n+    int timeToSpoil(mx grid)\n     {\n         return 0;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722614487315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     * Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n     * Return the minimum number of minutes that must elapse until no cell has a fresh orange. \n     * If this is impossible, return -1\n    */\n-    int timeToSpoil(mx grid)\n+    int timeToSpoilAllOranges(mx grid)\n     {\n         return 0;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723046088391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,6 @@\n    */\n     int timeToSpoilAllOranges(mx grid)\n     {\n         return 0;\n-    }    \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723049904883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #include <vector>\n \n+\n+\n using mx = std::vector<std::vector<int>>;\n \n namespace algorithms::graph::leetcode\n {\n"
                },
                {
                    "date": 1723049912861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <vector>\n \n+enum Or\n \n-\n using mx = std::vector<std::vector<int>>;\n \n namespace algorithms::graph::leetcode\n {\n"
                },
                {
                    "date": 1723049923303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n \n-enum Or\n+enum OrangeRipe\n \n using mx = std::vector<std::vector<int>>;\n \n namespace algorithms::graph::leetcode\n"
                },
                {
                    "date": 1723049936268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n \n-enum OrangeRipenness\n+enum OrangeRipeness\n \n using mx = std::vector<std::vector<int>>;\n \n namespace algorithms::graph::leetcode\n"
                },
                {
                    "date": 1723049947909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n #include <vector>\n \n-enum OrangeRipeness = { }\n-\n using mx = std::vector<std::vector<int>>;\n \n namespace algorithms::graph::leetcode\n {\n"
                }
            ],
            "date": 1722614450967,
            "name": "Commit-0",
            "content": "#include <vector>\n\nusing mx = std::vector<std::vector<int>>;\n\nnamespace algorithms::graph::leetcode\n{\n    // https://leetcode.com/problems/rotting-oranges/\n   /** \n    * You are given an m x n grid where each cell can have one of three values:\n    * 0 representing an empty cell,\n    * 1 representing a fresh orange, or\n    * 2 representing a rotten orange.\n    * Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\n    * Return the minimum number of minutes that must elapse until no cell has a fresh orange. \n    * If this is impossible, return -1\n   */\n    int orangesRotting(mx grid)\n    {\n        return 0;\n    }    \n}"
        }
    ]
}