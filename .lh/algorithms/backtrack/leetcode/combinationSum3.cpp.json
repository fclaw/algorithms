{
    "sourceFile": "algorithms/backtrack/leetcode/combinationSum3.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1721760762700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721760771832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,8 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    \n+    vector<vector<int>> combinationSum3(int k, int n) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721760776913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,8 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    vector<vector<int>> combinationSum3(int k, int n) {\n+    std::vector<std::vector<int>> combinationSum3(int k, int n) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721760788245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n-    std::vector<std::vector<int>> combinationSum3(int k, int n) {\n-        \n+    std::vector<std::vector<int>> combinationSum3(int k, int n) \n+    {\n+        return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721760796557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n using vvs = std::vector<std::vector<int>>;\n \n namespace algorithms::backtrack::leetcode\n {\n+    // https://leetcode.com/problems/combination-sum-iii\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n     }\n"
                },
                {
                    "date": 1721760806157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/combination-sum-iii\n+    \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n     }\n"
                },
                {
                    "date": 1721760811624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/combination-sum-iii\n-    \n+    /*\n+      Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n+    */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n     }\n"
                },
                {
                    "date": 1721760819291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n {\n     // https://leetcode.com/problems/combination-sum-iii\n     /*\n       Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n+      Only numbers 1 through 9 are used\n+      \n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n"
                },
                {
                    "date": 1721760825896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     // https://leetcode.com/problems/combination-sum-iii\n     /*\n       Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n       Only numbers 1 through 9 are used\n-      \n+      Each number is used at most once\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n"
                },
                {
                    "date": 1721760840548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     /*\n       Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n       Only numbers 1 through 9 are used\n       Each number is used at most once\n+      Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n"
                },
                {
                    "date": 1721760846637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,11 @@\n     /*\n       Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n       Only numbers 1 through 9 are used\n       Each number is used at most once\n-      Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n+      Return a list of all possible valid combinations. \n+      The list must not contain the same combination twice, \n+      and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         return {};    \n"
                },
                {
                    "date": 1721761161785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,7 +14,8 @@\n       and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n+        \n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761167736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,8 @@\n       and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n-        \n+        std::vector<>\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761173223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,8 @@\n       and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n-        std::vector<>\n+        std::vector<int>\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761179053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,8 @@\n       and the combinations may be returned in any order.\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n-        std::vector<int>\n+        std::vector<int> nums(9);\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761188564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,8 @@\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n+        for\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761197413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n-        for\n+        for(int i = )\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761202880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n-        for(int i = )\n+        for(int i = 1; i <= 9)\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761221156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     */\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n-        for(int i = 1; i <= 9)\n+        for(int i = 1; i <= 9; i++)\n+          \n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761232282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n         for(int i = 1; i <= 9; i++)\n+          nums[i - 1] = 1;\n           \n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761238798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,16 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n+    \n+\n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n-          \n+\n+\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761248391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    \n+    void backtrack()\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n"
                },
                {
                    "date": 1721761255617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack()\n+    void backtrack(std::vector<>)\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n"
                },
                {
                    "date": 1721761263544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack(std::vector<>)\n+    void backtrack(std::vector<int> nums, int )\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n"
                },
                {
                    "date": 1721761269202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack(std::vector<int> nums, int )\n+    void backtrack(std::vector<int> nums, int k, int )\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n"
                },
                {
                    "date": 1721761279528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+using vvs = std::vector<std::vector<int>>;\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/combination-sum-iii\n+    /*\n+      Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n+      Only numbers 1 through 9 are used\n+      Each number is used at most once\n+      Return a list of all possible valid combinations. \n+      The list must not contain the same combination twice, \n+      and the combinations may be returned in any order.\n+    */\n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans)\n+    \n+\n+    std::vector<std::vector<int>> combinationSum3(int k, int n) \n+    {\n+        std::vector<int> nums(9);\n+        for(int i = 1; i <= 9; i++)\n+          nums[i - 1] = 1;\n+\n+\n+        return {};    \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761286342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,44 +12,17 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack(std::vector<int> nums, int k, int target, vvs& ans)\n-    \n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans) {}\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n \n-\n+        \n+        \n         return {};    \n     }\n-}\n-#include <vector>\n-\n-using vvs = std::vector<std::vector<int>>;\n-\n-namespace algorithms::backtrack::leetcode\n-{\n-    // https://leetcode.com/problems/combination-sum-iii\n-    /*\n-      Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n-      Only numbers 1 through 9 are used\n-      Each number is used at most once\n-      Return a list of all possible valid combinations. \n-      The list must not contain the same combination twice, \n-      and the combinations may be returned in any order.\n-    */\n-    void backtrack(std::vector<int> nums, int k, int )\n-\n-    std::vector<std::vector<int>> combinationSum3(int k, int n) \n-    {\n-        std::vector<int> nums(9);\n-        for(int i = 1; i <= 9; i++)\n-          nums[i - 1] = 1;\n-\n-\n-        return {};    \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761296921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n         std::vector<int> nums(9);\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n \n+        vvs ans = {};\n         \n-        \n+\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761304277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n \n         vvs ans = {};\n-        \n+        backtrack(nums, )\n \n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761312527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n \n         vvs ans = {};\n-        backtrack(nums, )\n-\n+        backtrack(nums, k, n, ans)\n         return {};    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721761317938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,7 @@\n           nums[i - 1] = 1;\n \n         vvs ans = {};\n         backtrack(nums, k, n, ans)\n-        return {};    \n+        return ans; \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721762392118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,17 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack(std::vector<int> nums, int k, int target, vvs& ans) {}\n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans, ) {}\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n         for(int i = 1; i <= 9; i++)\n           nums[i - 1] = 1;\n \n         vvs ans = {};\n-        backtrack(nums, k, n, ans)\n+        backtrack(nums, k, n, ans);\n         return ans; \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721762397743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+using vvs = std::vector<std::vector<int>>;\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/combination-sum-iii\n+    /*\n+      Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n+      Only numbers 1 through 9 are used\n+      Each number is used at most once\n+      Return a list of all possible valid combinations. \n+      The list must not contain the same combination twice, \n+      and the combinations may be returned in any order.\n+    */\n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans, std::vector) {}\n+\n+    std::vector<std::vector<int>> combinationSum3(int k, int n) \n+    {\n+        std::vector<int> nums(9);\n+        for(int i = 1; i <= 9; i++)\n+          nums[i - 1] = 1;\n+\n+        vvs ans = {};\n+        backtrack(nums, k, n, ans);\n+        return ans; \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721762403347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Return a list of all possible valid combinations. \n       The list must not contain the same combination twice, \n       and the combinations may be returned in any order.\n     */\n-    void backtrack(std::vector<int> nums, int k, int target, vvs& ans, std::vector<int>) {}\n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans, std::vector<int>& tmp) {}\n \n     std::vector<std::vector<int>> combinationSum3(int k, int n) \n     {\n         std::vector<int> nums(9);\n"
                },
                {
                    "date": 1721762417962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <vector>\n+\n+using vvs = std::vector<std::vector<int>>;\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/combination-sum-iii\n+    /*\n+      Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n+      Only numbers 1 through 9 are used\n+      Each number is used at most once\n+      Return a list of all possible valid combinations. \n+      The list must not contain the same combination twice, \n+      and the combinations may be returned in any order.\n+    */\n+    void backtrack(std::vector<int> nums, int k, int target, vvs& ans, std::vector<int>& tmp) \n+    {\n+        if()\n+    }\n+\n+    std::vector<std::vector<int>> combinationSum3(int k, int n) \n+    {\n+        std::vector<int> nums(9);\n+        for(int i = 1; i <= 9; i++)\n+          nums[i - 1] = 1;\n+\n+        vvs ans = {};\n+        backtrack(nums, k, n, ans);\n+        return ans; \n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1721760762700,
            "name": "Commit-0",
            "content": "#include <vector>\n\nusing vvs = std::vector<std::vector<int>>;\n\nnamespace algorithms::backtrack::leetcode\n{\n    \n}"
        }
    ]
}