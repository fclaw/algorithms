{
    "sourceFile": "algorithms/dp/leetcode/longestCommonSubsequence.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1719163750947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719163757139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-namespace \n\\ No newline at end of file\n+namespace dp\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163809610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,4 @@\n-namespace dp\n\\ No newline at end of file\n+namespace algorithms::leetcode::dp\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163824860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n namespace algorithms::leetcode::dp\n {\n-    \n+    int longestCommonSubsequence(string text1, string text2) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163833011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n namespace algorithms::leetcode::dp\n {\n-    int longestCommonSubsequence(string text1, string text2) {\n-        \n+    int longestCommonSubsequence(std::string text1, string text2) \n+    {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163841982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+\n+\n namespace algorithms::leetcode::dp\n {\n-    int longestCommonSubsequence(std::string text1, string text2) \n+    int longestCommonSubsequence(std::string text1, std::string text2) \n     {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163848166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include \n \n-\n namespace algorithms::leetcode::dp\n {\n     int longestCommonSubsequence(std::string text1, std::string text2) \n     {   \n"
                },
                {
                    "date": 1719163856877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+#include <string>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    int longestCommonSubsequence(std::string text1, std::string text2) \n+    {   \n+        return \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163868828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,11 @@\n #include <string>\n \n namespace algorithms::leetcode::dp\n {\n+    /*\n+    */\n     int longestCommonSubsequence(std::string text1, std::string text2) \n     {   \n-        return \n+        return 0;\n     }\n-}\n-#include \n-\n-namespace algorithms::leetcode::dp\n-{\n-    int longestCommonSubsequence(std::string text1, std::string text2) \n-    {   \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719163876241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,14 @@\n \n namespace algorithms::leetcode::dp\n {\n     /*\n+    Given two strings text1 and text2, return the length of their longest common subsequence. \n+    If there is no common subsequence, return 0.\n+A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n+\n+For example, \"ace\" is a subsequence of \"abcde\".\n+A common subsequence of two strings is a subsequence that is common to both strings.\n     */\n     int longestCommonSubsequence(std::string text1, std::string text2) \n     {   \n         return 0;\n"
                },
                {
                    "date": 1719163884072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n {\n     /*\n     Given two strings text1 and text2, return the length of their longest common subsequence. \n     If there is no common subsequence, return 0.\n-    A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n+    A subsequence of a string is a new string generated \n+    from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n \n For example, \"ace\" is a subsequence of \"abcde\".\n A common subsequence of two strings is a subsequence that is common to both strings.\n     */\n"
                },
                {
                    "date": 1719163890916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n     If there is no common subsequence, return 0.\n     A subsequence of a string is a new string generated \n     from the original string with some characters (can be none) deleted \n     without changing the relative order of the remaining characters.\n-\n For example, \"ace\" is a subsequence of \"abcde\".\n A common subsequence of two strings is a subsequence that is common to both strings.\n     */\n     int longestCommonSubsequence(std::string text1, std::string text2) \n"
                }
            ],
            "date": 1719163750947,
            "name": "Commit-0",
            "content": "namespace "
        }
    ]
}