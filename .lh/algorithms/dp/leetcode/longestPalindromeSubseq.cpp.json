{
    "sourceFile": "algorithms/dp/leetcode/longestPalindromeSubseq.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1719835202566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719835217170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n #include <string>\n #include <vector>\n #include <iostream>\n \n-using DP = std::vector<std::vector<int>>;\n-\n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/longest-palindromic-subsequence\n     // Given a string s, find the longest palindromic subsequence's length in s.\n"
                },
                {
                    "date": 1719835344221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n #include <string>\n-#include <vector>\n-#include <iostream>\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/longest-palindromic-subsequence\n     // Given a string s, find the longest palindromic subsequence's length in s.\n     // subsequence is a sequence that can be derived from another sequence \n     // by deleting some or no elements without changing the order of the remaining elements.\n-    int longestPalindromeSubseq(std::string s) {}\n+    int longestPalindromeSubseq(std::string s) \n+    {\n+        return 1;\n+    }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719835202566,
            "name": "Commit-0",
            "content": "#include <string>\n#include <vector>\n#include <iostream>\n\nusing DP = std::vector<std::vector<int>>;\n\nnamespace algorithms::leetcode::dp\n{\n    // https://leetcode.com/problems/longest-palindromic-subsequence\n    // Given a string s, find the longest palindromic subsequence's length in s.\n    // subsequence is a sequence that can be derived from another sequence \n    // by deleting some or no elements without changing the order of the remaining elements.\n    int longestPalindromeSubseq(std::string s) {}\n}"
        }
    ]
}