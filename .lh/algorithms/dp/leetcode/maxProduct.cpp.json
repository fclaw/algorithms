{
    "sourceFile": "algorithms/dp/leetcode/maxProduct.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1719317990522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719318005041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+#include <vector>\n+\n namespace algorithms::leetcode::dp\n {\n-    \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719318014322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-\n+    int maxProduct(vector<int>& nums) {\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719318019772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    int maxProduct(vector<int>& nums) {\n+    int maxProduct(vector<int>& nums) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719318024884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    int maxProduct(std::vector<int>& nums) { return 0; }\n+    int maxProduct(std::<int>& nums) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719318043006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    // Given an integer array nums, find a \n-subarray\n+    // Given an integer array nums, find a subarray\n  that has the largest product, and return the product.\n \n The test cases are generated so that the answer will fit in a 32-bit integer.\n     int maxProduct(std::vector<int>& nums) { return 0; }\n"
                }
            ],
            "date": 1719317990522,
            "name": "Commit-0",
            "content": "namespace algorithms::leetcode::dp\n{\n    \n}"
        }
    ]
}