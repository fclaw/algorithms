{
    "sourceFile": "algorithms/minPathSum.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1717669785169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717669797142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n-https://leetcode.com/problems/minimum-path-sum/\n\\ No newline at end of file\n+// https://leetcode.com/problems/minimum-path-sum\n+int minPathSum(vector<vector<int>>& grid) {\n"
                },
                {
                    "date": 1717669805263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n // https://leetcode.com/problems/minimum-path-sum\n-int minPathSum(vector<vector<int>>& grid) {\n+int minPathSum(vector<vector<int>>& grid) { return 0; }\n"
                },
                {
                    "date": 1717669811621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,4 @@\n+\n+\n // https://leetcode.com/problems/minimum-path-sum\n int minPathSum(vector<vector<int>>& grid) { return 0; }\n"
                },
                {
                    "date": 1717669821523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n+#include <vector>\n \n-\n // https://leetcode.com/problems/minimum-path-sum\n int minPathSum(vector<vector<int>>& grid) { return 0; }\n"
                },
                {
                    "date": 1717669829688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n #include <vector>\n \n // https://leetcode.com/problems/minimum-path-sum\n-int minPathSum(vector<vector<int>>& grid) { return 0; }\n+int minPathSum(std::vector<std::vector<int>>& grid) { return 0; }\n"
                },
                {
                    "date": 1717670316290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+#include <vector>\n+\n+// https://leetcode.com/problems/minimum-path-sum\n+int minPathSum(std::vector<std::vector<int>>& grid) { return 0; }\n+\n+\n+int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid)\n+{\n+     int n = obstacleGrid.size(); // y\n+     int m = obstacleGrid[0].size(); // x\n+     vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n+\n+    if(obstacleGrid[0][0] == 1)\n+      return 0;\n+\n+    // base case 0, 0\n+    dp[0][0] = 1;\n+\n+    // y is zero\n+    int xObstacle = -1;\n+    for (size_t i = 0; i < m; i++)\n+    {\n+      if(obstacleGrid[0][i] == 1)\n+        xObstacle = i;\n+      dp[0][i] = xObstacle != -1 ? 0 : 1;\n+    }\n+\n+    // x is zero\n+    int yObstacle = -1;\n+    for (size_t j = 0; j < n; j++)\n+    {\n+       if(obstacleGrid[j][0] == 1)\n+         yObstacle = j;\n+      dp[j][0] = yObstacle != -1 ? 0 : 1;\n+    }\n+\n+    for (size_t i = 1; i < n; i++)\n+      for (size_t j = 1; j < m; j++)\n+      {  \n+        if(obstacleGrid[i][j] == 1)\n+          dp[i][j] = 0;\n+        else\n+        {\n+            int fromAbove = obstacleGrid[i - 1][j] == 1 ? 0 : dp[i - 1][j];\n+            int fromLeft = obstacleGrid[i][j - 1] == 1 ? 0 : dp[i][j - 1];\n+            dp[i][j] = fromAbove + fromLeft;\n+        }\n+      }\n+    return dp[n - 1][m - 1];\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717670328059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n // https://leetcode.com/problems/minimum-path-sum\n int minPathSum(std::vector<std::vector<int>>& grid) { return 0; }\n \n \n-int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid)\n+int minPathSum(std::vector<std::vector<int>>& grid)\n {\n      int n = obstacleGrid.size(); // y\n      int m = obstacleGrid[0].size(); // x\n      vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n@@ -46,9 +46,5 @@\n             dp[i][j] = fromAbove + fromLeft;\n         }\n       }\n     return dp[n - 1][m - 1];\n-}\n-#include <vector>\n-\n-// https://leetcode.com/problems/minimum-path-sum\n-int minPathSum(std::vector<std::vector<int>>& grid) { return 0; }\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717670337740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n \n int minPathSum(std::vector<std::vector<int>>& grid)\n {\n-     int n = obstacleGrid.size(); // y\n+     int n = grid.size(); // y\n      int m = obstacleGrid[0].size(); // x\n      vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n \n     if(obstacleGrid[0][0] == 1)\n"
                },
                {
                    "date": 1717670346173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,11 @@\n \n int minPathSum(std::vector<std::vector<int>>& grid)\n {\n      int n = grid.size(); // y\n-     int m = obstacleGrid[0].size(); // x\n+     int m = grid[0].size(); // x\n      vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n \n-    if(obstacleGrid[0][0] == 1)\n-      return 0;\n \n     // base case 0, 0\n     dp[0][0] = 1;\n \n"
                },
                {
                    "date": 1717670359483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,10 @@\n      int n = grid.size(); // y\n      int m = grid[0].size(); // x\n      vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n \n-\n     // base case 0, 0\n-    dp[0][0] = 1;\n+    dp[0][0] = grid[0][0];\n \n     // y is zero\n     int xObstacle = -1;\n     for (size_t i = 0; i < m; i++)\n"
                },
                {
                    "date": 1717670366135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n int minPathSum(std::vector<std::vector<int>>& grid)\n {\n      int n = grid.size(); // y\n      int m = grid[0].size(); // x\n-     vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n+     std::vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n \n     // base case 0, 0\n     dp[0][0] = grid[0][0];\n \n"
                },
                {
                    "date": 1717670373187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n int minPathSum(std::vector<std::vector<int>>& grid)\n {\n      int n = grid.size(); // y\n      int m = grid[0].size(); // x\n-     std::vector<vector<int>> dp = vector<vector<int>>(n, vector<int>(m, 0));\n+     std::vector<std::vector<int>> dp = std::vector<vector<int>>(n, vector<int>(m, 0));\n \n     // base case 0, 0\n     dp[0][0] = grid[0][0];\n \n"
                },
                {
                    "date": 1717670384829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n     // base case 0, 0\n     dp[0][0] = grid[0][0];\n \n     // y is zero\n-    int xObstacle = -1;\n     for (size_t i = 0; i < m; i++)\n     {\n       if(obstacleGrid[0][i] == 1)\n         xObstacle = i;\n"
                },
                {
                    "date": 1717670389956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,16 @@\n int minPathSum(std::vector<std::vector<int>>& grid)\n {\n      int n = grid.size(); // y\n      int m = grid[0].size(); // x\n-     std::vector<std::vector<int>> dp = std::vector<vector<int>>(n, vector<int>(m, 0));\n+     std::vector<std::vector<int>> dp = std::vector<std::vector<int>>(n, std::vector<int>(m, 0));\n \n     // base case 0, 0\n     dp[0][0] = grid[0][0];\n \n     // y is zero\n     for (size_t i = 0; i < m; i++)\n-    {\n-      if(obstacleGrid[0][i] == 1)\n-        xObstacle = i;\n       dp[0][i] = xObstacle != -1 ? 0 : 1;\n-    }\n \n     // x is zero\n     int yObstacle = -1;\n     for (size_t j = 0; j < n; j++)\n"
                },
                {
                    "date": 1717670397154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,9 @@\n     for (size_t i = 0; i < m; i++)\n       dp[0][i] = xObstacle != -1 ? 0 : 1;\n \n     // x is zero\n-    int yObstacle = -1;\n     for (size_t j = 0; j < n; j++)\n-    {\n-       if(obstacleGrid[j][0] == 1)\n-         yObstacle = j;\n       dp[j][0] = yObstacle != -1 ? 0 : 1;\n     }\n \n     for (size_t i = 1; i < n; i++)\n"
                },
                {
                    "date": 1717670415092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,17 +19,11 @@\n \n     // x is zero\n     for (size_t j = 0; j < n; j++)\n       dp[j][0] = yObstacle != -1 ? 0 : 1;\n-    }\n \n     for (size_t i = 1; i < n; i++)\n       for (size_t j = 1; j < m; j++)\n-      {  \n-        if(obstacleGrid[i][j] == 1)\n-          dp[i][j] = 0;\n-        else\n-        {\n             int fromAbove = obstacleGrid[i - 1][j] == 1 ? 0 : dp[i - 1][j];\n             int fromLeft = obstacleGrid[i][j - 1] == 1 ? 0 : dp[i][j - 1];\n             dp[i][j] = fromAbove + fromLeft;\n         }\n"
                },
                {
                    "date": 1717670430305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     dp[0][0] = grid[0][0];\n \n     // y is zero\n     for (size_t i = 0; i < m; i++)\n-      dp[0][i] = xObstacle != -1 ? 0 : 1;\n+      dp[0][i] = ;\n \n     // x is zero\n     for (size_t j = 0; j < n; j++)\n       dp[j][0] = yObstacle != -1 ? 0 : 1;\n"
                },
                {
                    "date": 1717670436704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     dp[0][0] = grid[0][0];\n \n     // y is zero\n     for (size_t i = 0; i < m; i++)\n-      dp[0][i] = grid[];\n+      dp[0][i] = grid[0][];\n \n     // x is zero\n     for (size_t j = 0; j < n; j++)\n       dp[j][0] = yObstacle != -1 ? 0 : 1;\n"
                },
                {
                    "date": 1717670442959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+#include <vector>\n+\n+// https://leetcode.com/problems/minimum-path-sum\n+int minPathSum(std::vector<std::vector<int>>& grid) { return 0; }\n+\n+\n+int minPathSum(std::vector<std::vector<int>>& grid)\n+{\n+     int n = grid.size(); // y\n+     int m = grid[0].size(); // x\n+     std::vector<std::vector<int>> dp = std::vector<std::vector<int>>(n, std::vector<int>(m, 0));\n+\n+    // base case 0, 0\n+    dp[0][0] = grid[0][0];\n+\n+    // y is zero\n+    for (size_t i = 0; i < m; i++)\n+      dp[0][i] = grid[0][i];\n+\n+    // x is zero\n+    for (size_t j = 0; j < n; j++)\n+      dp[j][0] = ;\n+\n+    for (size_t i = 1; i < n; i++)\n+      for (size_t j = 1; j < m; j++)\n+            int fromAbove = obstacleGrid[i - 1][j] == 1 ? 0 : dp[i - 1][j];\n+            int fromLeft = obstacleGrid[i][j - 1] == 1 ? 0 : dp[i][j - 1];\n+            dp[i][j] = fromAbove + fromLeft;\n+        }\n+      }\n+    return dp[n - 1][m - 1];\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717669785169,
            "name": "Commit-0",
            "content": "https://leetcode.com/problems/minimum-path-sum/"
        }
    ]
}