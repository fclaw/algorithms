{
    "sourceFile": "algorithms/graph/onlinejudge/projectScheduling.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1727444816046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727444829446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::onlinejudge::sa\n\\ No newline at end of file\n+namespace algorithms::graph::onlinejudge::project_scheduelling\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727444878913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::onlinejudge::project_scheduelling\n\\ No newline at end of file\n+namespace algorithms::graph::onlinejudge::project_scheduling;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727444885121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n \n \n-namespace algorithms::graph::onlinejudge::project_scheduling;\n\\ No newline at end of file\n+namespace algorithms::graph::onlinejudge::project_scheduling\n+{\n+    /**   */\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727444923637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n-    /**   */\n+    /** https://onlinejudge.org/external/4/452.pdf  */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445283266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n-    /** https://onlinejudge.org/external/4/452.pdf  */\n+    /** https://onlinejudge.org/external/4/452.pdf */\n+    timeRequired()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445289041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,9 @@\n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n     /** https://onlinejudge.org/external/4/452.pdf */\n-    timeRequired()\n+    int timeRequired()\n+    {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445316183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n+#include \"../lp_dag.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired()\n     {\n-        \n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445326132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n+\n+namespace lp = algorithms::graph::lp_dag;\n+\n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired()\n     {\n \n"
                },
                {
                    "date": 1727445342073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired()\n+    int timeRequired(const lp::adj& graph, const std::vector<int>& sinks)\n     {\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445349225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(const lp::adj& graph, const std::vector<int>& sinks)\n+    int timeRequired(const lp::adj& graph)\n     {\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445419601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(const lp::adj& graph)\n+    int timeRequired(int  const lp::adj& graph)\n     {\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445424644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(int  const lp::adj& graph)\n+    int timeRequired(int start, const lp::adj& graph)\n     {\n-\n+        return \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445430734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,9 @@\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired(int start, const lp::adj& graph)\n     {\n-        return \n+        return 1;\n     }\n+\n+    void \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445454881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n+#include <vector>\n+#include <optional>\n+#include <iostream>\n+#include <cassert>\n+#include <cstdio>\n #include \"../lp_dag.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n"
                },
                {
                    "date": 1727445468011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,9 @@\n         return 1;\n     }\n \n     void \n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value())\n+          assert(freopen(file.value(), \"r\", stdin) != NULL);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445474223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n     {\n         return 1;\n     }\n \n-    void \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value())\n           assert(freopen(file.value(), \"r\", stdin) != NULL);\n"
                },
                {
                    "date": 1727445496389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,6 +19,6 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value())\n-          assert(freopen(file.value(), \"r\", stdin) != NULL);\n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445521415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,6 @@\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value())\n           assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+        int   \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445527345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+#include <optional>\n+#include <iostream>\n+#include <cassert>\n+#include <cstdio>\n+#include \"../lp_dag.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::project_scheduling\n+{\n+\n+namespace lp = algorithms::graph::lp_dag;\n+\n+    /** https://onlinejudge.org/external/4/452.pdf */\n+    int timeRequired(int start, const lp::adj& graph)\n+    {\n+        return 1;\n+    }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value())\n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+        int tests;\n+          \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445546708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,31 +21,10 @@\n     {\n         if(file.has_value())\n           assert(freopen(file.value(), \"r\", stdin) != nullptr);\n         int tests;\n-          \n-}\n-#include <vector>\n-#include <optional>\n-#include <iostream>\n-#include <cassert>\n-#include <cstdio>\n-#include \"../lp_dag.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::project_scheduling\n-{\n-\n-namespace lp = algorithms::graph::lp_dag;\n-\n-    /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(int start, const lp::adj& graph)\n-    {\n-        return 1;\n-    }\n-\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value())\n-          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n-        int   \n+        std::cin >> test;\n+        while(--tests >= 0)\n+        {\n+            \n+        }  \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445568267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n         if(file.has_value())\n           assert(freopen(file.value(), \"r\", stdin) != nullptr);\n         int tests;\n         std::cin >> test;\n+        std::cin >> std::end\n         while(--tests >= 0)\n         {\n-            \n+\n         }  \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445580278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         if(file.has_value())\n           assert(freopen(file.value(), \"r\", stdin) != nullptr);\n         int tests;\n         std::cin >> test;\n-        std::cin >> std::end\n+        std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n \n         }  \n"
                },
                {
                    "date": 1727445586279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n         std::cin >> test;\n         std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n-\n+            \n         }  \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445598422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n         std::cin >> test;\n         std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n-            \n+            char \n         }  \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445629352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n #include <optional>\n #include <iostream>\n #include <cassert>\n #include <cstdio>\n+\n #include \"../lp_dag.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n"
                },
                {
                    "date": 1727445638652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include <optional>\n #include <iostream>\n #include <cassert>\n #include <cstdio>\n-\n+#include <unordered_map>\n #include \"../lp_dag.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::project_scheduling\n@@ -26,7 +26,8 @@\n         std::cin >> test;\n         std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n+            \n             char \n         }  \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445646264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n \n+\n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired(int start, const lp::adj& graph)\n@@ -26,8 +27,9 @@\n         std::cin >> test;\n         std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n-            \n+\n             char \n-        }  \n+        }\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445652434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n \n-\n+typedef \n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired(int start, const lp::adj& graph)\n"
                },
                {
                    "date": 1727445658599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n namespace algorithms::graph::onlinejudge::project_scheduling\n {\n \n-typedef \n+typedef std::un\n namespace lp = algorithms::graph::lp_dag;\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired(int start, const lp::adj& graph)\n"
                },
                {
                    "date": 1727445668080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+#include <vector>\n+#include <optional>\n+#include <iostream>\n+#include <cassert>\n+#include <cstdio>\n+#include <unordered_map>\n+#include \"../lp_dag.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::project_scheduling\n+{\n+\n+typedef std::unordered_map<char, int>\n+namespace lp = algorithms::graph::lp_dag;\n+\n+    /** https://onlinejudge.org/external/4/452.pdf */\n+    int timeRequired(int start, const lp::adj& graph)\n+    {\n+        return 1;\n+    }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value())\n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+        int tests;\n+        std::cin >> test;\n+        std::cin >> std::endl;\n+        while(--tests >= 0)\n+        {\n+\n+            char \n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445673923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+#include <vector>\n+#include <optional>\n+#include <iostream>\n+#include <cassert>\n+#include <cstdio>\n+#include <unordered_map>\n+#include \"../lp_dag.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::project_scheduling\n+{\n+\n+typedef std::unordered_map<char, int> in;\n+namespace lp = algorithms::graph::lp_dag;\n+\n+    /** https://onlinejudge.org/external/4/452.pdf */\n+    int timeRequired(int start, const lp::adj& graph)\n+    {\n+        return 1;\n+    }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value())\n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+        int tests;\n+        std::cin >> test;\n+        std::cin >> std::endl;\n+        while(--tests >= 0)\n+        {\n+\n+            char \n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445684082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,78 +28,8 @@\n         std::cin >> std::endl;\n         while(--tests >= 0)\n         {\n \n-            char \n+            char from\n         }\n     }\n-}\n-#include <vector>\n-#include <optional>\n-#include <iostream>\n-#include <cassert>\n-#include <cstdio>\n-#include <unordered_map>\n-#include \"../lp_dag.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::project_scheduling\n-{\n-\n-typedef std::unordered_map<char, int>\n-namespace lp = algorithms::graph::lp_dag;\n-\n-    /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(int start, const lp::adj& graph)\n-    {\n-        return 1;\n-    }\n-\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value())\n-          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n-        int tests;\n-        std::cin >> test;\n-        std::cin >> std::endl;\n-        while(--tests >= 0)\n-        {\n-\n-            char \n-        }\n-    }\n-}\n-#include <vector>\n-#include <optional>\n-#include <iostream>\n-#include <cassert>\n-#include <cstdio>\n-#include <unordered_map>\n-#include \"../lp_dag.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::project_scheduling\n-{\n-\n-typedef std::un\n-namespace lp = algorithms::graph::lp_dag;\n-\n-    /** https://onlinejudge.org/external/4/452.pdf */\n-    int timeRequired(int start, const lp::adj& graph)\n-    {\n-        return 1;\n-    }\n-\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value())\n-          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n-        int tests;\n-        std::cin >> test;\n-        std::cin >> std::endl;\n-        while(--tests >= 0)\n-        {\n-\n-            char \n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445691704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,7 +29,8 @@\n         while(--tests >= 0)\n         {\n \n             char from\n+            to;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445699540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,8 @@\n         while(--tests >= 0)\n         {\n \n             char from\n-            to;\n+            stdto;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445707522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,8 @@\n         while(--tests >= 0)\n         {\n \n             char from\n-            stdto;\n+            std::optional to;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445713816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n         while(--tests >= 0)\n         {\n \n             char from\n-            std::optional to;\n+            std::optional<char> to;\n+            \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445725491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,8 @@\n \n             char from\n             std::optional<char> to;\n             int days;\n+            std::cin >> from \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727445794082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n \n namespace lp = algorithms::graph::lp_dag;\n \n-    int \n+    int taskT\n \n     /** https://onlinejudge.org/external/4/452.pdf */\n     int timeRequired(int start, const lp::adj& graph)\n     {\n"
                }
            ],
            "date": 1727444816046,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::onlinejudge::sa"
        }
    ]
}