{
    "sourceFile": "algorithms/backtrack/onlinejudge/cd.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 177,
            "patches": [
                {
                    "date": 1727155874456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727155918227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include <cstdio>\n #include <numeric>\n #include <iostream>\n \n-namespace algorithms::backtrack::online\n+namespace algorithms::backtrack::onlinejudge::cd\n {\n     // https://onlinejudge.org/external/6/624.pdf\n     /**\n      * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n@@ -40,9 +40,9 @@\n         dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n         dfs(cd, pos + 1, c, m);  \n     }\n  \n-    void submit_uv_624()\n+    void submit()\n     {\n         int capacity, s, v;\n         while(std::cin >> capacity)\n         {\n"
                },
                {
                    "date": 1727155957236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n         if(c > songs)\n         {\n             songs = c;\n-            mask = m; \n+            mask = m;\n         }\n \n         if(pos >= SIZE)\n           return;\n"
                },
                {
                    "date": 1727155978190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int songs;\n+    int mask;\n+    void dfs(const std::vector<int>& cd, int pos, int c, int m)\n+    {\n+        if(c > CAPACITY)\n+          return;\n+\n+        if(c > songs)\n+        {\n+            songs = c;\n+            mask = m;\n+        }\n+\n+        if(pos >= SIZE)\n+          return;\n+\n+        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n+        dfs(cd, pos + 1, c, m);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+            {\n+                std::cin >> v;\n+                cd.push_back(v);\n+            }\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            dfs(cd, 0, 0, 0);\n+            \n+            for(auto c : cd)\n+              if(mask & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", songs);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727155992559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         if(c > songs)\n         {\n             songs = c;\n             mask = m;\n+            return;\n         }\n \n         if(pos >= SIZE)\n           return;\n@@ -62,71 +63,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", songs);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int songs;\n-    int mask;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int m)\n-    {\n-        if(c > CAPACITY)\n-          return;\n-\n-        if(c > songs)\n-        {\n-            songs = c;\n-            mask = m;\n-        }\n-\n-        if(pos >= SIZE)\n-          return;\n-\n-        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n-        dfs(cd, pos + 1, c, m);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-            {\n-                std::cin >> v;\n-                cd.push_back(v);\n-            }\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            dfs(cd, 0, 0, 0);\n-            \n-            for(auto c : cd)\n-              if(mask & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", songs);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156049037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n         if(c > songs)\n         {\n             songs = c;\n             mask = m;\n-            return;\n         }\n \n         if(pos >= SIZE)\n           return;\n"
                },
                {
                    "date": 1727156342324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int songs;\n     int mask;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int m)\n+    void dfs(const std::vector<int>& cd, int pos, int c, int )\n     {\n         if(c > CAPACITY)\n           return;\n \n"
                },
                {
                    "date": 1727156348384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int songs;\n     int mask;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int )\n+    void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n     {\n         if(c > CAPACITY)\n           return;\n \n"
                },
                {
                    "date": 1727156362868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * the tracks are stored on the CD\n      */\n     int SIZE;\n     int CAPACITY;\n-    int songs;\n+    int ;\n     int mask;\n     void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n     {\n         if(c > CAPACITY)\n"
                },
                {
                    "date": 1727156375352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * the tracks are stored on the CD\n      */\n     int SIZE;\n     int CAPACITY;\n-    int ;\n+    int time;\n     int mask;\n     void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n     {\n         if(c > CAPACITY)\n"
                },
                {
                    "date": 1727156380557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,8 @@\n             \n             for(auto c : cd)\n               if(mask & (1 << c))\n                 printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", songs);\n+            printf(\"sum:%d\\n\", time);\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156396770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time;\n+    int mask;\n+    void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n+    {\n+        if(c > CAPACITY)\n+          return;\n+\n+        if(c > songs)\n+        {\n+            songs = c;\n+            mask = m;\n+        }\n+\n+        if(pos >= SIZE)\n+          return;\n+\n+        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n+        dfs(cd, pos + 1, c, m);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+            {\n+                std::cin >> v;\n+                cd.push_back(v);\n+            }\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            dfs(cd, 0, 0, 0);\n+            \n+            for(auto c : cd)\n+              if(mask & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156411004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n      */\n     int SIZE;\n     int CAPACITY;\n     int time;\n-    int mask;\n+    int songs;\n     void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n     {\n         if(c > CAPACITY)\n           return;\n@@ -62,71 +62,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time;\n-    int mask;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n-    {\n-        if(c > CAPACITY)\n-          return;\n-\n-        if(c > songs)\n-        {\n-            songs = c;\n-            mask = m;\n-        }\n-\n-        if(pos >= SIZE)\n-          return;\n-\n-        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n-        dfs(cd, pos + 1, c, m);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-            {\n-                std::cin >> v;\n-                cd.push_back(v);\n-            }\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            dfs(cd, 0, 0, 0);\n-            \n-            for(auto c : cd)\n-              if(mask & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156430591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int time;\n     int songs;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int songs)\n+    void dfs(const std::vector<int>& cd, int pos, int c, int s)\n     {\n         if(c > CAPACITY)\n           return;\n \n@@ -36,9 +36,9 @@\n \n         if(pos >= SIZE)\n           return;\n \n-        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n+        dfs(cd, pos + 1, t + cd[pos], m | (1 << pos));\n         dfs(cd, pos + 1, c, m);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727156438026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n \n         if(pos >= SIZE)\n           return;\n \n-        dfs(cd, pos + 1, t + cd[pos], m | (1 << pos));\n-        dfs(cd, pos + 1, c, m);  \n+        dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        dfs(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n     {\n"
                },
                {
                    "date": 1727156447432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time;\n+    int songs;\n+    void dfs(const std::vector<int>& cd, int pos, int c, int s)\n+    {\n+        if(c > CAPACITY)\n+          return;\n+\n+        if(c > songs)\n+        {\n+            songs = c;\n+            mask = m;\n+        }\n+\n+        if(pos >= SIZE)\n+          return;\n+\n+        dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        dfs(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+            {\n+                std::cin >> v;\n+                cd.push_back(v);\n+            }\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            dfs(cd, 0, 0, 0);\n+            \n+            for(auto c : cd)\n+              if(mask & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156453320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int time;\n     int songs;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int s)\n+    void dfs(const std::vector<int>& cd, int pos, int t, int s)\n     {\n         if(c > CAPACITY)\n           return;\n \n@@ -62,71 +62,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time;\n-    int songs;\n-    void dfs(const std::vector<int>& cd, int pos, int c, int s)\n-    {\n-        if(c > CAPACITY)\n-          return;\n-\n-        if(c > songs)\n-        {\n-            songs = c;\n-            mask = m;\n-        }\n-\n-        if(pos >= SIZE)\n-          return;\n-\n-        dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        dfs(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-            {\n-                std::cin >> v;\n-                cd.push_back(v);\n-            }\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            dfs(cd, 0, 0, 0);\n-            \n-            for(auto c : cd)\n-              if(mask & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156460512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,20 +24,9 @@\n     int time;\n     int songs;\n     void dfs(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(c > CAPACITY)\n-          return;\n \n-        if(c > songs)\n-        {\n-            songs = c;\n-            mask = m;\n-        }\n-\n-        if(pos >= SIZE)\n-          return;\n-\n         dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         dfs(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156466168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int time;\n     int songs;\n-    void dfs(const std::vector<int>& cd, int pos, int t, int s)\n+    void backtr(const std::vector<int>& cd, int pos, int t, int s)\n     {\n \n         dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         dfs(cd, pos + 1, t, s);  \n"
                },
                {
                    "date": 1727156473589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,12 @@\n     int SIZE;\n     int CAPACITY;\n     int time;\n     int songs;\n-    void backtr(const std::vector<int>& cd, int pos, int t, int s)\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n \n-        dfs(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         dfs(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727156484145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        dfs(cd, pos + 1, t, s);  \n+        backtrack(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n     {\n@@ -37,9 +37,8 @@\n         {\n             std::cin >> s;\n             std::vector<int> cd;\n             for(int i = 0; i < s; i++)\n-            {\n                 std::cin >> v;\n                 cd.push_back(v);\n             }\n             CAPACITY = capacity;\n"
                },
                {
                    "date": 1727156491573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n         {\n             std::cin >> s;\n             std::vector<int> cd;\n             for(int i = 0; i < s; i++)\n-                std::cin >> v;\n-                cd.push_back(v);\n-            }\n+              std::cin >> v,\n+              cd.push_back(v);\n+\n             CAPACITY = capacity;\n             SIZE = cd.size();\n             dfs(cd, 0, 0, 0);\n             \n"
                },
                {
                    "date": 1727156498552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n               cd.push_back(v);\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n-            dfs(cd, 0, 0, 0);\n+            backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n               if(mask & (1 << c))\n                 printf(\"%d \", c);\n"
                },
                {
                    "date": 1727156507757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n-              if(mask & (1 << c))\n+              if( & (1 << c))\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n"
                },
                {
                    "date": 1727156520405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n-              if( & (1 << c))\n+              if(songs & (1 << c))\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n"
                },
                {
                    "date": 1727156525751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            \n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156584256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     int time;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n+        \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n@@ -50,59 +51,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            \n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156621376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        \n+        ()\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n"
                },
                {
                    "date": 1727156635768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n     int time;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        ()\n+        (t > CAPACITY)\n+          return;\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n"
                },
                {
                    "date": 1727156644271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        (t > CAPACITY)\n+        if(t > CAPACITY)\n           return;\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n"
                },
                {
                    "date": 1727156649684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,12 @@\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n         if(t > CAPACITY)\n           return;\n+        \n+         \n \n+\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156657695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n         if(t > CAPACITY)\n           return;\n+\n         \n          \n \n \n"
                },
                {
                    "date": 1727156666364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n         if(t > CAPACITY)\n           return;\n \n         \n-         \n \n \n+\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156673752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        \n+        if(t == CAPACITY)\n \n \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727156679260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,12 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(t == CAPACITY)\n+        if(t <= CAPACITY)\n+        \n \n \n-\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156686201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,12 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(t <= CAPACITY)\n-        \n+        if( t < CAPACITY)\n \n \n+\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156693583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if( t < CAPACITY)\n+        if(pos == SI t < CAPACITY)\n \n \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727156700223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(pos == SI t < CAPACITY)\n+        if(pos == SIZE - 1 && t < CAPACITY)\n \n \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727156705531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(pos == SIZE - 1 && t < CAPACITY)\n+        if(pos == SIZE - 1 && t < CAPACITY) || )\n \n \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727156716199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(pos == SIZE - 1 && t < CAPACITY) || )\n+        if((pos == SIZE - 1 && t < CAPACITY) || t == CAPACITY)\n+        {\n+            \n+        }\n \n \n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727156721278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n           return;\n \n         if((pos == SIZE - 1 && t < CAPACITY) || t == CAPACITY)\n         {\n-            \n+            songs \n         }\n \n \n \n"
                },
                {
                    "date": 1727156733823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,11 @@\n           return;\n \n         if((pos == SIZE - 1 && t < CAPACITY) || t == CAPACITY)\n         {\n-            songs \n+            songs = s;\n+            time = t;\n+            return\n         }\n \n \n \n"
                },
                {
                    "date": 1727156774075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,11 @@\n         if((pos == SIZE - 1 && t < CAPACITY) || t == CAPACITY)\n         {\n             songs = s;\n             time = t;\n-            return\n+            return;\n         }\n \n-\n-\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727156817348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,11 @@\n               cd.push_back(v);\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n+\n+            cout << \"cap: \" << CAPACITY\n+\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n               if(songs & (1 << c))\n"
                },
                {
                    "date": 1727156825321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n-            cout << \"cap: \" << CAPACITY\n+            cout << \"cap: \" << CAPACITY << \", \"\n \n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n"
                },
                {
                    "date": 1727156831477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n-            cout << \"cap: \" << CAPACITY << \", \"\n+            cout << \"cap: \" << CAPACITY << \", size: \" << SIZE << \"\\n\";\n \n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n"
                },
                {
                    "date": 1727156866354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,8 @@\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n-            cout << \"cap: \" << CAPACITY << \", size: \" << SIZE << \"\\n\";\n-\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n               if(songs & (1 << c))\n"
                },
                {
                    "date": 1727156876273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,11 @@\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n+            \n+            for(auto )\n+\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n               if(songs & (1 << c))\n"
                },
                {
                    "date": 1727156882462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n             \n-            for(auto )\n+            for(auto c : cd) cout << \"\"\n \n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n"
                },
                {
                    "date": 1727156891384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,10 @@\n             CAPACITY = capacity;\n             SIZE = cd.size();\n \n             \n-            for(auto c : cd) cout << \"\"\n+            for(auto c : cd) cout << c << \" \";\n+            cout << \"\\n\";\n \n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n"
                },
                {
                    "date": 1727156915063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,13 +51,8 @@\n               cd.push_back(v);\n \n             CAPACITY = capacity;\n             SIZE = cd.size();\n-\n-            \n-            for(auto c : cd) cout << c << \" \";\n-            cout << \"\\n\";\n-\n             backtrack(cd, 0, 0, 0);\n             \n             for(auto c : cd)\n               if(songs & (1 << c))\n"
                },
                {
                    "date": 1727156929184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t < CAPACITY) || t == CAPACITY)\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n             songs = s;\n             time = t;\n             return;\n@@ -48,13 +48,11 @@\n             std::vector<int> cd;\n             for(int i = 0; i < s; i++)\n               std::cin >> v,\n               cd.push_back(v);\n-\n             CAPACITY = capacity;\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n-            \n             for(auto c : cd)\n               if(songs & (1 << c))\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n"
                },
                {
                    "date": 1727156939790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n+        if((pos == SIZE - 1 && t <= CAPACITY) || pos  t == CAPACITY)\n         {\n             songs = s;\n             time = t;\n             return;\n"
                },
                {
                    "date": 1727156946326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY)\n+          return;\n+\n+        if((pos == SIZE - 1 && t <= CAPACITY) || pos  t == CAPACITY)\n+        {\n+            songs = s;\n+            time = t;\n+            return;\n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727156958725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t <= CAPACITY) || pos  t == CAPACITY)\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n             songs = s;\n             time = t;\n             return;\n@@ -57,66 +57,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY)\n-          return;\n-\n-        if((pos == SIZE - 1 && t <= CAPACITY) || pos  t == CAPACITY)\n-        {\n-            songs = s;\n-            time = t;\n-            return;\n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727157862522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n+            cout << \"ascd\\n\"l\n             songs = s;\n             time = t;\n             return;\n         }\n"
                },
                {
                    "date": 1727157897937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n-            cout << \"ascd\\n\"l\n             songs = s;\n             time = t;\n             return;\n         }\n"
                },
                {
                    "date": 1727157903738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY))\n         {\n             songs = s;\n             time = t;\n             return;\n"
                },
                {
                    "date": 1727157910742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY))\n+        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && )\n         {\n             songs = s;\n             time = t;\n             return;\n"
                },
                {
                    "date": 1727157922275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && )\n+        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time)\n         {\n             songs = s;\n             time = t;\n             return;\n"
                },
                {
                    "date": 1727157928414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY)\n+          return;\n+\n+        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time)\n+        {\n+            songs = s;\n+            time = t;\n+            return;\n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727157933623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY)\n+          return;\n+\n+        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time != 0)\n+        {\n+            songs = s;\n+            time = t;\n+            return;\n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727157962822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time != 0)\n+        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY && time != 0)\n         {\n             songs = s;\n             time = t;\n             return;\n@@ -57,127 +57,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY)\n-          return;\n-\n-        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time)\n-        {\n-            songs = s;\n-            time = t;\n-            return;\n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY)\n-          return;\n-\n-        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY) && time)\n-        {\n-            songs = s;\n-            time = t;\n-            return;\n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727157973304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,11 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY && time != 0)\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n+            cout << \n             songs = s;\n             time = t;\n             return;\n         }\n"
                },
                {
                    "date": 1727157986550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n-            cout << \n+            cout << \"time: \" << t << \"\\n\";\n             songs = s;\n             time = t;\n             return;\n         }\n"
                },
                {
                    "date": 1727158049052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY)\n+        if(t > CAPACITY && )\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n"
                },
                {
                    "date": 1727158056271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY && )\n+        if(t > CAPACITY && time )\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n"
                },
                {
                    "date": 1727158062699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY && time )\n+        if(t > CAPACITY && time != 0)\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n"
                },
                {
                    "date": 1727158068190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY && time != 0)\n+        if(t > CAPACITY && (time != 0))\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n"
                },
                {
                    "date": 1727158091730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY && (time != 0))\n+        if(t > CAPACITY)\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n"
                },
                {
                    "date": 1727158110878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         {\n             cout << \"time: \" << t << \"\\n\";\n             songs = s;\n             time = t;\n-            return;\n+            \n         }\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n"
                },
                {
                    "date": 1727158126576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,12 @@\n         {\n             cout << \"time: \" << t << \"\\n\";\n             songs = s;\n             time = t;\n-            \n+            return;\n         }\n \n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727158133410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY)\n+          return;\n+\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n+        {\n+            cout << \"time: \" << t << \"\\n\";\n+            songs = s;\n+            time = t;\n+            return;\n+        }\n+\n+       \n+         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158146679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY)\n+        if(t > CAPACITY || )\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n@@ -35,10 +35,9 @@\n             time = t;\n             return;\n         }\n \n-       \n-         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n@@ -59,67 +58,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY)\n-          return;\n-\n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n-        {\n-            cout << \"time: \" << t << \"\\n\";\n-            songs = s;\n-            time = t;\n-            return;\n-        }\n-\n-         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158152411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY || time )\n+          return;\n+\n+        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n+        {\n+            cout << \"time: \" << t << \"\\n\";\n+            songs = s;\n+            time = t;\n+            return;\n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(auto c : cd)\n+              if(songs & (1 << c))\n+                printf(\"%d \", c);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158159864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY || time )\n+        if(t > CAPACITY || (time != 0)\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n@@ -58,67 +58,5 @@\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY || )\n-          return;\n-\n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n-        {\n-            cout << \"time: \" << t << \"\\n\";\n-            songs = s;\n-            time = t;\n-            return;\n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n-              if(songs & (1 << c))\n-                printf(\"%d \", c);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158201749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY || (time != 0)\n+        if(t > CAPACITY || (time != 0))\n           return;\n \n         if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n         {\n@@ -52,9 +52,9 @@\n               cd.push_back(v);\n             CAPACITY = capacity;\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n-            for(auto c : cd)\n+            for(int i = 0; i < )\n               if(songs & (1 << c))\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n"
                },
                {
                    "date": 1727158209079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n               cd.push_back(v);\n             CAPACITY = capacity;\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < )\n-              if(songs & (1 << c))\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n                 printf(\"%d \", c);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n"
                },
                {
                    "date": 1727158247955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,20 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY || (time != 0))\n+                if(c > CAPACITY)\n           return;\n \n-        if((pos == SIZE - 1 && t <= CAPACITY) || t == CAPACITY)\n+        if(c > songs)\n         {\n-            cout << \"time: \" << t << \"\\n\";\n-            songs = s;\n-            time = t;\n-            return;\n+            songs = c;\n+            mask = m; \n         }\n \n+        if(pos >= SIZE)\n+          return;\n+\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n@@ -54,9 +55,9 @@\n             SIZE = cd.size();\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n-                printf(\"%d \", c);\n+                printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158260152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY)\n+          return;\n+\n+        if(c > songs)\n+        {\n+            songs = c;\n+            mask = m; \n+        }\n+\n+        if(pos >= SIZE)\n+          return;\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158294224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(c > songs)\n+        if(t > time)\n         {\n             songs = c;\n             mask = m; \n         }\n@@ -59,68 +59,5 @@\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", time);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-                if(c > CAPACITY)\n-          return;\n-\n-        if(c > songs)\n-        {\n-            songs = c;\n-            mask = m; \n-        }\n-\n-        if(pos >= SIZE)\n-          return;\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158305524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n           return;\n \n         if(t > time)\n         {\n-            songs = c;\n+            time = t;\n             mask = m; \n         }\n \n         if(pos >= SIZE)\n"
                },
                {
                    "date": 1727158311568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n         if(t > time)\n         {\n             time = t;\n-            mask = m; \n+            songs = s; \n         }\n \n         if(pos >= SIZE)\n           return;\n"
                },
                {
                    "date": 1727158414042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY)\n           return;\n \n-        if(t > time)\n+        if(t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158483496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n           return;\n \n         if(t <= CAPACITY)\n         {\n+            \n             time = t;\n             songs = s; \n         }\n \n"
                },
                {
                    "date": 1727158495881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,13 @@\n     int time = 0;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n-        if(t > CAPACITY)\n+        if(t > CAPACITY || pos >= SIZE)\n           return;\n \n         if(t <= CAPACITY)\n         {\n-            \n             time = t;\n             songs = s; \n         }\n \n"
                },
                {
                    "date": 1727158504766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,14 +30,12 @@\n \n         if(t <= CAPACITY)\n         {\n             time = t;\n-            songs = s; \n+            songs = s;\n+             \n         }\n \n-        if(pos >= SIZE)\n-          return;\n-\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727158510531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,9 @@\n \n         if(t <= CAPACITY)\n         {\n             time = t;\n-            songs = s;\n-             \n+            songs = s; \n         }\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n"
                },
                {
                    "date": 1727158515986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(t <= CAPACITY)\n+        if(pos ==  t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158525127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(pos ==  t <= CAPACITY)\n+        if(pos <= SIZE  t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158531804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(pos <= SIZE  t <= CAPACITY)\n+        if(pos < SIZE && t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158539915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(pos < SIZE && t <= CAPACITY)\n+        if(pos < SIZE && t <= CAPACITY && )\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158546468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(pos < SIZE && t <= CAPACITY && )\n+        if(pos < SIZE && t <= CAPACITY && time < t)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158558489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(pos < SIZE && t <= CAPACITY && time < t)\n+        if(t <= CAPACITY && time < t)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158603627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(t <= CAPACITY && time < t)\n+        if(t <= CAPACITY && time <= t)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158615564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(t <= CAPACITY && time <= t)\n+        if(t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158638362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(t <= CAPACITY)\n+        if( t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158646928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if( t <= CAPACITY)\n+        if(time < t && t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158712075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,7 +54,8 @@\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", time);\n+            \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158717319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", time);\n-            \n+            time = 0;\n+            song \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158726902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,8 @@\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", time);\n             time = 0;\n-            song \n+            songs = 0;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158732562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n      */\n     int SIZE;\n     int CAPACITY;\n     int time = 0;\n-    int songs;\n+    int songs = 0;\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n"
                },
                {
                    "date": 1727158769725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(time < t && t <= CAPACITY)\n+        if(t <= CAPACITY)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158782151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n           return;\n \n         if(t <= CAPACITY)\n         {\n-            time = t;\n+            time = std::maxt;\n             songs = s; \n         }\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727158790819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+\n+        if(t <= CAPACITY)\n+        {\n+            time = std::max(time, t);\n+            songs = s; \n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            time = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158853374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(t <= CAPACITY)\n+        if(  t <= CAPACITY)\n         {\n             time = std::max(time, t);\n             songs = s; \n         }\n@@ -58,67 +58,5 @@\n             time = 0;\n             songs = 0;\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-\n-        if(t <= CAPACITY)\n-        {\n-            time = std::maxt;\n-            songs = s; \n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727158859367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(  t <= CAPACITY)\n+        if(time <  t <= CAPACITY)\n         {\n             time = std::max(time, t);\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158878554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(time <  t <= CAPACITY)\n+        if(time < t && t <= CAPACITY)\n         {\n-            time = std::max(time, t);\n+            time = t;\n             songs = s; \n         }\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n"
                },
                {
                    "date": 1727158928608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n \n-        if(time < t && t <= CAPACITY)\n+        if(time < t)\n         {\n             time = t;\n             songs = s; \n         }\n"
                },
                {
                    "date": 1727158941204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+\n+        if(time < t)\n+        {\n+            time = t;\n+            songs = s; \n+        }\n+\n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = cd.size();\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            time = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159037694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,10 @@\n     void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n-\n+        \n+        cout << \"time: \" << time << \", t: \" << t \n         if(time < t)\n         {\n             time = t;\n             songs = s; \n@@ -58,67 +59,5 @@\n             time = 0;\n             songs = 0;\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-\n-        if(time < t)\n-        {\n-            time = t;\n-            songs = s; \n-        }\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = cd.size();\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159147002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,17 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"time: \" << time << \", t: \" << t \n+        cout << \"time: \" << time << \", t: \" << t << \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n         }\n \n+        \n+\n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727159152191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             time = t;\n             songs = s; \n         }\n \n-        \n+        cout <<\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n"
                },
                {
                    "date": 1727159159301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,16 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"time: \" << time << \", t: \" << t << \"\\n\";\n+        cout << \"1: time: \" << time << \", t: \" << t << \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n         }\n \n-        cout <<\n+        cout << \"time: \" << time << \", t: \" << t << \"\\n\";\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n"
                },
                {
                    "date": 1727159249813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             time = t;\n             songs = s; \n         }\n \n-        cout << \"time: \" << time << \", t: \" << t << \"\\n\";\n+        cout << \"2: time: \" << time << \", t: \" << t << \"\\n\";\n \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n@@ -51,9 +51,9 @@\n             for(int i = 0; i < s; i++)\n               std::cin >> v,\n               cd.push_back(v);\n             CAPACITY = capacity;\n-            SIZE = cd.size();\n+            SIZE = s;\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n"
                },
                {
                    "date": 1727159299092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"1: time: \" << time << \", t: \" << t << \"\\n\";\n+        cout << \"1: time: \" << time << \", t: \" << t << \", pos\" \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n"
                },
                {
                    "date": 1727159304822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"1: time: \" << time << \", t: \" << t << \", pos\" \"\\n\";\n+        cout << \"1: time: \" << time << \", t: \" << t << \", pos: \" << cd[pos] \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n"
                },
                {
                    "date": 1727159353171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"1: time: \" << time << \", t: \" << t << \", pos: \" << cd[pos] \"\\n\";\n+        cout << \"1: time: \" << time << \", t: \" << t << \", pos: \" << cd[pos] << \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n"
                },
                {
                    "date": 1727159366876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        cout << \"1: time: \" << time << \", t: \" << t << \", pos: \" << cd[pos] << \"\\n\";\n         if(time < t)\n         {\n             time = t;\n             songs = s; \n"
                },
                {
                    "date": 1727159383303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int time = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+        \n+        if(time < t)\n+        {\n+            time = t;\n+            songs = s; \n+        }\n+        \n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            time = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159391059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n             time = t;\n             songs = s; \n         }\n         \n+        \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n"
                },
                {
                    "date": 1727159407203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n             time = t;\n             songs = s; \n         }\n         \n-        \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n@@ -59,69 +58,5 @@\n             time = 0;\n             songs = 0;\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-        \n-        if(time < t)\n-        {\n-            time = t;\n-            songs = s; \n-        }\n-\n-        cout << \"2: time: \" << time << \", t: \" << t << \"\\n\";\n-\n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159419601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int time = 0;\n     int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int t, int s)\n+    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n"
                },
                {
                    "date": 1727159426785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+        \n+        if(time < t)\n+        {\n+            time = t;\n+            songs = s; \n+        }\n+        \n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            time = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159432765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n-        if(time < t)\n+        if(length < t)\n         {\n-            time = t;\n+            length = t;\n             songs = s; \n         }\n         \n         backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n@@ -58,67 +58,5 @@\n             time = 0;\n             songs = 0;\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int time = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-        \n-        if(time < t)\n-        {\n-            time = t;\n-            songs = s; \n-        }\n-        \n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159441912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+        \n+        if(length < l)\n+        {\n+            length = l;\n+            songs = s; \n+        }\n+        \n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            time = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159455691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length = 0;\n+    int songs = 0;\n+    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n+    {\n+        if(t > CAPACITY || pos >= SIZE)\n+          return;\n+        \n+        if(length < l)\n+        {\n+            length = l;\n+            songs = s; \n+        }\n+        \n+        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, t, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", time);\n+            length = 0;\n+            songs = 0;\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159465211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,134 +53,10 @@\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n+            printf(\"sum:%d\\n\", length);\n             length = 0;\n             songs = 0;\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int length = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-        \n-        if(length < l)\n-        {\n-            length = l;\n-            songs = s; \n-        }\n-        \n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int length = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n-    {\n-        if(t > CAPACITY || pos >= SIZE)\n-          return;\n-        \n-        if(length < t)\n-        {\n-            length = t;\n-            songs = s; \n-        }\n-        \n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", time);\n-            time = 0;\n-            songs = 0;\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159480950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             length = l;\n             songs = s; \n         }\n         \n-        backtrack(cd, pos + 1, t + cd[pos], s | (1 << pos));\n+        backtrack(cd, pos + 1, l + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, t, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727159492770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int length = 0;\n     int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int pos, int l, int s)\n+    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n         if(t > CAPACITY || pos >= SIZE)\n           return;\n         \n@@ -34,9 +34,9 @@\n             songs = s; \n         }\n         \n         backtrack(cd, pos + 1, l + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, t, s);  \n+        backtrack(cd, pos + 1, l, s);  \n     }\n  \n     void submit()\n     {\n"
                },
                {
                    "date": 1727159499242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int length = 0;\n     int songs = 0;\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n-        if(t > CAPACITY || pos >= SIZE)\n+        if(t > CAPACITY || i >= SIZE)\n           return;\n         \n         if(length < l)\n         {\n"
                },
                {
                    "date": 1727159506241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,18 +24,18 @@\n     int length = 0;\n     int songs = 0;\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n-        if(t > CAPACITY || i >= SIZE)\n+        if(l > CAPACITY || i >= SIZE)\n           return;\n         \n         if(length < l)\n         {\n             length = l;\n             songs = s; \n         }\n         \n-        backtrack(cd, pos + 1, l + cd[pos], s | (1 << pos));\n+        backtrack(cd, i + 1, l + cd[pos], s | (1 << pos));\n         backtrack(cd, pos + 1, l, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727159511842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n             length = l;\n             songs = s; \n         }\n         \n-        backtrack(cd, i + 1, l + cd[pos], s | (1 << pos));\n-        backtrack(cd, pos + 1, l, s);  \n+        backtrack(cd, i + 1, l + cd[i], s | (1 << pos));\n+        backtrack(cd, i + 1, l, s);  \n     }\n  \n     void submit()\n     {\n"
                },
                {
                    "date": 1727159517314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             length = l;\n             songs = s; \n         }\n         \n-        backtrack(cd, i + 1, l + cd[i], s | (1 << pos));\n+        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727159554503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,11 @@\n         {\n             length = l;\n             songs = s; \n         }\n+\n+        if(length == CAPACITY)\n+          return;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n"
                },
                {
                    "date": 1727159581831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,9 @@\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length);\n-            length = 0;\n+            printf(\"sum:%d\\n\", length); length = 0;\n             songs = 0;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159587327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length); length = 0;\n-            songs = 0;\n+            printf(\"sum:%d\\n\", length); length = 0; songs = 0;\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159607504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,8 @@\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length); length = 0; songs = 0;\n+            printf(\"sum:%d\\n\", length);\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159613950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n               std::cin >> v,\n               cd.push_back(v);\n             CAPACITY = capacity;\n             SIZE = s;\n+            length = songs = 0;\n             backtrack(cd, 0, 0, 0);\n             for(int i = 0; i < SIZE; i++)\n               if(songs & (1 << i))\n                 printf(\"%d \", cd[i]);\n"
                },
                {
                    "date": 1727159620104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length = 0;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n+    {\n+        if(l > CAPACITY || i >= SIZE)\n+          return;\n+        \n+        if(length < l)\n+        {\n+            length = l;\n+            songs = s; \n+        }\n+\n+        if(length == CAPACITY)\n+          return;\n+        \n+        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n+        backtrack(cd, i + 1, l, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            length = songs = 0;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", length);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159666001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,17 +20,15 @@\n      * the tracks are stored on the CD\n      */\n     int SIZE;\n     int CAPACITY;\n-    int length = 0;\n+    int length;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n-        if(length < l)\n-        {\n             length = l;\n             songs = s; \n         }\n \n@@ -60,69 +58,5 @@\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", length);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int length = 0;\n-    int songs = 0;\n-    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n-    {\n-        if(l > CAPACITY || i >= SIZE)\n-          return;\n-        \n-        if(length < l)\n-        {\n-            length = l;\n-            songs = s; \n-        }\n-\n-        if(length == CAPACITY)\n-          return;\n-        \n-        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n-        backtrack(cd, i + 1, l, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            length = songs = 0;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159698297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n+    {\n+        if(l > CAPACITY || i >= SIZE)\n+          return;\n+        \n+        length = std::max(len l;\n+        songs = s;\n+\n+        if(length == CAPACITY)\n+          return;\n+        \n+        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n+        backtrack(cd, i + 1, l, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            length = songs = 0;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", length);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159709300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,10 @@\n     {\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n-        length = std::max(len l;\n+        length = std::max(length, l);\n         songs = s;\n-\n-        if(length == CAPACITY)\n-          return;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n@@ -57,67 +54,5 @@\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", length);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int length;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n-    {\n-        if(l > CAPACITY || i >= SIZE)\n-          return;\n-        \n-            length = l;\n-            songs = s; \n-        }\n-\n-        if(length == CAPACITY)\n-          return;\n-        \n-        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n-        backtrack(cd, i + 1, l, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            length = songs = 0;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159714563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+#include <vector>\n+#include <cstdio>\n+#include <numeric>\n+#include <iostream>\n+\n+namespace algorithms::backtrack::onlinejudge::cd\n+{\n+    // https://onlinejudge.org/external/6/624.pdf\n+    /**\n+     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n+     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n+     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n+     * Assumptions:\n+     * • number of tracks on the CD does not exceed 20\n+     * • no track is longer than N minutes\n+     * • tracks do not repeat\n+     * • length of each track is expressed as an integer number\n+     * • N is also integer\n+     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n+     * the tracks are stored on the CD\n+     */\n+    int SIZE;\n+    int CAPACITY;\n+    int length;\n+    int songs;\n+    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n+    {\n+        if(l > CAPACITY || i >= SIZE)\n+          return;\n+\n+        if(length == CAPACITY)\n+          return;\n+\n+        length = std::max(length, l);\n+        songs = s;\n+        \n+        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n+        backtrack(cd, i + 1, l, s);  \n+    }\n+ \n+    void submit()\n+    {\n+        int capacity, s, v;\n+        while(std::cin >> capacity)\n+        {\n+            std::cin >> s;\n+            std::vector<int> cd;\n+            for(int i = 0; i < s; i++)\n+              std::cin >> v,\n+              cd.push_back(v);\n+            CAPACITY = capacity;\n+            SIZE = s;\n+            length = songs = 0;\n+            backtrack(cd, 0, 0, 0);\n+            for(int i = 0; i < SIZE; i++)\n+              if(songs & (1 << i))\n+                printf(\"%d \", cd[i]);\n+            printf(\"sum:%d\\n\", length);\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159721919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,63 +57,5 @@\n                 printf(\"%d \", cd[i]);\n             printf(\"sum:%d\\n\", length);\n         }\n     }\n-}\n-#include <vector>\n-#include <cstdio>\n-#include <numeric>\n-#include <iostream>\n-\n-namespace algorithms::backtrack::onlinejudge::cd\n-{\n-    // https://onlinejudge.org/external/6/624.pdf\n-    /**\n-     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n-     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n-     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n-     * Assumptions:\n-     * • number of tracks on the CD does not exceed 20\n-     * • no track is longer than N minutes\n-     * • tracks do not repeat\n-     * • length of each track is expressed as an integer number\n-     * • N is also integer\n-     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n-     * the tracks are stored on the CD\n-     */\n-    int SIZE;\n-    int CAPACITY;\n-    int length;\n-    int songs;\n-    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n-    {\n-        if(l > CAPACITY || i >= SIZE)\n-          return;\n-        \n-        length = std::max(length, l);\n-        songs = s;\n-        \n-        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n-        backtrack(cd, i + 1, l, s);  \n-    }\n- \n-    void submit()\n-    {\n-        int capacity, s, v;\n-        while(std::cin >> capacity)\n-        {\n-            std::cin >> s;\n-            std::vector<int> cd;\n-            for(int i = 0; i < s; i++)\n-              std::cin >> v,\n-              cd.push_back(v);\n-            CAPACITY = capacity;\n-            SIZE = s;\n-            length = songs = 0;\n-            backtrack(cd, 0, 0, 0);\n-            for(int i = 0; i < SIZE; i++)\n-              if(songs & (1 << i))\n-                printf(\"%d \", cd[i]);\n-            printf(\"sum:%d\\n\", length);\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727159728235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,14 @@\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n         if(l > CAPACITY || i >= SIZE)\n           return;\n+        \n+        length = std::max(length, l);\n+        songs = s;\n \n         if(length == CAPACITY)\n           return;\n-\n-        length = std::max(length, l);\n-        songs = s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n"
                },
                {
                    "date": 1727159768396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n-        songs = s;\n+        songs = songs;\n \n         if(length == CAPACITY)\n           return;\n         \n"
                },
                {
                    "date": 1727159775288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n-        songs = songs;\n+        songs = songs | (s;\n \n         if(length == CAPACITY)\n           return;\n         \n"
                },
                {
                    "date": 1727159805256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n-        songs = songs | (s;\n+        songs =| s;\n \n         if(length == CAPACITY)\n           return;\n         \n"
                },
                {
                    "date": 1727159886857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if(l > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n-        songs =| s;\n+        songs |= s;\n \n         if(length == CAPACITY)\n           return;\n         \n"
                },
                {
                    "date": 1727159903502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int length;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n-        if(l > CAPACITY || i >= SIZE)\n+        if( > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n         songs |= s;\n"
                },
                {
                    "date": 1727159913880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int length;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int i, int l, int s)\n     {\n-        if( > CAPACITY || i >= SIZE)\n+        if(length > CAPACITY || i >= SIZE)\n           return;\n         \n         length = std::max(length, l);\n         songs |= s;\n"
                },
                {
                    "date": 1727159954842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     {\n         if(length > CAPACITY || i >= SIZE)\n           return;\n         \n+        cout << \"l: \" << l << \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n \n         if(length == CAPACITY)\n"
                },
                {
                    "date": 1727159969521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,8 @@\n         \n         cout << \"l: \" << l << \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n-\n-        if(length == CAPACITY)\n-          return;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n"
                },
                {
                    "date": 1727160015824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n     {\n         if(length > CAPACITY || i >= SIZE)\n           return;\n         \n-        cout << \"l: \" << l << \"\\n\";\n+        if(length == CAPACITY)\n+          return;\n+\n+        cout << \"\" \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n"
                },
                {
                    "date": 1727160022383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         \n         if(length == CAPACITY)\n           return;\n \n-        cout << \"\" \"\\n\";\n+        cout << \"cd[i]\" \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n"
                },
                {
                    "date": 1727160030237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         \n         if(length == CAPACITY)\n           return;\n \n-        cout << \"cd[i]\" \"\\n\";\n+        cout << \"cd[i]\" << cd[i] << \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n"
                },
                {
                    "date": 1727160060186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         \n         if(length == CAPACITY)\n           return;\n \n-        cout << \"cd[i]\" << cd[i] << \"\\n\";\n+        cout << \"cd[i]\" << cd[i] <<  \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n"
                },
                {
                    "date": 1727160067422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n         \n         if(length == CAPACITY)\n           return;\n \n-        cout << \"cd[i]\" << cd[i] <<  \"\\n\";\n         length = std::max(length, l);\n         songs |= s;\n         \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n"
                },
                {
                    "date": 1727162917789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n \n         length = std::max(length, l);\n         songs |= s;\n         \n+        \n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727162925692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n         length = std::max(length, l);\n         songs |= s;\n         \n-        \n+        for(int )\n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727162931525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n         length = std::max(length, l);\n         songs |= s;\n         \n-        for(int )\n+        for(int i = idx)\n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727162940412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n         length = std::max(length, l);\n         songs |= s;\n         \n-        for(int i = idx)\n+        for(int i = idx; i < SIZE; )\n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727162946811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     int SIZE;\n     int CAPACITY;\n     int length;\n     int songs;\n-    void backtrack(const std::vector<int>& cd, int i, int l, int s)\n+    void backtrack(const std::vector<int>& cd, int idx, int l, int s)\n     {\n         if(length > CAPACITY || i >= SIZE)\n           return;\n         \n@@ -33,9 +33,9 @@\n \n         length = std::max(length, l);\n         songs |= s;\n         \n-        for(int i = idx; i < SIZE; )\n+        for(int i = idx; i < SIZE; i++)\n         backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727162952928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         length = std::max(length, l);\n         songs |= s;\n         \n         for(int i = idx; i < SIZE; i++)\n-        backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n+          backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n         backtrack(cd, i + 1, l, s);  \n     }\n  \n     void submit()\n"
                },
                {
                    "date": 1727162966413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,10 @@\n         length = std::max(length, l);\n         songs |= s;\n         \n         for(int i = idx; i < SIZE; i++)\n-          backtrack(cd, i + 1, l + cd[i], s | (1 << i));\n-        backtrack(cd, i + 1, l, s);  \n+          backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n+          backtrack(cd, i + 1, l, s);  \n     }\n  \n     void submit()\n     {\n"
                },
                {
                    "date": 1727162971805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n         \n         if(length == CAPACITY)\n           return;\n \n+     \n         length = std::max(length, l);\n         songs |= s;\n         \n         for(int i = idx; i < SIZE; i++)\n"
                },
                {
                    "date": 1727162980939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,9 @@\n     {\n         if(length > CAPACITY || i >= SIZE)\n           return;\n         \n-        if(length == CAPACITY)\n-          return;\n-\n+        if(length < l)\n      \n         length = std::max(length, l);\n         songs |= s;\n         \n"
                },
                {
                    "date": 1727162988957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n         if(length > CAPACITY || i >= SIZE)\n           return;\n         \n         if(length < l)\n-     \n-        length = std::max(length, l);\n+        {\n+            length = l);\n         songs |= s;\n         \n         for(int i = idx; i < SIZE; i++)\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n"
                },
                {
                    "date": 1727162996969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,11 @@\n           return;\n         \n         if(length < l)\n         {\n-            length = l);\n-        songs |= s;\n+            length = l;\n+            songs = s;\n+        }\n         \n         for(int i = idx; i < SIZE; i++)\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n"
                },
                {
                    "date": 1727163006663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int length;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int idx, int l, int s)\n     {\n-        if(length > CAPACITY || i >= SIZE)\n+        if(length > CAPACITY || idx == SIZE)\n           return;\n         \n         if(length < l)\n         {\n"
                },
                {
                    "date": 1727163011974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     int length;\n     int songs;\n     void backtrack(const std::vector<int>& cd, int idx, int l, int s)\n     {\n-        if(length > CAPACITY || idx == SIZE)\n+        if(l > CAPACITY || idx == SIZE)\n           return;\n         \n         if(length < l)\n         {\n"
                },
                {
                    "date": 1727163081116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             length = l;\n             songs = s;\n         }\n         \n-        for(int i = idx; i < SIZE; i++)\n+        for(int i = 0; i < SIZE; i++)\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727163087886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n             songs = s;\n         }\n         \n         for(int i = 0; i < SIZE; i++)\n+          if()\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727163093448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             songs = s;\n         }\n         \n         for(int i = 0; i < SIZE; i++)\n-          if()\n+          if(s )\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727163098573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             songs = s;\n         }\n         \n         for(int i = 0; i < SIZE; i++)\n-          if(s )\n+          if(s & (1 << i))\n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727163104663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         }\n         \n         for(int i = 0; i < SIZE; i++)\n           if(s & (1 << i))\n-            \n+        \n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n  \n"
                },
                {
                    "date": 1727163109726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             songs = s;\n         }\n         \n         for(int i = 0; i < SIZE; i++)\n-          if(!(s & (1 << i))\n+          if(!(s & (1 << i)))\n         \n           backtrack(cd, i + 1, l + cd[i], s | (1 << i)),\n           backtrack(cd, i + 1, l, s);  \n     }\n"
                }
            ],
            "date": 1727155874456,
            "name": "Commit-0",
            "content": "#include <vector>\n#include <cstdio>\n#include <numeric>\n#include <iostream>\n\nnamespace algorithms::backtrack::online\n{\n    // https://onlinejudge.org/external/6/624.pdf\n    /**\n     * You have a long drive by car ahead. You have a tape recorder, but unfortunately your best music is on\n     * CDs. You need to have it on tapes so the problem to solve is: you have a tape N minutes long. How\n     * to choose tracks from CD to get most out of tape space and have as short unused space as possible.\n     * Assumptions:\n     * • number of tracks on the CD does not exceed 20\n     * • no track is longer than N minutes\n     * • tracks do not repeat\n     * • length of each track is expressed as an integer number\n     * • N is also integer\n     * Program should find the set of tracks which fills the tape best and print it in the same sequence as\n     * the tracks are stored on the CD\n     */\n    int SIZE;\n    int CAPACITY;\n    int songs;\n    int mask;\n    void dfs(const std::vector<int>& cd, int pos, int c, int m)\n    {\n        if(c > CAPACITY)\n          return;\n\n        if(c > songs)\n        {\n            songs = c;\n            mask = m; \n        }\n\n        if(pos >= SIZE)\n          return;\n\n        dfs(cd, pos + 1, c + cd[pos], m | (1 << pos));\n        dfs(cd, pos + 1, c, m);  \n    }\n \n    void submit_uv_624()\n    {\n        int capacity, s, v;\n        while(std::cin >> capacity)\n        {\n            std::cin >> s;\n            std::vector<int> cd;\n            for(int i = 0; i < s; i++)\n            {\n                std::cin >> v;\n                cd.push_back(v);\n            }\n            CAPACITY = capacity;\n            SIZE = cd.size();\n            dfs(cd, 0, 0, 0);\n            \n            for(auto c : cd)\n              if(mask & (1 << c))\n                printf(\"%d \", c);\n            printf(\"sum:%d\\n\", songs);\n        }\n    }\n}"
        }
    ]
}