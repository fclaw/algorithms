{
    "sourceFile": "algorithms/graph/onlinejudge/injuredQueen.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 40,
            "patches": [
                {
                    "date": 1727810920350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727810926777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3 @@\n+\n+\n+namespace algorithms::graph::onlinejudge::injured\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727810934369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,6 @@\n+\n+\n+namespace algorithms::graph::onlinejudge::injured_queen\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727810946379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,6 @@\n \n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n-    \n-}\n-\n-\n-namespace algorithms::graph::onlinejudge::injured\n-\n-\n-namespace algorithms::graph::onlinejudge::councilling\n\\ No newline at end of file\n+    /** https://onlinejudge.org/external/104/10401.pdf  */\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727810952159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n-    /** https://onlinejudge.org/external/104/10401.pdf  */\n+    /** https://onlinejudge.org/external/104/10401.pdf */\n+    int     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727810965934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,6 @@\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf */\n-    int     \n+    int countWays() { return 1; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727811191325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n \n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n-    /** https://onlinejudge.org/external/104/10401.pdf */\n+    /** https://onlinejudge.org/external/104/10401.pdf \n+     * countingpathsinimplicitDAG;\n+DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n+    */\n     int countWays() { return 1; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727811198183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n-     * countingpathsinimplicitDAG;\n+     * counting paths inimplicit DAG;\n DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n     */\n     int countWays() { return 1; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727811203933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths inimplicit DAG;\n-DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n     */\n     int countWays() { return 1; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727811239796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,7 @@\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n-    */\n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n     int countWays() { return 1; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847084265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,5 +4,7 @@\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n     int countWays() { return 1; }\n+\n+    void submit()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847098945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,6 +5,6 @@\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n     int countWays() { return 1; }\n \n-    void submit()\n+    void submit(std::optional<char*> file)\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847107912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,9 @@\n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n     int countWays() { return 1; }\n \n     void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) \n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847121517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+#include <cassert>\n+#include <optional>\n \n-\n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n"
                },
                {
                    "date": 1727847291341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #include <cassert>\n #include <optional>\n \n+\n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n@@ -9,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847296757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847321191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <cassert>\n #include <optional>\n+#include <cstdio>\n \n-\n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n"
                },
                {
                    "date": 1727847805020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(freopen(file.value(), \"r\", stdin) != nullptr);\n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847814430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+          assert(std::freopen(file.value(), std::read, stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847819455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), std::read, stdin) != nullptr);\n+          assert(std::freopen(file.value(), std::READ, stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847829685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), std::READ, stdin) != nullptr);\n+          assert(std::freopen(file.value(), std::R, stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847856474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,7 @@\n \n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), std::R, stdin) != nullptr);\n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847904316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,6 +11,7 @@\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+          \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847913615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #include <cassert>\n #include <optional>\n #include <cstdio>\n+#include <string>\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n     /** https://onlinejudge.org/external/104/10401.pdf \n@@ -11,7 +12,7 @@\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-          \n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847920434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-\n+        std::string  \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847928411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,8 @@\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        std::string  \n+        std::string line;\n+        while() \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847936690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,7 @@\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         std::string line;\n-        while() \n+        while(std::cin >> line) \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847942833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,10 @@\n     {\n         if(file.has_value()) \n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         std::string line;\n-        while(std::cin >> line) \n+        while(std::cin >> line)\n+        {\n+            cout << \n+        } \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727847970777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n           assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         std::string line;\n         while(std::cin >> line)\n         {\n-            cout << \n+            cout << line << \"\\n\";\n         } \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727848057927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+#include <cassert>\n+#include <optional>\n+#include <cstdio>\n+#include <string>\n+\n+namespace algorithms::graph::onlinejudge::injured_queen\n+{\n+    /** https://onlinejudge.org/external/104/10401.pdf \n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n+    int countWays() { return 1; }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) \n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        std::string line;\n+        while(std::cin >> line)\n+        {\n+        } \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727848731316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,27 +17,5 @@\n         while(std::cin >> line)\n         {\n         } \n     }\n-}\n-#include <cassert>\n-#include <optional>\n-#include <cstdio>\n-#include <string>\n-\n-namespace algorithms::graph::onlinejudge::injured_queen\n-{\n-    /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n-    int countWays() { return 1; }\n-\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        std::string line;\n-        while(std::cin >> line)\n-        {\n-            cout << line << \"\\n\";\n-        } \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727863971209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#include <cassert>\n+#include <optional>\n+#include <cstdio>\n+#include <string>\n+\n+namespace algorithms::graph::onlinejudge::injured_queen\n+{\n+\n+    \n+    /** https://onlinejudge.org/external/104/10401.pdf \n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n+    int countWays() { return 1; }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) \n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        std::string line;\n+        while(std::cin >> line)\n+        {\n+        } \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727863981390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,30 +5,11 @@\n \n namespace algorithms::graph::onlinejudge::injured_queen\n {\n \n-    \n-    /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n-    int countWays() { return 1; }\n+typedef long long ll;\n \n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        std::string line;\n-        while(std::cin >> line)\n-        {\n-        } \n-    }\n-}\n-#include <cassert>\n-#include <optional>\n-#include <cstdio>\n-#include <string>\n \n-namespace algorithms::graph::onlinejudge::injured_queen\n-{\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n     int countWays() { return 1; }\n \n"
                },
                {
                    "date": 1727863987271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <cassert>\n+#include <optional>\n+#include <cstdio>\n+#include <string>\n+\n+namespace algorithms::graph::onlinejudge::injured_queen\n+{\n+\n+typedef long long ll;\n+\n+    /** https://onlinejudge.org/external/104/10401.pdf \n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n+    ll countWays() { return 1; }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) \n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        std::string line;\n+        while(std::cin >> line)\n+        {\n+        } \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727864479911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n \n typedef long long ll;\n \n     /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n+     * \n     ll countWays() { return 1; }\n \n     void submit(std::optional<char*> file)\n     {\n@@ -20,30 +21,5 @@\n         while(std::cin >> line)\n         {\n         } \n     }\n-}\n-#include <cassert>\n-#include <optional>\n-#include <cstdio>\n-#include <string>\n-\n-namespace algorithms::graph::onlinejudge::injured_queen\n-{\n-\n-typedef long long ll;\n-\n-\n-    /** https://onlinejudge.org/external/104/10401.pdf \n-     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows */\n-    int countWays() { return 1; }\n-\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        std::string line;\n-        while(std::cin >> line)\n-        {\n-        } \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1727864496985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,11 @@\n typedef long long ll;\n \n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n-     * \n+     * Input file contains several lines of input. Each line expresses a certain board status. The length of these\n+     *  status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n+of first column, the second character of the string denotes the status of the second column and so on. */\n     ll countWays() { return 1; }\n \n     void submit(std::optional<char*> file)\n     {\n"
                },
                {
                    "date": 1727864510600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n \n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n      * Input file contains several lines of input. Each line expresses a certain board status. The length of these\n-     *  status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n-of first column, the second character of the string denotes the status of the second column and so on. */\n+     * status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n+     * of first column, the second character of the string denotes the status of the second column and so on. */\n     ll countWays() { return 1; }\n \n     void submit(std::optional<char*> file)\n     {\n"
                },
                {
                    "date": 1727864625514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,17 @@\n     /** https://onlinejudge.org/external/104/10401.pdf \n      * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n      * Input file contains several lines of input. Each line expresses a certain board status. The length of these\n      * status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n-     * of first column, the second character of the string denotes the status of the second column and so on. */\n+     * of first column, the second character of the string denotes the status of the second column and so on. \n+     * So if the first character of the status string is 2, it means that we are looking for arrangements (no two\n+injured queen attack each other) which has injured queen in column a, row 2. The possible numbers\n+for rows are 1, 2, 3, . . . , D, E, F which indicates row 1, 2, 3... 13, 14, 15. If any column contains ‘?’\n+it means that in that column the injured queen can be in any row. So a status string ‘1?4??3 means\n+that you are asked to find out total number of possible arrangements in a (6 × 6) chessboard which\n+has three of its six injured queens at a1, c4 and f3. Also note that there will be no invalid inputs. For\n+example ‘1?51’ is an invalid input because a (4 × 4) chessboard does not have a fifth row\n+     * */\n     ll countWays() { return 1; }\n \n     void submit(std::optional<char*> file)\n     {\n"
                },
                {
                    "date": 1727864632515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n      * Input file contains several lines of input. Each line expresses a certain board status. The length of these\n      * status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n      * of first column, the second character of the string denotes the status of the second column and so on. \n      * So if the first character of the status string is 2, it means that we are looking for arrangements (no two\n-injured queen attack each other) which has injured queen in column a, row 2. The possible numbers\n-for rows are 1, 2, 3, . . . , D, E, F which indicates row 1, 2, 3... 13, 14, 15. If any column contains ‘?’\n+     * injured queen attack each other) which has injured queen in column a, row 2. The possible numbers\n+     * for rows are 1, 2, 3, . . . , D, E, F which indicates row 1, 2, 3... 13, 14, 15. If any column contains ‘?’\n it means that in that column the injured queen can be in any row. So a status string ‘1?4??3 means\n that you are asked to find out total number of possible arrangements in a (6 × 6) chessboard which\n has three of its six injured queens at a1, c4 and f3. Also note that there will be no invalid inputs. For\n example ‘1?51’ is an invalid input because a (4 × 4) chessboard does not have a fifth row\n"
                },
                {
                    "date": 1727864638491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n      * So if the first character of the status string is 2, it means that we are looking for arrangements (no two\n      * injured queen attack each other) which has injured queen in column a, row 2. The possible numbers\n      * for rows are 1, 2, 3, . . . , D, E, F which indicates row 1, 2, 3... 13, 14, 15. If any column contains ‘?’\n      * it means that in that column the injured queen can be in any row. So a status string ‘1?4??3 means\n-that you are asked to find out total number of possible arrangements in a (6 × 6) chessboard which\n+     * that you are asked to find out total number of possible arrangements in a (6 × 6) chessboard which\n has three of its six injured queens at a1, c4 and f3. Also note that there will be no invalid inputs. For\n example ‘1?51’ is an invalid input because a (4 × 4) chessboard does not have a fifth row\n      * */\n     ll countWays() { return 1; }\n"
                },
                {
                    "date": 1727868129447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+#include <cassert>\n+#include <optional>\n+#include <cstdio>\n+#include <string>\n+#include <vector>\n+\n+namespace algorithms::graph::onlinejudge::injured_queen\n+{\n+\n+typedef long long ll;\n+typedef std::vector<int> vi;\n+typedef std::vector<std::vector<int>> vvi;\n+\n+\n+    /** https://onlinejudge.org/external/104/10401.pdf \n+     * counting paths in implicit DAG; DP; s: col, row; t: next col, avoid 2 or 3 adjacent rows\n+     * Input file contains several lines of input. Each line expresses a certain board status. The length of these\n+     * status string is the board dimension n (0 < n ≤ 15). The first character of the string denotes the status\n+     * of first column, the second character of the string denotes the status of the second column and so on. \n+     * So if the first character of the status string is 2, it means that we are looking for arrangements (no two\n+     * injured queen attack each other) which has injured queen in column a, row 2. The possible numbers\n+     * for rows are 1, 2, 3, . . . , D, E, F which indicates row 1, 2, 3... 13, 14, 15. If any column contains ‘?’\n+     * it means that in that column the injured queen can be in any row. So a status string ‘1?4??3 means\n+     * that you are asked to find out total number of possible arrangements in a (6 × 6) chessboard which\n+     * has three of its six injured queens at a1, c4 and f3. Also note that there will be no invalid inputs. For\n+     * example ‘1?51’ is an invalid input because a (4 × 4) chessboard does not have a fifth row */\n+    ll countWays() { return 1; }\n+\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) \n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        std::string line;\n+        while(std::cin >> line)\n+        {\n+        } \n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1727810920350,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::onlinejudge::councilling"
        }
    ]
}