{
    "sourceFile": "algorithms/graph/edmonds_karp.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1726656210495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726656220017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n \n-namespace \n+namespace algorithms::graph::\n"
                },
                {
                    "date": 1726656232275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,5 @@\n \n-namespace algorithms::graph::\n+namespace algorithms::graph::max_flow\n+{\n+    \n+}\n"
                },
                {
                    "date": 1726656276015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,17 @@\n \n namespace algorithms::graph::max_flow\n {\n-    \n+\n+typedef vector<int> vi;\n+\n+#define MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+#define INF 1000000000\n+\n+int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n+vi p;\n+\n+void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n+  if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n+  else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+                         res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656285217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+#include <vector>\n \n namespace algorithms::graph::max_flow\n {\n \n"
                },
                {
                    "date": 1726656327811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,12 @@\n \n namespace algorithms::graph::max_flow\n {\n \n-typedef vector<int> vi;\n+typedef std::vector<int> vi;\n \n #define MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n-#define INF 1000000000\n+#define INF const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n vi p;\n \n"
                },
                {
                    "date": 1726656333419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n typedef std::vector<int> vi;\n \n #define MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n-#define INF const int inf = 5 * 1e+05;\n+const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n vi p;\n \n"
                },
                {
                    "date": 1726656346635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n \n typedef std::vector<int> vi;\n \n-#define MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+const int MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n vi p;\n"
                },
                {
                    "date": 1726656351694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+#include <vector>\n+\n+namespace algorithms::graph::max_flow\n+{\n+\n+typedef std::vector<int> vi;\n+\n+const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+const int inf = 5 * 1e+05;\n+\n+int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n+vi p;\n+\n+void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n+  if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n+  else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+                         res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n+}\n"
                },
                {
                    "date": 1726656368096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,28 +8,10 @@\n const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n-vi p;\n \n-void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n-  if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n-  else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-                         res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n-}\n-#include <vector>\n \n-namespace algorithms::graph::max_flow\n-{\n-\n-typedef std::vector<int> vi;\n-\n-const int MAX_V 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n-const int inf = 5 * 1e+05;\n-\n-int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n-vi p;\n-\n void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n   if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n   else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n"
                },
                {
                    "date": 1726656376233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n-int res[MAX_V][MAX_V], mf, f, s, t;                          // global variables\n+int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n \n void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n   if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n"
                },
                {
                    "date": 1726656387143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n-\n-void augment(int v, int minEdge) {     // traverse BFS spanning tree from s to t\n+void augment(int v, int minEdge) \n+{     // traverse BFS spanning tree from s to t\n   if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n   else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656404859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n void augment(int v, int minEdge) \n-{     // traverse BFS spanning tree from s to t\n+{  // traverse BFS spanning tree from s to t\n   if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n   else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656411689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,8 @@\n int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n-  if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n+    if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n   else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656419672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n \n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n     if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n-  else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+     else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656438456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,8 @@\n \n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n     if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n-     else if (p[v] != -1) { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+     else if (p[v] != -1) \n+     { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n                          res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656447507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,8 @@\n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n     if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n      else if (p[v] != -1) \n-     { augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-                         res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n+     { \n+        augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+        res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n }\n"
                },
                {
                    "date": 1726656454718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,6 +15,7 @@\n     if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n      else if (p[v] != -1) \n      { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= f; res[v][p[v]] += f; }       // update\n+        res[p[v]][v] -= f; res[v][p[v]] += f; \n+     }   // update\n }\n"
                },
                {
                    "date": 1726656476970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n-    if (v == s) { f = minEdge; return; }  // record minEdge in a global variable f\n+    if (v == s) \n+    { f = minEdge; return; }  // record minEdge in a global variable f\n      else if (p[v] != -1) \n      { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= f; res[v][p[v]] += f; \n-     }   // update\n+        res[p[v]][v] -= f; res[v][p[v]] += f; // update\n+     }\n }\n"
                },
                {
                    "date": 1726656484424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n void augment(int v, int minEdge) \n {  // traverse BFS spanning tree from s to t\n     if (v == s) \n     { f = minEdge; return; }  // record minEdge in a global variable f\n-     else if (p[v] != -1) \n-     { \n+    else if (p[v] != -1) \n+    { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n         res[p[v]][v] -= f; res[v][p[v]] += f; // update\n-     }\n+    }\n }\n"
                },
                {
                    "date": 1726656496710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n \n-void augment(int v, int minEdge) \n+void augment(int v, int minEdge)\n {  // traverse BFS spanning tree from s to t\n     if (v == s) \n     { f = minEdge; return; }  // record minEdge in a global variable f\n     else if (p[v] != -1) \n"
                },
                {
                    "date": 1726656513093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n-int res[MAX_V][MAX_V], mf, f, s, t; vi p; // global variables\n+int res[MAX_V][MAX_V], mf, f, source, t; vi p; // global variables\n \n void augment(int v, int minEdge)\n {  // traverse BFS spanning tree from s to t\n     if (v == s) \n"
                },
                {
                    "date": 1726656520065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n-int res[MAX_V][MAX_V], mf, f, source, t; vi p; // global variables\n+int res[MAX_V][MAX_V], mf, f, source, sink; vi p; // global variables\n \n void augment(int v, int minEdge)\n {  // traverse BFS spanning tree from s to t\n     if (v == s) \n"
                },
                {
                    "date": 1726656536873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+#include <vector>\n+\n+namespace algorithms::graph::max_flow\n+{\n+\n+typedef std::vector<int> vi;\n+\n+const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+const int inf = 5 * 1e+05;\n+\n+int res[MAX_V][MAX_V], mf, flow, source, sink; vi p; // global variables\n+\n+void augment(int v, int minEdge)\n+{  // traverse BFS spanning tree from s to t\n+    if (v == source) \n+    { f = minEdge; return; }  // record minEdge in a global variable f\n+    else if (p[v] != -1) \n+    { \n+        augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+        res[p[v]][v] -= f; res[v][p[v]] += f; // update\n+    }\n+}\n"
                },
                {
                    "date": 1726656542682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n const int inf = 5 * 1e+05;\n \n-int res[MAX_V][MAX_V], mf, flow, source, sink; vi p; // global variables\n+int res[MAX_V][MAX_V], max_flow, flow, source, sink; vi p; // global variables\n \n void augment(int v, int minEdge)\n {  // traverse BFS spanning tree from s to t\n     if (v == source) \n@@ -19,26 +19,4 @@\n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n         res[p[v]][v] -= f; res[v][p[v]] += f; // update\n     }\n }\n-#include <vector>\n-\n-namespace algorithms::graph::max_flow\n-{\n-\n-typedef std::vector<int> vi;\n-\n-const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n-const int inf = 5 * 1e+05;\n-\n-int res[MAX_V][MAX_V], mf, f, source, sink; vi p; // global variables\n-\n-void augment(int v, int minEdge)\n-{  // traverse BFS spanning tree from s to t\n-    if (v == s) \n-    { f = minEdge; return; }  // record minEdge in a global variable f\n-    else if (p[v] != -1) \n-    { \n-        augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= f; res[v][p[v]] += f; // update\n-    }\n-}\n"
                },
                {
                    "date": 1726656548684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \n void augment(int v, int minEdge)\n {  // traverse BFS spanning tree from s to t\n     if (v == source) \n-    { f = minEdge; return; }  // record minEdge in a global variable f\n+    { flow = minEdge; return; }  // record minEdge in a global variable f\n     else if (p[v] != -1) \n     { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n         res[p[v]][v] -= f; res[v][p[v]] += f; // update\n"
                },
                {
                    "date": 1726656558428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,7 @@\n     { flow = minEdge; return; }  // record minEdge in a global variable f\n     else if (p[v] != -1) \n     { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= f; res[v][p[v]] += f; // update\n+        res[p[v]][v] -= flow; res[v][p[v]] += f; // update\n     }\n }\n"
                },
                {
                    "date": 1726656564693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,8 @@\n     { flow = minEdge; return; }  // record minEdge in a global variable f\n     else if (p[v] != -1) \n     { \n         augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= flow; res[v][p[v]] += f; // update\n+        res[p[v]][v] -= flow; \n+        res[v][p[v]] += flow; // update\n     }\n }\n"
                },
                {
                    "date": 1726656717431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,4 +20,7 @@\n         res[p[v]][v] -= flow; \n         res[v][p[v]] += flow; // update\n     }\n }\n+\n+\n+\n"
                },
                {
                    "date": 1726656733896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,8 @@\n         res[p[v]][v] -= flow; \n         res[v][p[v]] += flow; // update\n     }\n }\n+}\n \n \n \n"
                },
                {
                    "date": 1726656740737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,19 +9,19 @@\n const int inf = 5 * 1e+05;\n \n int res[MAX_V][MAX_V], max_flow, flow, source, sink; vi p; // global variables\n \n-void augment(int v, int minEdge)\n-{  // traverse BFS spanning tree from s to t\n-    if (v == source) \n-    { flow = minEdge; return; }  // record minEdge in a global variable f\n-    else if (p[v] != -1) \n-    { \n-        augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-        res[p[v]][v] -= flow; \n-        res[v][p[v]] += flow; // update\n+    void augment(int v, int minEdge)\n+    {  // traverse BFS spanning tree from s to t\n+        if (v == source) \n+        { flow = minEdge; return; }  // record minEdge in a global variable f\n+        else if (p[v] != -1) \n+        { \n+            augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+            res[p[v]][v] -= flow; \n+            res[v][p[v]] += flow; // update\n+        }\n     }\n }\n-}\n \n \n \n"
                },
                {
                    "date": 1726656756617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n \n-namespace algorithms::graph::max_flow\n+namespace algorithms::graph::mf\n {\n \n typedef std::vector<int> vi;\n \n"
                },
                {
                    "date": 1726656767548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n             res[p[v]][v] -= flow; \n             res[v][p[v]] += flow; // update\n         }\n     }\n+\n+    void \n }\n \n \n \n"
                },
                {
                    "date": 1726656787807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+#include <vector>\n+\n+namespace algorithms::graph::mf\n+{\n+\n+typedef std::vector<int> vi;\n+\n+const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+const int inf = 5 * 1e+05;\n+\n+int res[MAX_V][MAX_V], max_flow, flow, source, sink; vi p; // global variables\n+\n+    void augment(int v, int minEdge)\n+    {  // traverse BFS spanning tree from s to t\n+        if (v == source) \n+        { flow = minEdge; return; }  // record minEdge in a global variable f\n+        else if (p[v] != -1) \n+        { \n+            augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+            res[p[v]][v] -= flow; \n+            res[v][p[v]] += flow; // update\n+        }\n+    }\n+\n+    void edmonds_karp() \n+    {\n+        \n+    }\n+}\n+\n+\n+\n"
                },
                {
                    "date": 1726656797495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,33 +29,4 @@\n }\n \n \n \n-#include <vector>\n-\n-namespace algorithms::graph::mf\n-{\n-\n-typedef std::vector<int> vi;\n-\n-const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n-const int inf = 5 * 1e+05;\n-\n-int res[MAX_V][MAX_V], max_flow, flow, source, sink; vi p; // global variables\n-\n-    void augment(int v, int minEdge)\n-    {  // traverse BFS spanning tree from s to t\n-        if (v == source) \n-        { flow = minEdge; return; }  // record minEdge in a global variable f\n-        else if (p[v] != -1) \n-        { \n-            augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n-            res[p[v]][v] -= flow; \n-            res[v][p[v]] += flow; // update\n-        }\n-    }\n-\n-    void \n-}\n-\n-\n-\n"
                },
                {
                    "date": 1726656832909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,26 @@\n     }\n \n     void edmonds_karp() \n     {\n-        \n+         mf = 0;                                              // mf stands for max_flow\n+  while (1) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n+    f = 0;\n+    // run BFS, compare with the original BFS shown in Section 4.2.2\n+    vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n+    p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n+    while (!q.empty()) {\n+      int u = q.front(); q.pop();\n+      if (u == t) break;      // immediately stop BFS if we already reach sink t\n+      for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n+        if (res[u][v] > 0 && dist[v] == INF)\n+          dist[v] = dist[u] + 1, q.push(v), p[v] = u;\n     }\n+    augment(t, INF);     // find the min edge weight `f' along this path, if any\n+    if (f == 0) break;      // we cannot send any more flow (`f' = 0), terminate\n+    mf += f;                 // we can still send a flow, increase the max flow!\n+  }\n+    }\n }\n \n \n \n"
                },
                {
                    "date": 1726656838623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     }\n \n     void edmonds_karp() \n     {\n-         mf = 0;                                              // mf stands for max_flow\n+         max_flow = 0;                                              // mf stands for max_flow\n   while (1) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n     f = 0;\n     // run BFS, compare with the original BFS shown in Section 4.2.2\n     vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n"
                },
                {
                    "date": 1726656844018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n     void edmonds_karp() \n     {\n          max_flow = 0;                                              // mf stands for max_flow\n-  while (1) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n+         while (1) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n     f = 0;\n     // run BFS, compare with the original BFS shown in Section 4.2.2\n     vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n"
                },
                {
                    "date": 1726656849720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n     void edmonds_karp() \n     {\n          max_flow = 0;                                              // mf stands for max_flow\n-         while (1) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n+         while (true) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n     f = 0;\n     // run BFS, compare with the original BFS shown in Section 4.2.2\n     vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n"
                },
                {
                    "date": 1726656864544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,11 @@\n \n     void edmonds_karp() \n     {\n          max_flow = 0;                                              // mf stands for max_flow\n-         while (true) {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n-    f = 0;\n+         while (true) \n+         {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n+             f = 0;\n     // run BFS, compare with the original BFS shown in Section 4.2.2\n     vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n"
                },
                {
                    "date": 1726656871667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n     {\n          max_flow = 0;                                              // mf stands for max_flow\n          while (true) \n          {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n-             f = 0;\n-    // run BFS, compare with the original BFS shown in Section 4.2.2\n+             flow = 0;\n+             // run BFS, compare with the original BFS shown in Section 4.2.2\n     vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n       int u = q.front(); q.pop();\n"
                },
                {
                    "date": 1726656879344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n          while (true) \n          {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n              flow = 0;\n              // run BFS, compare with the original BFS shown in Section 4.2.2\n-    vi dist(MAX_V, INF); dist[s] = 0; queue<int> q; q.push(s);\n+             vi dist(MAX_V, inf); dist[s] = 0; queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n"
                },
                {
                    "date": 1726656886751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n          while (true) \n          {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n              flow = 0;\n              // run BFS, compare with the original BFS shown in Section 4.2.2\n-             vi dist(MAX_V, inf); dist[s] = 0; queue<int> q; q.push(s);\n+             vi dist(MAX_V, inf); \n+             dist[s] = 0; \n+             std::queue<int> q; q.push(s);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n"
                },
                {
                    "date": 1726656893327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n              flow = 0;\n              // run BFS, compare with the original BFS shown in Section 4.2.2\n              vi dist(MAX_V, inf); \n              dist[s] = 0; \n-             std::queue<int> q; q.push(s);\n+             std::queue<int> q; \n+             q.push(source);\n     p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n"
                },
                {
                    "date": 1726656901537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n #include <vector>\n+#include \n \n namespace algorithms::graph::mf\n {\n \n"
                },
                {
                    "date": 1726656908664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n-#include \n+#include <queue>\n \n namespace algorithms::graph::mf\n {\n \n"
                },
                {
                    "date": 1726656917310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n              vi dist(MAX_V, inf); \n              dist[s] = 0; \n              std::queue<int> q; \n              q.push(source);\n-    p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n+             p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n     while (!q.empty()) {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n       for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n"
                },
                {
                    "date": 1726656952152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n              dist[s] = 0; \n              std::queue<int> q; \n              q.push(source);\n              p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n-    while (!q.empty()) {\n+while (!q.empty()) {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n       for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n         if (res[u][v] > 0 && dist[v] == INF)\n"
                },
                {
                    "date": 1726656959242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n              dist[s] = 0; \n              std::queue<int> q; \n              q.push(source);\n              p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n-while (!q.empty()) {\n+             while (!q.empty()) \n+             {\n       int u = q.front(); q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n       for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n         if (res[u][v] > 0 && dist[v] == INF)\n"
                },
                {
                    "date": 1726656964549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,10 @@\n              q.push(source);\n              p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n              while (!q.empty()) \n              {\n-      int u = q.front(); q.pop();\n+                int u = q.front(); \n+                q.pop();\n       if (u == t) break;      // immediately stop BFS if we already reach sink t\n       for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n         if (res[u][v] > 0 && dist[v] == INF)\n           dist[v] = dist[u] + 1, q.push(v), p[v] = u;\n"
                },
                {
                    "date": 1726656971309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n              while (!q.empty()) \n              {\n                 int u = q.front(); \n                 q.pop();\n-                if (u == t) break;      // immediately stop BFS if we already reach sink t\n+                if (u == sink) break;      // immediately stop BFS if we already reach sink t\n       for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n         if (res[u][v] > 0 && dist[v] == INF)\n           dist[v] = dist[u] + 1, q.push(v), p[v] = u;\n     }\n"
                },
                {
                    "date": 1726657075407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+#include <vector>\n+#include <queue>\n+\n+namespace algorithms::graph::mf\n+{\n+\n+typedef std::vector<int> vi;\n+\n+const int MAX_V = 40 // enough for sample graph in Figure 4.21/4.22/4.23/UVa 259\n+const int inf = 5 * 1e+05;\n+\n+int res[MAX_V][MAX_V], max_flow, flow, source, sink; vi p; // global variables\n+\n+    void augment(int v, int minEdge)\n+    {  // traverse BFS spanning tree from s to t\n+        if (v == source) \n+        { flow = minEdge; return; }  // record minEdge in a global variable f\n+        else if (p[v] != -1) \n+        { \n+            augment(p[v], min(minEdge, res[p[v]][v])); // recursive\n+            res[p[v]][v] -= flow; \n+            res[v][p[v]] += flow; // update\n+        }\n+    }\n+\n+    void edmonds_karp() \n+    {\n+         max_flow = 0;                                              // mf stands for max_flow\n+         while (true) \n+         {              // O(VE^2) (actually O(V^3E) Edmonds Karp's algorithm\n+             flow = 0;\n+             // run BFS, compare with the original BFS shown in Section 4.2.2\n+             vi dist(MAX_V, inf); \n+             dist[s] = 0; \n+             std::queue<int> q; \n+             q.push(source);\n+             p.assign(MAX_V, -1);           // record the BFS spanning tree, from s to t!\n+             while (!q.empty()) \n+             {\n+                int u = q.front(); \n+                q.pop();\n+                if (u == sink) break;      // immediately stop BFS if we already reach sink t\n+                for (int v = 0; v < MAX_V; v++)                 // note: this part is slow\n+                  if (res[u][v] > 0 && dist[v] == inf)\n+                    dist[v] = dist[u] + 1, q.push(v), p[v] = u;\n+             }\n+             augment(sink, inf);     // find the min edge weight `f' along this path, if any\n+             if (flow == 0) break;      // we cannot send any more flow (`f' = 0), terminate\n+             max_flow += flow;                 // we can still send a flow, increase the max flow!\n+  }\n+    }\n+}\n+\n+\n+\n"
                }
            ],
            "date": 1726656210495,
            "name": "Commit-0",
            "content": "\nnamespace \n"
        }
    ]
}