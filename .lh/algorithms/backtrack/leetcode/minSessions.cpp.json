{
    "sourceFile": "algorithms/backtrack/leetcode/minSessions.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1722861948305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722861959155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace algorithms::backtrack::leetcode\n {\n-    \n+    // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722861996254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,5 +2,8 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+       int minSessions(vector<int>& tasks, int sessionTime) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862003884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,8 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n-       int minSessions(vector<int>& tasks, int sessionTime) {\n+    int minSessions(vector<int> tasks, int session) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862009438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,8 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n-    int minSessions(vector<int> tasks, int session) {\n+    int minSessions(std::vector<int> tasks, int session) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862017133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace algorithms::backtrack::leetcode\n {\n     // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n     int minSessions(std::vector<int> tasks, int session) {\n"
                },
                {
                    "date": 1722862026543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+    int minSessions(std::vector<int> tasks, int session) \n+    {\n+        return 0;    \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724217656089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,10 @@\n #include <vector>\n \n namespace algorithms::backtrack::leetcode\n {\n-    // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+    /** */ https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n     int minSessions(std::vector<int> tasks, int session) \n     {\n         return 0;    \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode\n-{\n-    // https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n-    int minSessions(std::vector<int> tasks, int session) {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724217661197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #include <vector>\n \n namespace algorithms::backtrack::leetcode\n {\n-    /** */ https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+    /** https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+     * /\n     int minSessions(std::vector<int> tasks, int session) \n     {\n         return 0;    \n     }\n"
                },
                {
                    "date": 1724217667873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     /** https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n-     * /\n+     * \n+    * */\n     int minSessions(std::vector<int> tasks, int session) \n     {\n         return 0;    \n     }\n"
                },
                {
                    "date": 1724217674656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n namespace algorithms::backtrack::leetcode\n {\n     /** https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n      * \n-    * */\n+     * \n+     * */\n     int minSessions(std::vector<int> tasks, int session) \n     {\n         return 0;    \n     }\n"
                },
                {
                    "date": 1724217680907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n namespace algorithms::backtrack::leetcode\n {\n     /** https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n-     * \n      * There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.\n \n You should finish the given tasks in a way that satisfies the following conditions:\n \n"
                },
                {
                    "date": 1724217694097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,23 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode\n+{\n+    /** https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks\n+     * There are n tasks assigned to you. \n+     * The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.\n+\n+You should finish the given tasks in a way that satisfies the following conditions:\n+\n+If you start a task in a work session, you must complete it in the same work session.\n+You can start a new task immediately after finishing the previous one.\n+You may complete the tasks in any order.\n+Given tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.\n+\n+The tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].\n+     * \n+     * */\n+    int minSessions(std::vector<int> tasks, int session) \n+    {\n+        return 0;    \n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1722861948305,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::backtrack::leetcode\n{\n    \n}"
        }
    ]
}