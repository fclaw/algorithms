{
    "sourceFile": "algorithms/array/leetcode/canonicalSubsets.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1720895192009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720895197877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,24 +7,8 @@\n        https://leetcode.com/problems/subsets\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-    std::vector<std::vector<int>> rec(std::vector<int> xs, int i, int mask)\n-    {\n-        int n = xs.size();\n-        if(i == n)\n-          return;\n-\n-        if(mask & (1 << xs[i]) == 1)\n-        {\n-           auto ys = rec(xs, i + 1, mask | (1 << xs[i]));\n-           return ys.push_back[i]\n-        }\n-\n-        set.pop_back();\n-        rec(xs, i + 1, mask, xxs);\n-    }\n-\n     std::vector<std::vector<int>> canonicalSubsets(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, 0, xxs);\n"
                },
                {
                    "date": 1720895218353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n namespace algorithms::array::leetcode\n {\n     /* \n        https://leetcode.com/problems/subsets\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       Given an integer array nums unique, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     std::vector<std::vector<int>> canonicalSubsets(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720895226221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n namespace algorithms::array::leetcode\n {\n     /* \n        https://leetcode.com/problems/subsets\n-       Given an integer array nums of unique, return all possible subsets (the power set).\n+       Given an integer array nums of unique elements, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     std::vector<std::vector<int>> canonicalSubsets(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720895235044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     std::vector<std::vector<int>> canonicalSubsets(std::vector<int> xs) \n     { \n-        std::vector<std::vector<int>> xxs = {};\n+        std::vector<std::vector<int>> xxs = {}\n+        \n         rec(xs, 0, 0, xxs);\n         return xxs;\n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720895192009,
            "name": "Commit-0",
            "content": "#include <vector>\n\n\nnamespace algorithms::array::leetcode\n{\n    /* \n       https://leetcode.com/problems/subsets\n       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n       The solution set must not contain duplicate subsets. Return the solution in any order.\n    */\n    std::vector<std::vector<int>> rec(std::vector<int> xs, int i, int mask)\n    {\n        int n = xs.size();\n        if(i == n)\n          return;\n\n        if(mask & (1 << xs[i]) == 1)\n        {\n           auto ys = rec(xs, i + 1, mask | (1 << xs[i]));\n           return ys.push_back[i]\n        }\n\n        set.pop_back();\n        rec(xs, i + 1, mask, xxs);\n    }\n\n    std::vector<std::vector<int>> canonicalSubsets(std::vector<int> xs) \n    { \n        std::vector<std::vector<int>> xxs = {};\n        rec(xs, 0, 0, xxs);\n        return xxs;\n    }\n}"
        }
    ]
}