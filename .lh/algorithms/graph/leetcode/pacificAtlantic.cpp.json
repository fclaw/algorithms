{
    "sourceFile": "algorithms/graph/leetcode/pacificAtlantic.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 46,
            "patches": [
                {
                    "date": 1723363477262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723363491384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \n \n+namespace algorithms::graph::leetcode::\n \n \n-vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n+    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363499176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \n \n-namespace algorithms::graph::leetcode::\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n \n \n     vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n         \n"
                },
                {
                    "date": 1723363507686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n \n \n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n-\n-\n-    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n-        \n-    }\n\\ No newline at end of file\n+    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n+    {     \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363520537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n \n \n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n+\n+\n+\n     vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363531944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n+#include <vector>\n \n-\n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n+using land = vector<vector<int>>\n \n-\n     vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363538703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n-using land = vector<vector<int>>\n+using land = std::vector<std::vector<int>>\n \n     vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n     {     \n     }\n"
                },
                {
                    "date": 1723363552742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n-using land = std::vector<std::vector<int>>\n+using island = std::vector<std::vector<int>>;\n \n     vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n     {     \n     }\n"
                },
                {
                    "date": 1723363560718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n \n using island = std::vector<std::vector<int>>;\n \n-    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights)\n+    vector<vector<int>> pacificAtlantic(const island& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363568228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n using island = std::vector<std::vector<int>>;\n+using \n \n     vector<vector<int>> pacificAtlantic(const island& heights)\n     {     \n     }\n"
                },
                {
                    "date": 1723363574679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n using island = std::vector<std::vector<int>>;\n-using \n+using heights = \n \n     vector<vector<int>> pacificAtlantic(const island& heights)\n     {     \n     }\n"
                },
                {
                    "date": 1723363582064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n using island = std::vector<std::vector<int>>;\n-using heights = \n+using heights = std::vector<std::vector<int>>;\n \n     vector<vector<int>> pacificAtlantic(const island& heights)\n     {     \n     }\n"
                },
                {
                    "date": 1723363591260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,12 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using island = std::vector<std::vector<int>>;\n+using heights = std::vector<std::vector<int>>;\n+\n+    vector<vector<int>> pacificAtlantic(const island& heights)\n+    {     \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363603285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,20 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    vector<vector<int>> pacificAtlantic(const island& heights)\n+     pacificAtlantic(const island& heights)\n     {     \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using island = std::vector<std::vector<int>>;\n-using heights = std::vector<std::vector<int>>;\n-\n-    vector<vector<int>> pacificAtlantic(const island& heights)\n-    {     \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363612324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-     pacificAtlantic(const island& heights)\n+    heights flowpacificAtlantic(const island& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363618563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    heights flowpacificAtlantic(const island& heights)\n+    heights flowTo[acificAtlantic(const island& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363626268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    heights flowTo[acificAtlantic(const island& heights)\n+    heights flowToPacificAtlantic(const island& heights)\n     {     \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363632784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    heights flowToPacificAtlantic(const island& heights)\n-    {     \n+    heights flowToPacificAtlantic(const island& )\n+    {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363637850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    heights flowToPacificAtlantic(const island& )\n+    heights flowToPacificAtlantic(const island& isl)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363651095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using island = std::vector<std::vector<int>>;\n+using heights = std::vector<std::vector<int>>;\n+\n+    /**/\n+    heights flowToPacificAtlantic(const island& isl)\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363656844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,12 @@\n \n using island = std::vector<std::vector<int>>;\n using heights = std::vector<std::vector<int>>;\n \n-    /**/\n+    /**\n+     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n+     */\n     heights flowToPacificAtlantic(const island& isl)\n     {\n         return {};\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using island = std::vector<std::vector<int>>;\n-using heights = std::vector<std::vector<int>>;\n-\n-    heights flowToPacificAtlantic(const island& isl)\n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363663849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,15 @@\n using heights = std::vector<std::vector<int>>;\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n+     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n+\n+The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n+\n+The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n+\n+Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     heights flowToPacificAtlantic(const island& isl)\n     {\n         return {};\n"
                },
                {
                    "date": 1723363694329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n using heights = std::vector<std::vector<int>>;\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n-     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n+     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     *  The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n \n The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n \n The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n"
                },
                {
                    "date": 1723363701825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n      *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     *  The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n+     *  The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n \n The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n \n The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n"
                },
                {
                    "date": 1723363710260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n      *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n      *  The Pacific Ocean touches the island's left and top edges, \n      * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n \n-The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n-\n The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n \n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n"
                },
                {
                    "date": 1723363718224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n      *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n      *  The Pacific Ocean touches the island's left and top edges, \n      * and the Atlantic Ocean touches the island's right and bottom edges.\n      * The island is partitioned into a grid of square cells. \n-     * You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n \n The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n \n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n"
                },
                {
                    "date": 1723363724457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,10 @@\n      * and the Atlantic Ocean touches the island's right and bottom edges.\n      * The island is partitioned into a grid of square cells. \n      * You are given an m x n integer matrix heights where heights[r][c] \n      * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n \n-The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n-\n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     heights flowToPacificAtlantic(const island& isl)\n     {\n"
                },
                {
                    "date": 1723363734171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n      * and the Atlantic Ocean touches the island's right and bottom edges.\n      * The island is partitioned into a grid of square cells. \n      * You are given an m x n integer matrix heights where heights[r][c] \n      * represents the height above sea level of the cell at coordinate (r, c).\n-     * The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n \n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     heights flowToPacificAtlantic(const island& isl)\n"
                },
                {
                    "date": 1723363745551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n      * The island is partitioned into a grid of square cells. \n      * You are given an m x n integer matrix heights where heights[r][c] \n      * represents the height above sea level of the cell at coordinate (r, c).\n      * The island receives a lot of rain, and the rain water can flow to neighboring cells \n-     * directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n \n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     heights flowToPacificAtlantic(const island& isl)\n"
                },
                {
                    "date": 1723363753023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,10 @@\n      * You are given an m x n integer matrix heights where heights[r][c] \n      * represents the height above sea level of the cell at coordinate (r, c).\n      * The island receives a lot of rain, and the rain water can flow to neighboring cells \n      * directly north, south, east, and west if the neighboring cell's height \n-     * is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n \n Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     heights flowToPacificAtlantic(const island& isl)\n"
                },
                {
                    "date": 1723363760686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using island = std::vector<std::vector<int>>;\n+using heights = std::vector<std::vector<int>>;\n+\n+    /**\n+     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n+     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     *  The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n+     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n+     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n+     */\n+    heights flowToPacificAtlantic(const island& isl)\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363768469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n using island = std::vector<std::vector<int>>;\n-using heights = std::vector<std::vector<int>>;\n+using coords = std::vector<std::vector<int>>;\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n      *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n@@ -24,33 +24,5 @@\n     heights flowToPacificAtlantic(const island& isl)\n     {\n         return {};\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using island = std::vector<std::vector<int>>;\n-using heights = std::vector<std::vector<int>>;\n-\n-    /**\n-     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n-     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     *  The Pacific Ocean touches the island's left and top edges, \n-     * and the Atlantic Ocean touches the island's right and bottom edges.\n-     * The island is partitioned into a grid of square cells. \n-     * You are given an m x n integer matrix heights where heights[r][c] \n-     * represents the height above sea level of the cell at coordinate (r, c).\n-     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n-     * directly north, south, east, and west if the neighboring cell's height \n-     * is less than or equal to the current cell's height. \n-     * Water can flow from any cell adjacent to an ocean into the ocean.\n-\n-Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n-     */\n-    heights flowToPacificAtlantic(const island& isl)\n-    {\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363776992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::pacificAtlantic\n {\n \n-using island = std::vector<std::vector<int>>;\n+using heights = std::vector<std::vector<int>>;\n using coords = std::vector<std::vector<int>>;\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n@@ -20,9 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    heights flowToPacificAtlantic(const island& isl)\n+    coords flowToPacificAtlantic(const island& isl)\n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363783050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    coords flowToPacificAtlantic(const island& isl)\n+    coords flowToPacificAtlantic(const heights& isl)\n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363791713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    coords flowToPacificAtlantic(const heights& isl)\n+    coords flowToPacificAtlantic(const heights& )\n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363798565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+using coords = std::vector<std::vector<int>>;\n+\n+    /**\n+     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n+     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     *  The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n+     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n+     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n+     */\n+    coords flowToPacificAtlantic(const heights& )\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363812651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,37 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    coords flowToPacificAtlantic(const heights& )\n+    coords flowToPacificAtlantic(const heights& heights)\n     {\n         return {};\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using heights = std::vector<std::vector<int>>;\n-using coords = std::vector<std::vector<int>>;\n-\n-    /**\n-     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n-     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     *  The Pacific Ocean touches the island's left and top edges, \n-     * and the Atlantic Ocean touches the island's right and bottom edges.\n-     * The island is partitioned into a grid of square cells. \n-     * You are given an m x n integer matrix heights where heights[r][c] \n-     * represents the height above sea level of the cell at coordinate (r, c).\n-     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n-     * directly north, south, east, and west if the neighboring cell's height \n-     * is less than or equal to the current cell's height. \n-     * Water can flow from any cell adjacent to an ocean into the ocean.\n-     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n-     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n-     */\n-    coords flowToPacificAtlantic(const heights& )\n-    {\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363841912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    coords flowToPacificAtlantic(const heights& heights)\n+    coords flowToPacificAtlantic(const heights& )\n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363849061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    coords flowToPacificAtlantic(const heights& )\n+    coords flowToPacificAtlantic(const heights& ps)\n     {\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363970886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n using coords = std::vector<std::vector<int>>;\n \n     /**\n      *   https://leetcode.com/problems/pacific-atlantic-water-flow\n-     *  There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     *  The Pacific Ocean touches the island's left and top edges, \n+     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     * The Pacific Ocean touches the island's left and top edges, \n      * and the Atlantic Ocean touches the island's right and bottom edges.\n      * The island is partitioned into a grid of square cells. \n      * You are given an m x n integer matrix heights where heights[r][c] \n      * represents the height above sea level of the cell at coordinate (r, c).\n"
                },
                {
                    "date": 1723363977580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+using coords = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/pacific-atlantic-water-flow\n+     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     * The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n+     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n+     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n+     */\n+    coords flowToPacificAtlantic(const heights& ps)\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723363985867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,28 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+using coords = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/pacific-atlantic-water-flow\n+     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     * The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n+     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n+     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n+     */\n+    coords flowToPacificAtlantic(const heights& ps)\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723382833239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,65 +20,10 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n+    \n     coords flowToPacificAtlantic(const heights& ps)\n     {\n         return {};\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using heights = std::vector<std::vector<int>>;\n-using coords = std::vector<std::vector<int>>;\n-\n-    /**\n-     * https://leetcode.com/problems/pacific-atlantic-water-flow\n-     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     * The Pacific Ocean touches the island's left and top edges, \n-     * and the Atlantic Ocean touches the island's right and bottom edges.\n-     * The island is partitioned into a grid of square cells. \n-     * You are given an m x n integer matrix heights where heights[r][c] \n-     * represents the height above sea level of the cell at coordinate (r, c).\n-     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n-     * directly north, south, east, and west if the neighboring cell's height \n-     * is less than or equal to the current cell's height. \n-     * Water can flow from any cell adjacent to an ocean into the ocean.\n-     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n-     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n-     */\n-    coords flowToPacificAtlantic(const heights& ps)\n-    {\n-        return {};\n-    }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::pacificAtlantic\n-{\n-\n-using heights = std::vector<std::vector<int>>;\n-using coords = std::vector<std::vector<int>>;\n-\n-    /**\n-     *   https://leetcode.com/problems/pacific-atlantic-water-flow\n-     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n-     * The Pacific Ocean touches the island's left and top edges, \n-     * and the Atlantic Ocean touches the island's right and bottom edges.\n-     * The island is partitioned into a grid of square cells. \n-     * You are given an m x n integer matrix heights where heights[r][c] \n-     * represents the height above sea level of the cell at coordinate (r, c).\n-     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n-     * directly north, south, east, and west if the neighboring cell's height \n-     * is less than or equal to the current cell's height. \n-     * Water can flow from any cell adjacent to an ocean into the ocean.\n-     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n-     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n-     */\n-    coords flowToPacificAtlantic(const heights& ps)\n-    {\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723382849575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     \n+        std::vector<std::pair<int, int>> dirs = \n+      { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n     coords flowToPacificAtlantic(const heights& ps)\n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1723382857297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n      * Water can flow from any cell adjacent to an ocean into the ocean.\n      * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n-    \n+    int N;\n+    int M;\n         std::vector<std::pair<int, int>> dirs = \n       { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n     coords flowToPacificAtlantic(const heights& ps)\n     {\n"
                },
                {
                    "date": 1723382864385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n      * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n      */\n     int M;\n     int N;\n-        std::vector<std::pair<int, int>> dirs = \n+    std::vector<std::pair<int, int>> dirs = \n       { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };\n     coords flowToPacificAtlantic(const heights& ps)\n     {\n         return {};\n"
                },
                {
                    "date": 1723382886734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::pacificAtlantic\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+using coords = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/pacific-atlantic-water-flow\n+     * There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. \n+     * The Pacific Ocean touches the island's left and top edges, \n+     * and the Atlantic Ocean touches the island's right and bottom edges.\n+     * The island is partitioned into a grid of square cells. \n+     * You are given an m x n integer matrix heights where heights[r][c] \n+     * represents the height above sea level of the cell at coordinate (r, c).\n+     * The island receives a lot of rain, and the rain water can flow to neighboring cells \n+     * directly north, south, east, and west if the neighboring cell's height \n+     * is less than or equal to the current cell's height. \n+     * Water can flow from any cell adjacent to an ocean into the ocean.\n+     * Return a 2D list of grid coordinates result where result[i] = [ri, ci] \n+     * denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\n+     */\n+    int M;\n+    int N;\n+    std::vector<std::pair<int, int>> pacific = {};\n+    coords flowToPacificAtlantic(const heights& ps)\n+    {\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1723363477262,
            "name": "Commit-0",
            "content": "\n\n\n\nvector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n        \n    }"
        }
    ]
}