{
    "sourceFile": "algorithms/graph/leetcode/isBipartite.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1723304439246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723304519263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n-namespace algorithms::graph::leetcode::flood_fill\n+namespace algorithms::graph::leetcode::bipartite\n {\n-    \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304543234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\n+// https://leetcode.com/problems/is-graph-bipartite\n namespace algorithms::graph::leetcode::bipartite\n {\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304562868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n \n // https://leetcode.com/problems/is-graph-bipartite\n+/**\n+ * Formally, a graph G = (V, E) is bipartite if and only if its vertex set V can be partitioned into two non-empty subsets X and Y, such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n+ */\n namespace algorithms::graph::leetcode::bipartite\n {\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304585855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n \n // https://leetcode.com/problems/is-graph-bipartite\n /**\n- * Formally, a graph G = (V, E) is bipartite if and only if its vertex set V can be partitioned into two non-empty subsets X and Y, such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n+ * Formally, a graph G = (V, E) is bipartite if and only if\n+ * its vertex set V can be partitioned into two non-empty subsets X and Y, such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n \n"
                },
                {
                    "date": 1723304592313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n \n // https://leetcode.com/problems/is-graph-bipartite\n /**\n  * Formally, a graph G = (V, E) is bipartite if and only if\n- * its vertex set V can be partitioned into two non-empty subsets X and Y, such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n+ * its vertex set V can be partitioned into two non-empty subsets X and Y, \n+ * such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n \n"
                },
                {
                    "date": 1723304598276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n // https://leetcode.com/problems/is-graph-bipartite\n /**\n  * Formally, a graph G = (V, E) is bipartite if and only if\n  * its vertex set V can be partitioned into two non-empty subsets X and Y, \n- * such that every edge in E has one endpoint in X and the other endpoint in Y. This partition of vertices is also known as bi-partition\n+ * such that every edge in E has one endpoint in X and the other endpoint in Y. \n+ * This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n \n"
                },
                {
                    "date": 1723304603522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,6 @@\n  * This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n-\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304615823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,8 @@\n  * This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n-    \n+    bool isBipartite(vector<vector<int>>& graph) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304636967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,11 @@\n  * This partition of vertices is also known as bi-partition\n  */\n namespace algorithms::graph::leetcode::bipartite\n {\n-    bool isBipartite(vector<vector<int>>& graph) {\n-        \n+\n+using graph = std::vector<std::vector<int>>;\n+\n+    bool isBipartite(vector<vector<int>>& graph) \n+    {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304647566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n+#include <vector>\n \n+\n // https://leetcode.com/problems/is-graph-bipartite\n /**\n  * Formally, a graph G = (V, E) is bipartite if and only if\n  * its vertex set V can be partitioned into two non-empty subsets X and Y, \n"
                },
                {
                    "date": 1723304657697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n #include <vector>\n \n-\n // https://leetcode.com/problems/is-graph-bipartite\n /**\n  * Formally, a graph G = (V, E) is bipartite if and only if\n  * its vertex set V can be partitioned into two non-empty subsets X and Y, \n@@ -12,8 +11,8 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-    bool isBipartite(vector<vector<int>>& graph) \n+    bool isBipartite(const & graph) \n     {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304663005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,8 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-    bool isBipartite(const & graph) \n+    bool isBipartite(const graph& graph) \n     {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723304669584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,8 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-    bool isBipartite(const graph& graph) \n-    {   \n+    bool isBipartite(const graph& g) \n+    {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308504151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,6 @@\n \n     bool isBipartite(const graph& g) \n     {\n     }\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308509472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,7 @@\n \n     bool isBipartite(const graph& g) \n     {\n     }\n-    \n+\n+    bool is\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308519450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,6 +15,6 @@\n     bool isBipartite(const graph& g) \n     {\n     }\n \n-    bool is\n+    bool isBipartiteBfs()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308528411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,6 +15,9 @@\n     bool isBipartite(const graph& g) \n     {\n     }\n \n-    bool isBipartiteBfs()\n+    bool isBipartiteBfs(const graph& g)\n+    {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308539617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,7 +17,12 @@\n     }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n-        \n+        return false;\n     }\n+\n+        bool isBipartiteBfs(const graph& g)\n+    {\n+        return false;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308545596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         return false;\n     }\n \n-        bool isBipartiteBfs(const graph& g)\n+    bool isBipartiteDfs(const graph& g)\n     {\n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308551433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,9 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-    bool isBipartite(const graph& g) \n-    {\n+    bool isBipartite(const graph& g) { return \n     }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n"
                },
                {
                    "date": 1723308558678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+\n+// https://leetcode.com/problems/is-graph-bipartite\n+/**\n+ * Formally, a graph G = (V, E) is bipartite if and only if\n+ * its vertex set V can be partitioned into two non-empty subsets X and Y, \n+ * such that every edge in E has one endpoint in X and the other endpoint in Y. \n+ * This partition of vertices is also known as bi-partition\n+ */\n+namespace algorithms::graph::leetcode::bipartite\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+\n+    bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n+\n+    bool isBipartiteBfs(const graph& g)\n+    {\n+        return false;\n+    }\n+\n+    bool isBipartiteDfs(const graph& g)\n+    {\n+        return false;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308703627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,39 +15,13 @@\n     bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n+        \n         return false;\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n         return false;\n     }\n-}\n-#include <vector>\n-\n-// https://leetcode.com/problems/is-graph-bipartite\n-/**\n- * Formally, a graph G = (V, E) is bipartite if and only if\n- * its vertex set V can be partitioned into two non-empty subsets X and Y, \n- * such that every edge in E has one endpoint in X and the other endpoint in Y. \n- * This partition of vertices is also known as bi-partition\n- */\n-namespace algorithms::graph::leetcode::bipartite\n-{\n-\n-using graph = std::vector<std::vector<int>>;\n-\n-    bool isBipartite(const graph& g) { return \n-    }\n-\n-    bool isBipartiteBfs(const graph& g)\n-    {\n-        return false;\n-    }\n-\n-    bool isBipartiteDfs(const graph& g)\n-    {\n-        return false;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723308709729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n #include <vector>\n+#include <queue>\n \n // https://leetcode.com/problems/is-graph-bipartite\n /**\n  * Formally, a graph G = (V, E) is bipartite if and only if\n@@ -15,9 +16,9 @@\n     bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n-        \n+\n         return false;\n     }\n \n     bool isBipartiteDfs(const graph& g)\n"
                },
                {
                    "date": 1723309461149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,7 +22,8 @@\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n+        \n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309485115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,8 @@\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n-        \n+        for(auto )\n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309494506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n+        std::vector\n         for(auto )\n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309501344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n+\n     bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n@@ -22,9 +23,9 @@\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n-        std::vector\n+        std::vector<Color>\n         for(auto )\n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309506976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n namespace algorithms::graph::leetcode::bipartite\n {\n \n using graph = std::vector<std::vector<int>>;\n+enum Colour { }\n \n-\n     bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n"
                },
                {
                    "date": 1723309515613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <vector>\n+#include <queue>\n+\n+// https://leetcode.com/problems/is-graph-bipartite\n+/**\n+ * Formally, a graph G = (V, E) is bipartite if and only if\n+ * its vertex set V can be partitioned into two non-empty subsets X and Y, \n+ * such that every edge in E has one endpoint in X and the other endpoint in Y. \n+ * This partition of vertices is also known as bi-partition\n+ */\n+namespace algorithms::graph::leetcode::bipartite\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+enum Colour { White = 0, Black };\n+\n+    bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n+\n+    bool isBipartiteBfs(const graph& g)\n+    {\n+\n+        return false;\n+    }\n+\n+    bool isBipartiteDfs(const graph& g)\n+    {\n+        std::vector<Color>\n+        for(auto )\n+        return false;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309523546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,40 +23,9 @@\n     }\n \n     bool isBipartiteDfs(const graph& g)\n     {\n-        std::vector<Color>\n+        std::vector<Colour> c\n         for(auto )\n         return false;\n     }\n-}\n-#include <vector>\n-#include <queue>\n-\n-// https://leetcode.com/problems/is-graph-bipartite\n-/**\n- * Formally, a graph G = (V, E) is bipartite if and only if\n- * its vertex set V can be partitioned into two non-empty subsets X and Y, \n- * such that every edge in E has one endpoint in X and the other endpoint in Y. \n- * This partition of vertices is also known as bi-partition\n- */\n-namespace algorithms::graph::leetcode::bipartite\n-{\n-\n-using graph = std::vector<std::vector<int>>;\n-enum Colour { }\n-\n-    bool isBipartite(const graph& g) { return isBipartiteBfs(g); }\n-\n-    bool isBipartiteBfs(const graph& g)\n-    {\n-\n-        return false;\n-    }\n-\n-    bool isBipartiteDfs(const graph& g)\n-    {\n-        std::vector<Color>\n-        for(auto )\n-        return false;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309537340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n \n     bool isBipartiteDfs(const graph& g)\n     {\n         std::vector<Colour> c(g.size());\n+        \n+\n         for(auto )\n         return false;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723309575100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n enum Colour { White = 0, Black };\n \n     bool isBipartite(const graph& g) \n     { \n-         std::vector<Colour> c(g.size());\n+        std::vector<Colour> c(g.size());\n         return isBipartiteBfs(g); }\n \n     bool isBipartiteBfs(const graph& g)\n     {\n"
                }
            ],
            "date": 1723304439246,
            "name": "Commit-0",
            "content": "namespace algorithms::graph::leetcode::flood_fill\n{\n    \n}"
        }
    ]
}