{
    "sourceFile": "algorithms/graph/leetcode/networkDelayTime.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1724084984086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724084994549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::leetcode\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::network\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085000735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n \n \n-namespace algorithms::graph::leetcode::network\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::network_delay_time\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085052588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n \n \n namespace algorithms::graph::leetcode::network_delay_time\n {\n-    \n+    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085057857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n \n \n namespace algorithms::graph::leetcode::network_delay_time\n {\n+\n+\n+\n     int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085064129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n namespace algorithms::graph::leetcode::network_delay_time\n {\n \n+using graph = \n \n-\n     int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085073028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::network_delay_time\n {\n \n-using graph = \n+using graph = std::vector<vector<int>>\n \n     int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n         \n     }\n"
                },
                {
                    "date": 1724085082174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n+    int networkDelayTime(const & times, int n, int k) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724085145389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n \n     /**\n      * https://leetcode.com/problems/network-delay-time\n      * You are given a network of n nodes, labeled from 1 to n. You are also given times, \n-     * a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n+     * a list of travel times as directed edges times[i] = (ui, vi, wi), \n+     * where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\n \n We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1\n      */\n     int networkDelayTime(const graph& times, int n, int src) \n"
                }
            ],
            "date": 1724084984086,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::leetcode"
        }
    ]
}