{
    "sourceFile": "algorithms/graph/onlinejudge/internetBandwidth.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1726771767900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726771776855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n #include <string>\n #include <algorithm>\n-#include <sstream>\n-#include <iostream>\n #include \"../edmonds_karp.cpp\"\n \n \n-namespace algorithms::graph::onlinejudge::sa\n\\ No newline at end of file\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726771980858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+#include <string>\n+#include <algorithm>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772032009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,5 @@\n \n namespace algorithms::graph::onlinejudge::ib\n {\n     \n-}\n-#include <string>\n-#include <algorithm>\n-#include \"../edmonds_karp.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772063190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,6 +4,6 @@\n \n \n namespace algorithms::graph::onlinejudge::ib\n {\n-    \n+      calculatebandwidth\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772069004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+#include <string>\n+#include <algorithm>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+    int calculateBandwidth\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772085074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,9 @@\n \n \n namespace algorithms::graph::onlinejudge::ib\n {\n-    int calculateBandwidth\n-}\n-#include <string>\n-#include <algorithm>\n-#include \"../edmonds_karp.cpp\"\n \n \n-namespace algorithms::graph::onlinejudge::ib\n-{\n-      calculatebandwidth\n+\n+    int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772101846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n+typedef \n \n \n     int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772110992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n-typedef \n+typedef graph = std::ve\n \n \n     int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772119310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n #include <string>\n-#include <algorithm>\n+#include <ve\n #include \"../edmonds_karp.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n-typedef graph = std::ve\n+typedef graph = std::vector\n \n \n     int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772128183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n #include <string>\n-#include <ve\n+#include <vector>\n #include \"../edmonds_karp.cpp\"\n \n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n-typedef graph = std::vector\n+typedef graph = std::vector<std::\n \n \n     int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772135251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef graph = std::vector<\n+\n+\n+    int calculateBandwidth()\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772144900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,9 @@\n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n-typedef graph = std::vector<\n+typedef std::vector<\n \n \n     int calculateBandwidth()\n-}\n-#include <string>\n-#include <vector>\n-#include \"../edmonds_karp.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-\n-typedef graph = std::vector<std::\n-\n-\n-    int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772152529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef std::vector<st\n+\n+\n+    int calculateBandwidth()\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772163632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef std::vector<std::tuple<int, int, int>> \n+\n+\n+    int calculateBandwidth()\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772169508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,35 +5,8 @@\n \n namespace algorithms::graph::onlinejudge::ib\n {\n \n-typedef std::vector<std::tuple<int, int, int>> \n+typedef std::vector<std::tuple<int, int, int>> graph;\n \n-\n     int calculateBandwidth()\n-}\n-#include <string>\n-#include <vector>\n-#include \"../edmonds_karp.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-\n-typedef std::vector<st\n-\n-\n-    int calculateBandwidth()\n-}\n-#include <string>\n-#include <vector>\n-#include \"../edmonds_karp.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-\n-typedef std::vector<\n-\n-\n-    int calculateBandwidth()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772182156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,7 @@\n {\n \n typedef std::vector<std::tuple<int, int, int>> graph;\n \n-    int calculateBandwidth()\n+    int calculateBandwidth(const graph& g)\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726772313344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,6 +8,8 @@\n \n typedef std::vector<std::tuple<int, int, int>> graph;\n \n     int calculateBandwidth(const graph& g)\n-    \n+    {\n+        return 1;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813172264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n {\n \n typedef std::vector<std::tuple<int, int, int>> graph;\n \n+    /** */\n     int calculateBandwidth(const graph& g)\n     {\n         return 1;\n     }\n"
                },
                {
                    "date": 1726813177618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n {\n \n typedef std::vector<std::tuple<int, int, int>> graph;\n \n-    /** */\n+    /** https://onlinejudge.org/external/8/820.pdf */\n     int calculateBandwidth(const graph& g)\n     {\n         return 1;\n     }\n"
                },
                {
                    "date": 1726813200116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n namespace algorithms::graph::onlinejudge::ib\n {\n \n typedef std::vector<std::tuple<int, int, int>> graph;\n+namespace mf = algorithms::graph::mf;\n \n     /** https://onlinejudge.org/external/8/820.pdf */\n     int calculateBandwidth(const graph& g)\n     {\n"
                },
                {
                    "date": 1726813250132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n typedef std::vector<std::tuple<int, int, int>> graph;\n namespace mf = algorithms::graph::mf;\n \n     /** https://onlinejudge.org/external/8/820.pdf */\n-    int calculateBandwidth(const graph& g)\n+    int calculateBandwidth(int v const graph& g)\n     {\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813259022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n typedef std::vector<std::tuple<int, int, int>> graph;\n namespace mf = algorithms::graph::mf;\n \n     /** https://onlinejudge.org/external/8/820.pdf */\n-    int calculateBandwidth(int v const graph& g)\n+    int calculateBandwidth(int v, int source, int sink, const graph& g)\n     {\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813271347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,7 +11,8 @@\n \n     /** https://onlinejudge.org/external/8/820.pdf */\n     int calculateBandwidth(int v, int source, int sink, const graph& g)\n     {\n+        mf::MAX_V = v;\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813284571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,9 @@\n     /** https://onlinejudge.org/external/8/820.pdf */\n     int calculateBandwidth(int v, int source, int sink, const graph& g)\n     {\n         mf::MAX_V = v;\n+        mf::source = 0;\n+        mf::sink = 37;\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813289998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef std::vector<std::tuple<int, int, int>> graph;\n+namespace mf = algorithms::graph::mf;\n+\n+    /** https://onlinejudge.org/external/8/820.pdf */\n+    int calculateBandwidth(int v, int source, int sink, const graph& g)\n+    {\n+        mf::MAX_V = v;\n+        mf::source = source;\n+        mf::sink = sink;\n+        return 1;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813311215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,27 +14,11 @@\n     {\n         mf::MAX_V = v;\n         mf::source = source;\n         mf::sink = sink;\n-        return 1;\n-    }\n-}\n-#include <string>\n-#include <vector>\n-#include \"../edmonds_karp.cpp\"\n+        mf::residual_graph.resize(mf::MAX_V);\n+        for(auto& x : mf::residual_graph)\n+          x.resize(mf::MAX_V);\n \n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-\n-typedef std::vector<std::tuple<int, int, int>> graph;\n-namespace mf = algorithms::graph::mf;\n-\n-    /** https://onlinejudge.org/external/8/820.pdf */\n-    int calculateBandwidth(int v, int source, int sink, const graph& g)\n-    {\n-        mf::MAX_V = v;\n-        mf::source = 0;\n-        mf::sink = 37;\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813335362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,7 +18,11 @@\n         mf::residual_graph.resize(mf::MAX_V);\n         for(auto& x : mf::residual_graph)\n           x.resize(mf::MAX_V);\n \n+        for(int i = 0; i < mf::MAX_V; i++)\n+          for(int j = 0; j < mf::MAX_V; j++)\n+            mf::residual_graph[i][j] = 0;  \n+\n         return 1;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813364335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef std::vector<std::tuple<int, int, int>> graph;\n+namespace mf = algorithms::graph::mf;\n+\n+    /** https://onlinejudge.org/external/8/820.pdf */\n+    int calculateBandwidth(int v, int source, int sink, const graph& g)\n+    {\n+        mf::MAX_V = v;\n+        mf::source = source;\n+        mf::sink = sink;\n+        mf::residual_graph.resize(mf::MAX_V);\n+        for(auto& x : mf::residual_graph)\n+          x.resize(mf::MAX_V);\n+\n+        for(int i = 0; i < mf::MAX_V; i++)\n+          for(int j = 0; j < mf::MAX_V; j++)\n+          {}\n+            mf::residual_graph[i][j] = 0;  \n+\n+\n+\n+        return 1;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813372242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,40 +20,12 @@\n           x.resize(mf::MAX_V);\n \n         for(int i = 0; i < mf::MAX_V; i++)\n           for(int j = 0; j < mf::MAX_V; j++)\n-          {}\n+\n             mf::residual_graph[i][j] = 0;  \n \n \n \n         return 1;\n     }\n-}\n-#include <string>\n-#include <vector>\n-#include \"../edmonds_karp.cpp\"\n-\n-\n-namespace algorithms::graph::onlinejudge::ib\n-{\n-\n-typedef std::vector<std::tuple<int, int, int>> graph;\n-namespace mf = algorithms::graph::mf;\n-\n-    /** https://onlinejudge.org/external/8/820.pdf */\n-    int calculateBandwidth(int v, int source, int sink, const graph& g)\n-    {\n-        mf::MAX_V = v;\n-        mf::source = source;\n-        mf::sink = sink;\n-        mf::residual_graph.resize(mf::MAX_V);\n-        for(auto& x : mf::residual_graph)\n-          x.resize(mf::MAX_V);\n-\n-        for(int i = 0; i < mf::MAX_V; i++)\n-          for(int j = 0; j < mf::MAX_V; j++)\n-            mf::residual_graph[i][j] = 0;  \n-\n-        return 1;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726813382731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,11 @@\n           x.resize(mf::MAX_V);\n \n         for(int i = 0; i < mf::MAX_V; i++)\n           for(int j = 0; j < mf::MAX_V; j++)\n-\n             mf::residual_graph[i][j] = 0;  \n \n+        for(auto t : )\n \n \n         return 1;\n     }\n"
                },
                {
                    "date": 1726813391543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,9 @@\n           for(int j = 0; j < mf::MAX_V; j++)\n             mf::residual_graph[i][j] = 0;  \n \n         for(auto t : g)\n-        {\n-            \n-        }\n+          \n \n \n         return 1;\n     }\n"
                },
                {
                    "date": 1726813404157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+#include <string>\n+#include <vector>\n+#include \"../edmonds_karp.cpp\"\n+\n+\n+namespace algorithms::graph::onlinejudge::ib\n+{\n+\n+typedef std::vector<std::tuple<int, int, int>> graph;\n+namespace mf = algorithms::graph::mf;\n+\n+    /** https://onlinejudge.org/external/8/820.pdf */\n+    int calculateBandwidth(int v, int source, int sink, const graph& g)\n+    {\n+        mf::MAX_V = v;\n+        mf::source = source;\n+        mf::sink = sink;\n+        mf::residual_graph.resize(mf::MAX_V);\n+        for(auto& x : mf::residual_graph)\n+          x.resize(mf::MAX_V);\n+\n+        for(int i = 0; i < mf::MAX_V; i++)\n+          for(int j = 0; j < mf::MAX_V; j++)\n+            mf::residual_graph[i][j] = 0;  \n+\n+        for(auto t : g)\n+        {\n+            \n+        }\n+\n+\n+        return 1;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1726771767900,
            "name": "Commit-0",
            "content": "#include <string>\n#include <algorithm>\n#include <sstream>\n#include <iostream>\n#include \"../edmonds_karp.cpp\"\n\n\nnamespace algorithms::graph::onlinejudge::sa"
        }
    ]
}