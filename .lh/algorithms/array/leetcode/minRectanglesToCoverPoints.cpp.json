{
    "sourceFile": "algorithms/array/leetcode/minRectanglesToCoverPoints.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1719817382732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719817398312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n+\n+\n+// https://leetcode.com/problems/minimum-rectangles-to-cover-points\n int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817415467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n+#include <vector>\n \n-\n // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n-int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n-        \n\\ No newline at end of file\n-    }\n+int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817422945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n #include <vector>\n \n // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n-int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {}\n\\ No newline at end of file\n+int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817436030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n #include <vector>\n \n+namespace algorithms::leetcode::array\n+{\n+\n // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817443447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,8 @@\n \n namespace algorithms::leetcode::array\n {\n \n-// https://leetcode.com/problems/minimum-rectangles-to-cover-points\n-int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n\\ No newline at end of file\n+    // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n+    \n+    int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817455319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,15 @@\n namespace algorithms::leetcode::array\n {\n \n     // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n-    \n+    You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles.\n+\n+Each rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle.\n+\n+A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\n+\n+Return an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle.\n+\n+Note: A point may be covered by more than one rectangle.\n     int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719817462443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,10 @@\n {\n \n     // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n     You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles.\n-\n Each rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle.\n-\n A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\n-\n Return an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle.\n \n Note: A point may be covered by more than one rectangle.\n     int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n"
                },
                {
                    "date": 1719817469033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,11 @@\n namespace algorithms::leetcode::array\n {\n \n     // https://leetcode.com/problems/minimum-rectangles-to-cover-points\n-    You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles.\n-Each rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle.\n-A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\n-Return an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle.\n-Note: A point may be covered by more than one rectangle.\n+//     You are given a 2D integer array points, where points[i] = [xi, yi]. You are also given an integer w. Your task is to cover all the given points with rectangles.\n+// Each rectangle has its lower end at some point (x1, 0) and its upper end at some point (x2, y2), where x1 <= x2, y2 >= 0, and the condition x2 - x1 <= w must be satisfied for each rectangle.\n+// A point is considered covered by a rectangle if it lies within or on the boundary of the rectangle.\n+// Return an integer denoting the minimum number of rectangles needed so that each point is covered by at least one rectangle.\n+// Note: A point may be covered by more than one rectangle.\n     int minRectanglesToCoverPoints(std::vector<std::vector<int>>& points, int w) {}\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719817382732,
            "name": "Commit-0",
            "content": "int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n        \n    }"
        }
    ]
}