{
    "sourceFile": "algorithms/numOfSubarrays.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1718612305372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718612312784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,5 @@\n \n-namespace \n+namespace leetcode::array\n+{\n+    \n+}\n"
                },
                {
                    "date": 1718612317916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n \n-namespace leetcode::array\n+namespace leetcode::array::sliding\n {\n-    \n+\n }\n"
                },
                {
                    "date": 1718612324318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n \n-namespace leetcode::array::sliding\n+namespace leetcode::array::sliding_window\n {\n \n }\n"
                },
                {
                    "date": 1718612335091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n namespace leetcode::array::sliding_window\n {\n \n+    \n }\n"
                },
                {
                    "date": 1718612340687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n \n namespace leetcode::array::sliding_window\n {\n-\n-    \n+    int numOfSubarrays(vector<int>& arr, int k, int threshold)\n+    {\n+        \n+    }\n }\n"
                },
                {
                    "date": 1718612349978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n+#include <vector>\n \n+\n namespace leetcode::array::sliding_window\n {\n     int numOfSubarrays(vector<int>& arr, int k, int threshold)\n     {\n-        \n+\n     }\n }\n"
                },
                {
                    "date": 1718612363301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n-\n namespace leetcode::array::sliding_window\n {\n+    // https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/description/\n     int numOfSubarrays(vector<int>& arr, int k, int threshold)\n     {\n \n     }\n"
                },
                {
                    "date": 1718612380694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #include <vector>\n \n namespace leetcode::array::sliding_window\n {\n-    // https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/description/\n+    // https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\n+    /\n     int numOfSubarrays(vector<int>& arr, int k, int threshold)\n     {\n \n     }\n"
                },
                {
                    "date": 1718612387744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n namespace leetcode::array::sliding_window\n {\n     // https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\n     /*\n-      Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold\n+      Given an array of integers arr and two integers k and threshold, \n+      return the number of sub-arrays of size k and average greater than or equal to threshold\n     */\n     int numOfSubarrays(vector<int>& arr, int k, int threshold)\n     {\n \n"
                },
                {
                    "date": 1718612831365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+#include <vector>\n+\n+namespace leetcode::array::sliding_window\n+{\n+    // https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold\n+    /*\n+      Given an array of integers arr and two integers k and threshold, \n+      return the number of sub-arrays of size k and average greater than or equal to threshold\n+    */\n+    int numOfSubarrays(std::vector<int>& arr, int k, int threshold)\n+    {\n+        int n = arr.size();\n+        l = 0;\n+    }\n+}\n"
                }
            ],
            "date": 1718612305372,
            "name": "Commit-0",
            "content": "\nnamespace \n"
        }
    ]
}