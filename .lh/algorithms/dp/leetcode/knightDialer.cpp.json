{
    "sourceFile": "algorithms/dp/leetcode/knightDialer.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1719913958543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719913968042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,7 @@\n \n \n-namespace algorithms::leetcode::dp\n\\ No newline at end of file\n+namespace algorithms::leetcode::dp\n+{\n+    int knightDialer(int n) {   \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719913977516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n \n \n namespace algorithms::leetcode::dp\n {\n-    int knightDialer(int n) {   \n-    }\n+    int knightDialer(int n) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719913990928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,13 @@\n \n \n namespace algorithms::leetcode::dp\n {\n+    /*\n+    Given an integer n, return how many distinct phone numbers of length n we can dial.\n+\n+You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n+\n+As the answer may be very large, return the answer modulo 109 + 7.\n+    */\n     int knightDialer(int n) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719913998216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace algorithms::leetcode::dp\n {\n     /*\n+      https://leetcode.com/problems/knight-dialer\n     Given an integer n, return how many distinct phone numbers of length n we can dial.\n \n You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n \n"
                },
                {
                    "date": 1719914003381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n {\n     /*\n       https://leetcode.com/problems/knight-dialer\n       Given an integer n, return how many distinct phone numbers of length n we can dial.\n-\n You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n \n As the answer may be very large, return the answer modulo 109 + 7.\n     */\n"
                },
                {
                    "date": 1720880777039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+\n+\n+namespace algorithms::leetcode::dp\n+{\n+    /*\n+      https://leetcode.com/problems/knight-dialer\n+      Given an integer n, return how many distinct phone numbers of length n we can dial.\n+      You are allowed to place the knight on any numeric cell initially and \n+      then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\n+      As the answer may be very large, return the answer modulo 109 + 7.\n+    */\n+    int knightDialer(int n) { return 0; }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719913958543,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::leetcode::dp"
        }
    ]
}