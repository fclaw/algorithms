{
    "sourceFile": "algorithms/dp/leetcode/cherryPickup.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1720377510669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720377526101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,6 +9,8 @@\n       The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n       When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n       Return the minimum total cost of the cuts.\n     */\n-    int minCost(int n, std::vector<int>& cuts) {}\n+        int cherryPickup(vector<vector<int>>& grid) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720377532452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,8 @@\n       The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n       When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n       Return the minimum total cost of the cuts.\n     */\n-        int cherryPickup(vector<vector<int>>& grid) {\n+    int cherryPickup(std::vector<vector<int>>& grid) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720377541148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n       The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n       When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n       Return the minimum total cost of the cuts.\n     */\n-    int cherryPickup(std::vector<vector<int>>& grid) {\n+    int cherryPickup(std::vector<std::vector<int>>& grid) \n+    {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720377679180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,7 +11,7 @@\n       Return the minimum total cost of the cuts.\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n-        \n+            \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720377996258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #include <vector>\n \n namespace  algorithms::dp::leetcode\n {\n-    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n+    // https://leetcode.com/problems/cherry-pickup-ii/description/\n     /*\n       Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n       You should perform the cuts in order, you can change the order of the cuts as you wish.\n       The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n@@ -11,7 +11,7 @@\n       Return the minimum total cost of the cuts.\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n-            \n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720378003347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n #include <vector>\n \n namespace  algorithms::dp::leetcode\n {\n-    // https://leetcode.com/problems/cherry-pickup-ii/description/\n+    // https://leetcode.com/problems/cherry-pickup-ii\n     /*\n-      Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n-      You should perform the cuts in order, you can change the order of the cuts as you wish.\n-      The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n-      When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n-      Return the minimum total cost of the cuts.\n+      \n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n \n"
                },
                {
                    "date": 1720378009862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,21 @@\n namespace  algorithms::dp::leetcode\n {\n     // https://leetcode.com/problems/cherry-pickup-ii\n     /*\n-      \n+      You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\n+\n+You have two robots that can collect cherries for you:\n+\n+Robot #1 is located at the top-left corner (0, 0), and\n+Robot #2 is located at the top-right corner (0, cols - 1).\n+Return the maximum number of cherries collection using both robots by following the rules below:\n+\n+From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n+When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n+When both robots stay in the same cell, only one takes the cherries.\n+Both robots cannot move outside of the grid at any moment.\n+Both robots should reach the bottom row in grid\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n \n"
                },
                {
                    "date": 1720378015760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace  algorithms::dp::leetcode\n {\n     // https://leetcode.com/problems/cherry-pickup-ii\n     /*\n-      You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\n+       You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\n \n You have two robots that can collect cherries for you:\n \n Robot #1 is located at the top-left corner (0, 0), and\n"
                },
                {
                    "date": 1720378025649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n namespace  algorithms::dp::leetcode\n {\n     // https://leetcode.com/problems/cherry-pickup-ii\n     /*\n-       You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\n+       You are given a rows x cols matrix grid representing \n+       a field of cherries where grid[i][j] \n+       represents the number of cherries that you can collect from the (i, j) cell.\n \n You have two robots that can collect cherries for you:\n \n Robot #1 is located at the top-left corner (0, 0), and\n"
                },
                {
                    "date": 1720378031228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,10 @@\n     /*\n        You are given a rows x cols matrix grid representing \n        a field of cherries where grid[i][j] \n        represents the number of cherries that you can collect from the (i, j) cell.\n+       You have two robots that can collect cherries for you:\n \n-You have two robots that can collect cherries for you:\n-\n Robot #1 is located at the top-left corner (0, 0), and\n Robot #2 is located at the top-right corner (0, cols - 1).\n Return the maximum number of cherries collection using both robots by following the rules below:\n \n"
                },
                {
                    "date": 1720378040035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,17 @@\n        a field of cherries where grid[i][j] \n        represents the number of cherries that you can collect from the (i, j) cell.\n        You have two robots that can collect cherries for you:\n \n-Robot #1 is located at the top-left corner (0, 0), and\n-Robot #2 is located at the top-right corner (0, cols - 1).\n-Return the maximum number of cherries collection using both robots by following the rules below:\n+        Robot #1 is located at the top-left corner (0, 0), and\n+        Robot #2 is located at the top-right corner (0, cols - 1).\n+        Return the maximum number of cherries collection using both robots by following the rules below:\n \n-From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n-When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n-When both robots stay in the same cell, only one takes the cherries.\n-Both robots cannot move outside of the grid at any moment.\n-Both robots should reach the bottom row in grid\n+        From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n+        When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n+        When both robots stay in the same cell, only one takes the cherries.\n+        Both robots cannot move outside of the grid at any moment.\n+        Both robots should reach the bottom row in grid\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n \n"
                },
                {
                    "date": 1720378046764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n        a field of cherries where grid[i][j] \n        represents the number of cherries that you can collect from the (i, j) cell.\n        You have two robots that can collect cherries for you:\n \n-        Robot #1 is located at the top-left corner (0, 0), and\n-        Robot #2 is located at the top-right corner (0, cols - 1).\n-        Return the maximum number of cherries collection using both robots by following the rules below:\n+       Robot #1 is located at the top-left corner (0, 0), and\n+       Robot #2 is located at the top-right corner (0, cols - 1).\n+       Return the maximum number of cherries collection using both robots by following the rules below:\n \n         From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n         When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n         When both robots stay in the same cell, only one takes the cherries.\n"
                },
                {
                    "date": 1720378052012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n        Robot #1 is located at the top-left corner (0, 0), and\n        Robot #2 is located at the top-right corner (0, cols - 1).\n        Return the maximum number of cherries collection using both robots by following the rules below:\n \n-        From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n-        When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n+       From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n+       When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n         When both robots stay in the same cell, only one takes the cherries.\n         Both robots cannot move outside of the grid at any moment.\n         Both robots should reach the bottom row in grid\n     */\n"
                },
                {
                    "date": 1720378058868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n        Return the maximum number of cherries collection using both robots by following the rules below:\n \n        From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\n        When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n-        When both robots stay in the same cell, only one takes the cherries.\n-        Both robots cannot move outside of the grid at any moment.\n-        Both robots should reach the bottom row in grid\n+       When both robots stay in the same cell, only one takes the cherries.\n+       Both robots cannot move outside of the grid at any moment.\n+       Both robots should reach the bottom row in grid\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n \n"
                },
                {
                    "date": 1720378067765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,7 @@\n        Both robots should reach the bottom row in grid\n     */\n     int cherryPickup(std::vector<std::vector<int>>& grid) \n     {\n-\n+        return 0;\n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720377510669,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace  algorithms::dp::leetcode\n{\n    // https://leetcode.com/problems/minimum-cost-to-cut-a-stick\n    /*\n      Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n      You should perform the cuts in order, you can change the order of the cuts as you wish.\n      The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. \n      When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n      Return the minimum total cost of the cuts.\n    */\n    int minCost(int n, std::vector<int>& cuts) {}\n}"
        }
    ]
}