{
    "sourceFile": "algorithms/graph/findCircleNum.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1721211042973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721211048068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n #include <vector>\n \n-namespace algorithms::array::leetcode\n\\ No newline at end of file\n+namespace algorithms::grap::leetcode\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211056260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,8 @@\n #include <vector>\n \n-namespace algorithms::grap::leetcode\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode\n+{\n+        int findCircleNum(vector<vector<int>>& isConnected) {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211062654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode\n+{\n+    int findCircleNum(vector<vector<int>>& isConnected) \n+    {\n+        return 0;    \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211070154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,9 @@\n #include <vector>\n \n namespace algorithms::graph::leetcode\n {\n-    int findCircleNum(vector<vector<int>>& isConnected) \n+    int findCircleNum(std::vector<std::vector<int>>& isConnected) \n     {\n         return 0;    \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode\n-{\n-        int findCircleNum(vector<vector<int>>& isConnected) {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211079916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #include <vector>\n \n namespace algorithms::graph::leetcode\n {\n-    int findCircleNum(std::vector<std::vector<int>>& isConnected) \n+    // https://leetcode.com/problems/number-of-provinces\n+    int findCircleNum(std::vector<std::vector<int>> isConnected) \n     {\n         return 0;    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211116083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode\n+{\n+    // https://leetcode.com/problems/number-of-provinces\n+    /*\n+    There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n+\n+A province is a group of directly or indirectly connected cities and no other cities outside of the group\n+    */\n+    int findCircleNum(std::vector<std::vector<int>> isConnected) \n+    {\n+        return 0;    \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211122056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,23 +3,14 @@\n namespace algorithms::graph::leetcode\n {\n     // https://leetcode.com/problems/number-of-provinces\n     /*\n-    There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n+       There are n cities. Some of them are connected, while some are not. \n+       If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n \n A province is a group of directly or indirectly connected cities and no other cities outside of the group\n     */\n     int findCircleNum(std::vector<std::vector<int>> isConnected) \n     {\n         return 0;    \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode\n-{\n-    // https://leetcode.com/problems/number-of-provinces\n-    int findCircleNum(std::vector<std::vector<int>> isConnected) \n-    {\n-        return 0;    \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721211129094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n {\n     // https://leetcode.com/problems/number-of-provinces\n     /*\n        There are n cities. Some of them are connected, while some are not. \n-       If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n+       If city a is connected directly with city b, \n+       and city b is connected directly with city c, then city a is connected indirectly with city c.\n \n A province is a group of directly or indirectly connected cities and no other cities outside of the group\n     */\n     int findCircleNum(std::vector<std::vector<int>> isConnected) \n"
                },
                {
                    "date": 1721211136985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        There are n cities. Some of them are connected, while some are not. \n        If city a is connected directly with city b, \n        and city b is connected directly with city c, \n        then city a is connected indirectly with city c.\n-A province is a group of directly or indirectly connected cities and no other cities outside of the group\n+        A province is a group of directly or indirectly connected cities and no other cities outside of the group\n     */\n     int findCircleNum(std::vector<std::vector<int>> isConnected) \n     {\n         return 0;    \n"
                }
            ],
            "date": 1721211042973,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace algorithms::array::leetcode"
        }
    ]
}