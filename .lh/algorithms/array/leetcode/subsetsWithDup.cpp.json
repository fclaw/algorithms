{
    "sourceFile": "algorithms/array/leetcode/subsetsWithDup.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 56,
            "patches": [
                {
                    "date": 1720887618636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720887636283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+\n+\n+\n namespace algorithms::array::leetcode\n {\n-    \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887647126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887655174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,7 @@\n+\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    vector<vector<int>> subsetsWithDup(vector<int>& nums) { return {}; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887662931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,7 @@\n+#include <vector>\n \n \n-\n namespace algorithms::array::leetcode\n {\n     vector<vector<int>> subsetsWithDup(vector<int>& nums) { return {}; }\n-}\n-\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n-        \n-    }\n-}\n-\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887670519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,6 @@\n \n \n namespace algorithms::array::leetcode\n {\n-    vector<vector<int>> subsetsWithDup(vector<int>& nums) { return {}; }\n+    std::vector<std::vector<int>> subsetsWithDup(vector<int>& nums) { return {}; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887692157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,7 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) { return {}; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887707767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,8 @@\n \n \n namespace algorithms::array::leetcode\n {\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) { return {}; }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    std::vector<std::vector<int>> subsetsWithDup(vector<int>& nums) { return {}; }\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n+    { \n+        return {}; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887720577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n \n \n namespace algorithms::array::leetcode\n {\n+    // https://leetcode.com/problems/subsets-ii\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n-        return {}; }\n+        return {}; \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887728540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,13 @@\n \n namespace algorithms::array::leetcode\n {\n     // https://leetcode.com/problems/subsets-ii\n+    Given an integer array nums that may contain duplicates, return all possible \n+subsets\n+ (the power set).\n+\n+The solution set must not contain duplicate subsets. Return the solution in any order.\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720887737417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    // https://leetcode.com/problems/subsets-ii\n+    Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+\n+The solution set must not contain duplicate subsets. Return the solution in any order.\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n+    { \n+        return {}; \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887742715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    // https://leetcode.com/problems/subsets-ii\n+      Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+      The solution set must not contain duplicate subsets. Return the solution in any order.\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n+    { \n+        return {}; \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887748004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,42 +2,12 @@\n \n \n namespace algorithms::array::leetcode\n {\n-    // https://leetcode.com/problems/subsets-ii\n+    /**/ https://leetcode.com/problems/subsets-ii\n       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n       The solution set must not contain duplicate subsets. Return the solution in any order.\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n         return {}; \n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    // https://leetcode.com/problems/subsets-ii\n-    Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-\n-The solution set must not contain duplicate subsets. Return the solution in any order.\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n-    { \n-        return {}; \n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    // https://leetcode.com/problems/subsets-ii\n-    Given an integer array nums that may contain duplicates, return all possible \n-subsets\n- (the power set).\n-\n-The solution set must not contain duplicate subsets. Return the solution in any order.\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n-    { \n-        return {}; \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720887755539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,12 @@\n \n \n namespace algorithms::array::leetcode\n {\n-    /**/ https://leetcode.com/problems/subsets-ii\n+    /* https://leetcode.com/problems/subsets-ii\n       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n       The solution set must not contain duplicate subsets. Return the solution in any order.\n+      */\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720888958842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,14 @@\n \n \n namespace algorithms::array::leetcode\n {\n-    /* https://leetcode.com/problems/subsets-ii\n-      Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-      The solution set must not contain duplicate subsets. Return the solution in any order.\n-      */\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+     \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720888965633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        https://leetcode.com/problems/subsets-ii\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-     \n+    std::vector<std::vector<int>> rec() \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720888977690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n        https://leetcode.com/problems/subsets-ii\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-    std::vector<std::vector<int>> rec() \n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int>& nums) \n+    std::vector<std::vector<int>> rec(std::vector<int> xs, ) \n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         return {}; \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720888994564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        https://leetcode.com/problems/subsets-ii\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-    std::vector<std::vector<int>> rec(std::vector<int> xs, ) \n+    std::vector<std::vector<int>> rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& ans) \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720889001099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n        https://leetcode.com/problems/subsets-ii\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-    std::vector<std::vector<int>> rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& ans) \n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs) \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         return {}; \n     }\n"
                },
                {
                    "date": 1720889009669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,13 @@\n        https://leetcode.com/problems/subsets-ii\n        Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs) \n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+\n+    }\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n-        return {}; \n+        std\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889016039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,7 @@\n \n     }\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n-        std\n+        std::vector<std::vector<int>>\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889024972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,7 @@\n \n     }\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n-        std::vector<std::vector<int>>\n+        std::vector<std::vector<int>> xxs = {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889031878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,6 +14,7 @@\n     }\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n+        rec()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889039677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+\n+    }\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, xxs)\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889046298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,27 +14,8 @@\n     }\n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs)\n+        rec(xs, 0, xxs);\n+        return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-\n-    }\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec()\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889053499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n     {\n \n     }\n+    \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, xxs);\n"
                },
                {
                    "date": 1720889059603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n     {\n+        if \n+    }\n \n-    }\n-    \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, xxs);\n"
                },
                {
                    "date": 1720889089430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        if()\n+\n+        std::vector \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889100189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,36 +11,15 @@\n     void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n     {\n         if()\n \n-        std::vector \n+        std::vector<int> set;\n+        \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, xxs);\n         return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        if \n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs);\n-        return xxs;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889107921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     {\n         if()\n \n         std::vector<int> set;\n-        \n+        set.\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720889116143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     {\n         if()\n \n         std::vector<int> set;\n-        set.\n+        if()\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720889122087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        if()\n+\n+        std::vector<int> set;\n+        if(mask & ())\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889128758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        if()\n+\n+        std::vector<int> set;\n+        if(mask & (1 ))\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889137681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        if()\n+\n+        std::vector<int> set;\n+        if(mask & (1 ))\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889148733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n     {\n+        int \n         if()\n \n         std::vector<int> set;\n         if(mask & (1 ))\n@@ -18,83 +19,8 @@\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n         std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs);\n+        rec(xs, 0, 0, xxs);\n         return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        if()\n-\n-        std::vector<int> set;\n-        if(mask & (1 ))\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        if()\n-\n-        std::vector<int> set;\n-        if(mask & ())\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        if()\n-\n-        std::vector<int> set;\n-        if()\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, xxs);\n-        return xxs;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889155179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        int n = xs.\n+        if()\n+\n+        std::vector<int> set;\n+        if(mask & (1 ))\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889163415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,11 @@\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n     {\n-        int n = xs.\n-        if()\n+        int n = xs.size();\n+        if(i == n - 1)\n+          \n \n         std::vector<int> set;\n         if(mask & (1 ))\n     }\n@@ -22,31 +23,5 @@\n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, 0, xxs);\n         return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        int \n-        if()\n-\n-        std::vector<int> set;\n-        if(mask & (1 ))\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889176287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,11 @@\n        The solution set must not contain duplicate subsets. Return the solution in any order.\n     */\n     void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n     {\n+        std::vector<int> set;\n         int n = xs.size();\n         if(i == n - 1)\n-          \n-\n-        std::vector<int> set;\n         if(mask & (1 ))\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889186513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n     {\n         std::vector<int> set;\n         int n = xs.size();\n         if(i == n - 1)\n+          xxs.push_back()\n+\n         if(mask & (1 ))\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889199447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     {\n         std::vector<int> set;\n         int n = xs.size();\n         if(i == n - 1)\n-          xxs.push_back()\n+          xxs.push_back(set.push_back(xs[]))\n \n         if(mask & (1 ))\n     }\n \n"
                },
                {
                    "date": 1720889212409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n     {\n         std::vector<int> set;\n         int n = xs.size();\n         if(i == n - 1)\n-          xxs.push_back(set.push_back(xs[]))\n+        {\n+            set.push_back(xs[i])\n+          xxs.push_back(set.push_back(xs[i]));\n \n         if(mask & (1 ))\n     }\n \n"
                },
                {
                    "date": 1720889218954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+          xxs.push_back(set);\n+\n+        if(mask & (1 ))\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889231905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,11 @@\n         int n = xs.size();\n         if(i == n - 1)\n         {\n             set.push_back(xs[i]);\n-          xxs.push_back(set);\n-\n+            xxs.push_back(set);\n+        }\n+        \n         if(mask & (1 ))\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n@@ -25,34 +26,5 @@\n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, 0, xxs);\n         return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i])\n-          xxs.push_back(set.push_back(xs[i]));\n-\n-        if(mask & (1 ))\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889237632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(mask & (1 << i))\n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889242703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,39 +17,10 @@\n             set.push_back(xs[i]);\n             xxs.push_back(set);\n         }\n \n-        if(mask & (1 << i))\n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i]);\n-            xxs.push_back(set);\n-        }\n+        if(mask & (1 << xs[i]))\n         \n-        if(mask & (1 ))\n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720889248055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n             set.push_back(xs[i]);\n             xxs.push_back(set);\n         }\n \n-        if(mask & (1 << xs[i]))\n-        \n+        if(!(mask & (1 << xs[i]))\n+          \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720889260195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n             set.push_back(xs[i]);\n             xxs.push_back(set);\n         }\n \n-        if(!(mask & (1 << xs[i]))\n+        if(!(mask & (1 << xs[i])))\n+          set.push_back()\n           \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889265335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n             xxs.push_back(set);\n         }\n \n         if(!(mask & (1 << xs[i])))\n-          set.push_back()\n+          set.push_back(xs[i]);\n           \n+          \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n     { \n"
                },
                {
                    "date": 1720889272917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(!(mask & (1 << xs[i])))\n+          set.push_back(xs[i]);\n+          rec(xs, i + 1, )\n+          \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889279393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(!(mask & (1 << xs[i])))\n+          set.push_back(xs[i]);\n+          rec(xs, i + 1, mask |= )\n+          \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889286213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(!(mask & (1 << xs[i])))\n+          set.push_back(xs[i]);\n+          rec(xs, i + 1, mask | (1 << xs[i]))\n+          \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889298623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         }\n \n         if(!(mask & (1 << xs[i])))\n           set.push_back(xs[i]);\n-          rec(xs, i + 1, mask | (1 << xs[i]))\n+          rec(xs, i + 1, mask | (1 << xs[i]) )\n           \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n@@ -29,104 +29,5 @@\n         std::vector<std::vector<int>> xxs = {};\n         rec(xs, 0, 0, xxs);\n         return xxs;\n     }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i]);\n-            xxs.push_back(set);\n-        }\n-\n-        if(!(mask & (1 << xs[i])))\n-          set.push_back(xs[i]);\n-          rec(xs, i + 1, mask |= )\n-          \n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i]);\n-            xxs.push_back(set);\n-        }\n-\n-        if(!(mask & (1 << xs[i])))\n-          set.push_back(xs[i]);\n-          rec(xs, i + 1, )\n-          \n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i]);\n-            xxs.push_back(set);\n-        }\n-\n-        if(!(mask & (1 << xs[i])))\n-          set.push_back(xs[i]);\n-          \n-          \n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889303998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(!(mask & (1 << xs[i])))\n+        {\n+          set.push_back(xs[i]);\n+          rec(xs, i + 1, mask | (1 << xs[i]), xxs)\n+          \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720889309448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,43 +19,13 @@\n         }\n \n         if(!(mask & (1 << xs[i])))\n         {\n-          set.push_back(xs[i]);\n-          rec(xs, i + 1, mask | (1 << xs[i]), xxs)\n-          \n-    }\n-\n-    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n-    { \n-        std::vector<std::vector<int>> xxs = {};\n-        rec(xs, 0, 0, xxs);\n-        return xxs;\n-    }\n-}\n-#include <vector>\n-\n-\n-namespace algorithms::array::leetcode\n-{\n-    /* \n-       https://leetcode.com/problems/subsets-ii\n-       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n-       The solution set must not contain duplicate subsets. Return the solution in any order.\n-    */\n-    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n-    {\n-        std::vector<int> set;\n-        int n = xs.size();\n-        if(i == n - 1)\n-        {\n-            set.push_back(xs[i]);\n-            xxs.push_back(set);\n+           set.push_back(xs[i]);\n+           rec(xs, i + 1, mask | (1 << xs[i]), xxs);\n         }\n \n-        if(!(mask & (1 << xs[i])))\n-          set.push_back(xs[i]);\n-          rec(xs, i + 1, mask | (1 << xs[i]) )\n+        \n           \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889315493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n            set.push_back(xs[i]);\n            rec(xs, i + 1, mask | (1 << xs[i]), xxs);\n         }\n \n-        \n+        set.p\n           \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889333803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n            rec(xs, i + 1, mask | (1 << xs[i]), xxs);\n         }\n \n         set.pop_back();\n+        rec(x)\n           \n     }\n \n     std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n"
                },
                {
                    "date": 1720889342520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+#include <vector>\n+\n+\n+namespace algorithms::array::leetcode\n+{\n+    /* \n+       https://leetcode.com/problems/subsets-ii\n+       Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\n+       The solution set must not contain duplicate subsets. Return the solution in any order.\n+    */\n+    void rec(std::vector<int> xs, int i, int mask, std::vector<std::vector<int>>& xxs)\n+    {\n+        std::vector<int> set;\n+        int n = xs.size();\n+        if(i == n - 1)\n+        {\n+            set.push_back(xs[i]);\n+            xxs.push_back(set);\n+        }\n+\n+        if(!(mask & (1 << xs[i])))\n+        {\n+           set.push_back(xs[i]);\n+           rec(xs, i + 1, mask | (1 << xs[i]), xxs);\n+        }\n+\n+        set.pop_back();\n+        rec(xs, i + 1, mask)\n+          \n+    }\n+\n+    std::vector<std::vector<int>> subsetsWithDup(std::vector<int> xs) \n+    { \n+        std::vector<std::vector<int>> xxs = {};\n+        rec(xs, 0, 0, xxs);\n+        return xxs;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720887618636,
            "name": "Commit-0",
            "content": "namespace algorithms::array::leetcode\n{\n    \n}"
        }
    ]
}