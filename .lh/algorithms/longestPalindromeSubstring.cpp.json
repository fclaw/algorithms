{
    "sourceFile": "algorithms/longestPalindromeSubstring.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1718379689164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718529445477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n+    // \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529450779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // \n+    // Objective \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529457381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective \n+    // Objective fuction: P\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529466337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P\n+    // Objective fuction: P(i, j) = n, where i \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529472388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i \n+    // Objective fuction: P(i, j) = n, where i an j are \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529478993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529487060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529492362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries resprec \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529498529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries resprec \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529515064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries, n - max palindrome  \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529523519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries, n - max palindrome  \n+    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries, n - max palindrome within i, j \n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529531650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    // Objective fuction: P(i, j) = n, where i an j are the right and left boundaries, n - max palindrome within i, j \n+    // Objective fuction: P(i, j) = n, \n+    // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n         return \"\";\n     }\n"
                },
                {
                    "date": 1718529539381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n-        return \"\";\n+        return ;\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529546924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n-        return ;\n+        return std::string;\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529552458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     { \n-        return std::string;\n+        return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529567898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n     // Given a string s, return the longest palindromic substring in s\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n-    { \n+    {\n+        \n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529585588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        \n+        std::string<std::string>\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529595786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        std::string<std::string>\n+        std::vectostd::string<std::string>\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529602126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        std::vectostd::string<std::string>\n+        std::vectors<std::string<std::string>\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529613469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        std::vectors<std::string<std::string>\n+        std::vector<std::vector>\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529622891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n #include <string>\n #include <iostream>\n \n+using std::\n+\n namespace leetcode::dp\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n"
                },
                {
                    "date": 1718529630441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n #include <iostream>\n \n-using std::\n+using std::vetor<>\n \n namespace leetcode::dp\n {\n      \n"
                },
                {
                    "date": 1718529639212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n #include <iostream>\n \n-using std::vetor<>\n+using std::vector<std::vector<int>> DP;\n \n namespace leetcode::dp\n {\n      \n"
                },
                {
                    "date": 1718529681791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n #include <iostream>\n \n-using std::vector<std::vector<int>> DP;\n+using std::vector<std::vector<int>>;\n \n namespace leetcode::dp\n {\n      \n"
                },
                {
                    "date": 1718529693029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n #include <iostream>\n \n-using std::vector<std::vector<int>>;\n+using DP = std::vector<std::vector<int>>;\n \n namespace leetcode::dp\n {\n      \n@@ -11,9 +11,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        std::vector<std::vector>\n+        DP \n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529699551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        DP \n+        DP dp();\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529704638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n-        DP dp();\n+        DP dp(str.);\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n"
                },
                {
                    "date": 1718529712980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str, int l, int r)\n     {\n+        int n = str.size();\n         DP dp(str.);\n         return std::string();\n     }\n \n"
                },
                {
                    "date": 1718529719672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n     // Objective fuction: P(i, j) = n, \n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n-    std::string longestPalindromeDp(std::string str, int l, int r)\n+    std::string longestPalindromeDp(std::string str)\n     {\n         int n = str.size();\n         DP dp(str.);\n         return std::string();\n"
                },
                {
                    "date": 1718529735041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str)\n     {\n         int n = str.size();\n-        DP dp(str.);\n+        DP dp(n, std::vector<int>);\n         return std::string();\n     }\n \n-    std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n+    std::string longestPalindrome(std::string s) { return longestPalindromeDp(s); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529740968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     // where i an j are the right and left boundaries, n - max palindrome within i, j\n     std::string longestPalindromeDp(std::string str)\n     {\n         int n = str.size();\n-        DP dp(n, std::vector<int>);\n+        DP dp(n, std::vector<int>(n, 0));\n         return std::string();\n     }\n \n     std::string longestPalindrome(std::string s) { return longestPalindromeDp(s); }\n"
                },
                {
                    "date": 1718529839282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <string>\n-#include <iostream>\n+#include <vector>\n \n using DP = std::vector<std::vector<int>>;\n \n namespace leetcode::dp\n"
                },
                {
                    "date": 1718529924370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,6 @@\n         DP dp(n, std::vector<int>(n, 0));\n         return std::string();\n     }\n \n-    std::string longestPalindrome(std::string s) { return longestPalindromeDp(s); }\n+    std::string longestPalindromeO(std::string s) { return longestPalindromeDp(s); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529932311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,6 @@\n         DP dp(n, std::vector<int>(n, 0));\n         return std::string();\n     }\n \n-    std::string longestPalindromeO(std::string s) { return longestPalindromeDp(s); }\n+    std::string longestPalindromeInString(std::string s) { return longestPalindromeDp(s); }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718529941597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,6 @@\n         DP dp(n, std::vector<int>(n, 0));\n         return std::string();\n     }\n \n-    std::string longestPalindromeInString(std::string s) { return longestPalindromeDp(s); }\n+    std::string longestPalindrome(std::string s) { return longestPalindromeDp(s); }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1718379689164,
            "name": "Commit-0",
            "content": "#include <string>\n#include <iostream>\n\nnamespace leetcode::dp\n{\n     \n    // https://leetcode.com/problems/longest-palindromic-substring\n    // Given a string s, return the longest palindromic substring in s\n    std::string longestPalindromeDp(std::string str, int l, int r)\n    { \n        return \"\";\n    }\n\n    std::string longestPalindrome(std::string s) { return longestPalindromeDp(s, 0, s.size() - 1); }\n}"
        }
    ]
}