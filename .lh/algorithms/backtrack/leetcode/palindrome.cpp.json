{
    "sourceFile": "algorithms/backtrack/leetcode/palindrome.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1724241967194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724241974494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include <string>\n \n using vvp = std::vector<std::vector<std::string>>;\n \n-namespace algorithms::backtrack::leetcode\n+namespace algorithms::backtrack::leetcode::partition\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724241981011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n #include <string>\n \n using vvp = std::vector<std::vector<std::string>>;\n \n-namespace algorithms::backtrack::leetcode::partition\n+namespace algorithms::backtrack::leetcode::palindrome\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724241991081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,7 @@\n     }\n \n     vvp partition(std::string s) \n     {\n-        xxs ans = {};\n-        rec(s, 0, ans);\n-        return ans;\n     }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242004905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <vector>\n #include <string>\n \n-using vvp = std::vector<std::vector<std::string>>;\n+using palindroms = std::vector<std::vector<std::string>>;\n \n namespace algorithms::backtrack::leetcode::palindrome\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n"
                },
                {
                    "date": 1724242020201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <vector>\n #include <string>\n \n-using palindroms = std::vector<std::vector<std::string>>;\n+using palindrome = std::vector<std::vector<std::string>>;\n \n namespace algorithms::backtrack::leetcode::palindrome\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n"
                },
                {
                    "date": 1724242025996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <vector>\n #include <string>\n \n-using palindrome = std::vector<std::vector<std::string>>;\n+using palindromes = std::vector<std::vector<std::string>>;\n \n namespace algorithms::backtrack::leetcode::palindrome\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n@@ -15,9 +15,9 @@\n     {\n         return {};\n     }\n \n-    vvp partition(std::string s) \n+    palindromes partition(std::string s) \n     {\n     }\n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242035416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n-    std::vector<std::string> rec(std::string s, int idx, vvp& ans)\n+    void rec(std::string s, int idx, vvp& ans)\n     {\n         return {};\n     }\n \n"
                },
                {
                    "date": 1724242047407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,13 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n-    void rec(std::string s, int idx, vvp& ans)\n+    void dfs(std::string s, int idx, vvp& ans)\n     {\n         return {};\n     }\n \n     palindromes partition(std::string s) \n     {\n-    }\n-    \n+    }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242057178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n-    void dfs(std::string s, int idx, vvp& ans)\n+    void dfs(std::string s, int idx, )\n     {\n         return {};\n     }\n \n"
                },
                {
                    "date": 1724242065498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n #include <vector>\n #include <string>\n+#include <sta\n \n using palindromes = std::vector<std::vector<std::string>>;\n \n namespace algorithms::backtrack::leetcode::palindrome\n"
                },
                {
                    "date": 1724242129634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <vector>\n #include <string>\n-#include <sta\n+#include <stack>\n \n using palindromes = std::vector<std::vector<std::string>>;\n \n namespace algorithms::backtrack::leetcode::palindrome\n@@ -11,8 +11,9 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n+    \n     void dfs(std::string s, int idx, )\n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1724242135099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n-    \n+    palindromes ans;\n     void dfs(std::string s, int idx, )\n     {\n         return {};\n     }\n"
                },
                {
                    "date": 1724242141291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,6 +19,7 @@\n     }\n \n     palindromes partition(std::string s) \n     {\n+        return ans\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242150414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,16 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n+    int \n     palindromes ans;\n     void dfs(std::string s, int idx, )\n     {\n-        return {};\n+        return;\n     }\n \n     palindromes partition(std::string s) \n     {\n-        return ans\n+        return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242159325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,16 +11,17 @@\n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n        Return all possible palindrome partitioning of s\n     */\n-    int \n+    int S;\n     palindromes ans;\n     void dfs(std::string s, int idx, )\n     {\n         return;\n     }\n \n     palindromes partition(std::string s) \n     {\n+        \n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242165517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,8 @@\n     }\n \n     palindromes partition(std::string s) \n     {\n-        \n+        S = s.size();\n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242177529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n #include <vector>\n #include <string>\n #include <stack>\n \n-using palindromes = std::vector<std::vector<std::string>>;\n-\n namespace algorithms::backtrack::leetcode::palindrome\n {\n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n"
                },
                {
                    "date": 1724242183093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,12 @@\n #include <stack>\n \n namespace algorithms::backtrack::leetcode::palindrome\n {\n+\n+using palindromes = std::vector<std::vector<std::string>>;\n+using \n+\n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n        every substring of the partition is a palindrome\n"
                },
                {
                    "date": 1724242188981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n namespace algorithms::backtrack::leetcode::palindrome\n {\n \n using palindromes = std::vector<std::vector<std::string>>;\n-using \n \n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724242199533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n        Return all possible palindrome partitioning of s\n     */\n     int S;\n     palindromes ans;\n-    void dfs(std::string s, int idx, )\n+    void dfs(std::string s, int idx, std::stack<std::vector<int>>)\n     {\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242216023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n namespace algorithms::backtrack::leetcode::palindrome\n {\n \n using palindromes = std::vector<std::vector<std::string>>;\n+using st = std::stack<std::vector<int>>;\n \n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n@@ -14,9 +15,9 @@\n        Return all possible palindrome partitioning of s\n     */\n     int S;\n     palindromes ans;\n-    void dfs(std::string s, int idx, std::stack<std::vector<int>>)\n+    void dfs(std::string s, int idx, std::stack<std::vector<int>>& xs)\n     {\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242222720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n        Return all possible palindrome partitioning of s\n     */\n     int S;\n     palindromes ans;\n-    void dfs(std::string s, int idx, std::stack<std::vector<int>>& xs)\n+    void dfs(std::string s, int idx, st& xs)\n     {\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242228927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,7 +23,8 @@\n \n     palindromes partition(std::string s) \n     {\n         S = s.size();\n+        \n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242234429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,8 @@\n \n     palindromes partition(std::string s) \n     {\n         S = s.size();\n-        \n+        dfs(s, 0, )\n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242246579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n \n     palindromes partition(std::string s) \n     {\n         S = s.size();\n+        st sta\n         dfs(s, 0, )\n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242252510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n     palindromes partition(std::string s) \n     {\n         S = s.size();\n-        st sta\n+        st storage;\n         dfs(s, 0, )\n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242271418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n        Return all possible palindrome partitioning of s\n     */\n     int S;\n     palindromes ans;\n-    void dfs(std::string s, int idx, st& xs)\n+    void dfs(std::string s, int idx, st& storage)\n     {\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242416160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,8 @@\n     palindromes partition(std::string s) \n     {\n         S = s.size();\n         st storage;\n-        dfs(s, 0, )\n+        dfs(s, 0, storage);\n         return ans;\n     }    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724242424134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     int S;\n     palindromes ans;\n     void dfs(std::string s, int idx, st& storage)\n     {\n+        if(idx )\n         return;\n     }\n \n     palindromes partition(std::string s) \n"
                },
                {
                    "date": 1724242463721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,13 @@\n     int S;\n     palindromes ans;\n     void dfs(std::string s, int idx, st& storage)\n     {\n-        if(idx )\n+        if(idx == S)\n+        {\n+            auto tmp;\n+            for()\n+        }\n         return;\n     }\n \n     palindromes partition(std::string s) \n"
                },
                {
                    "date": 1724242474123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n namespace algorithms::backtrack::leetcode::palindrome\n {\n \n using palindromes = std::vector<std::vector<std::string>>;\n-using st = std::stack<std::vector<int>>;\n+using st = std::stack<std::vector>;\n \n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724242481965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n namespace algorithms::backtrack::leetcode::palindrome\n {\n \n using palindromes = std::vector<std::vector<std::string>>;\n-using st = std::stack<std::vector>;\n+using st = std::stack<>;\n \n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724242490534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n namespace algorithms::backtrack::leetcode::palindrome\n {\n \n using palindromes = std::vector<std::vector<std::string>>;\n-using st = std::stack<>;\n+using st = std::vector<std::string>;\n \n     // https://leetcode.com/problems/palindrome-partitioning\n     /* \n        Given a string s, partition s such that \n"
                },
                {
                    "date": 1724242504774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,8 @@\n     void dfs(std::string s, int idx, st& storage)\n     {\n         if(idx == S)\n         {\n-            auto tmp;\n-            for()\n         }\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242520425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     void dfs(std::string s, int idx, st& storage)\n     {\n         if(idx == S)\n         {\n+            \n         }\n         return;\n     }\n \n"
                },
                {
                    "date": 1724242532015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,11 @@\n     void dfs(std::string s, int idx, st& storage)\n     {\n         if(idx == S)\n         {\n-            ans.push_back()\n+            ans.push_back(st);\n+            return;\n         }\n-        return;\n     }\n \n     palindromes partition(std::string s) \n     {\n"
                },
                {
                    "date": 1724242554223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,12 @@\n             ans.push_back(storage);\n             return;\n         }\n \n-        for(int i = idx; i < )\n+        for(int i = idx; i < S; i++)\n+        {\n+            \n+        }\n     }\n \n     palindromes partition(std::string s) \n     {\n"
                }
            ],
            "date": 1724241967194,
            "name": "Commit-0",
            "content": "#include <vector>\n#include <string>\n\nusing vvp = std::vector<std::vector<std::string>>;\n\nnamespace algorithms::backtrack::leetcode\n{\n    // https://leetcode.com/problems/palindrome-partitioning\n    /* \n       Given a string s, partition s such that \n       every substring of the partition is a palindrome\n       Return all possible palindrome partitioning of s\n    */\n    std::vector<std::string> rec(std::string s, int idx, vvp& ans)\n    {\n        return {};\n    }\n\n    vvp partition(std::string s) \n    {\n        xxs ans = {};\n        rec(s, 0, ans);\n        return ans;\n    }\n    \n}"
        }
    ]
}