{
    "sourceFile": "algorithms/backtrack/leetcode/solveSudoku.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 53,
            "patches": [
                {
                    "date": 1723357424172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723357435463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+    \n+    int tilingRectangle(int n, int m)\n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357445548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver/\n+     */\n+    int tilingRectangle(int n, int m)\n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357457725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,37 +3,18 @@\n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n     /**\n-     * https://leetcode.com/problems/sudoku-solver/\n-     */\n-    int tilingRectangle(int n, int m)\n-    {\n-        return 0;\n-    }\n-}\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n \n+A sudoku solution must satisfy all of the following rules:\n \n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-    \n+Each of the digits 1-9 must occur exactly once in each row.\n+Each of the digits 1-9 must occur exactly once in each column.\n+Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     */\n     int tilingRectangle(int n, int m)\n     {\n         return 0;\n     }\n-}\n-\n-\n-namespace algorithms::backtrack::leetcode\n-{\n-    // https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares\n-    // Given a rectangle of size n x m, \n-    // return the minimum number of integer-sided squares that tile the rectangle.\n-    // hints:\n-    //  Suppose you've placed a bunch of squares. \n-    //    Where is the natural spot to place the next square?\n-    //  The maximum number of squares to be placed will be <= max(n, m)\n-    int tilingRectangle(int n, int m)\n-    {\n-        return 0;\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357463776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,10 @@\n \n     /**\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n \n-A sudoku solution must satisfy all of the following rules:\n-\n Each of the digits 1-9 must occur exactly once in each row.\n Each of the digits 1-9 must occur exactly once in each column.\n Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n"
                },
                {
                    "date": 1723357489793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,9 @@\n     /**\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n      * A sudoku solution must satisfy all of the following rules:\n-\n-Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each row.\n Each of the digits 1-9 must occur exactly once in each column.\n Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n     int tilingRectangle(int n, int m)\n"
                },
                {
                    "date": 1723357495222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n      * A sudoku solution must satisfy all of the following rules:\n      * Each of the digits 1-9 must occur exactly once in each row.\n-Each of the digits 1-9 must occur exactly once in each column.\n-Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n     int tilingRectangle(int n, int m)\n     {\n         return 0;\n"
                },
                {
                    "date": 1723357513590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    int tilingRectangle(int n, int m)\n-    {\n-        return 0;\n+    void solveSudoku(vector<vector<char>>& board) {\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357538456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n     /**\n"
                },
                {
                    "date": 1723357543885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,8 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    void solveSudoku(vector<vector<char>>& board) {\n+    void solveSudoku(std::vector<vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357572520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     */\n+    enum \n+    void solveSudoku(std::vector<std::vector<char>>& board) {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357578529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum \n+    enum Cell { }\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357584439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,26 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { }\n+    enum Cell { One , Two, }\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n-     */\n-    void solveSudoku(std::vector<vector<char>>& board) {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357591115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { One , Two, }\n+    enum Cell { One , Two, Three, Four, }\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357603525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { One , Two, Three, Four, }\n+    enum Cell { One , Two, Three, Four, Five, Six, Seven, eight}\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357616552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { One , Two, Three, Four, Five, Six, Seven, eight}\n+    enum Cell { Empty = 0, One , Two, Three, Four, Five, Six, Seven, Eight, Nine}\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357622450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { Empty = 0, One , Two, Three, Four, Five, Six, Seven, Eight, Nine}\n+    enum Cell { Empty = 0, One , Two, Three, Four, Five, Six, Seven, Eight, Nine };\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357629077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { Empty = 0, One , Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+    enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n     void solveSudoku(std::vector<std::vector<char>>& board) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357637383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,8 @@\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n     enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-    void solveSudoku(std::vector<std::vector<char>>& board) {\n-        \n+    void solveSudoku(std::vector<std::vector<Cell>>& board) \n+    {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723357658358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     */\n+    enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+    void solveSudoku(std::vector<std::vector<Cell>>& board) \n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723359425881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n \n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n+using \n+\n     /**\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n      * A sudoku solution must satisfy all of the following rules:\n"
                },
                {
                    "date": 1723359435782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n-using \n+using sudoku = std::vector<std::vector<Cell>>;\n \n     /**\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n@@ -16,23 +16,5 @@\n     enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n     void solveSudoku(std::vector<std::vector<Cell>>& board) \n     {\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n-     */\n-    enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-    void solveSudoku(std::vector<std::vector<Cell>>& board) \n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723359441394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n     void solveSudoku(std::vector<std::vector<Cell>>& board) \n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723359450966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n+enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n using sudoku = std::vector<std::vector<Cell>>;\n \n     /**\n      * https://leetcode.com/problems/sudoku-solver\n@@ -12,8 +13,8 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n      */\n-    void solveSudoku(std::vector<std::vector<Cell>>& board) \n+    void solveSudoku(sudoku& board) \n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723359458000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+using sudoku = std::vector<std::vector<Cell>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     */\n+    void solveSudoku(sudoku& board)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723359463532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+using sudoku = std::vector<std::vector<Cell>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     */\n+    void solveSudoku(sudoku& board)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723546865828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,50 +11,11 @@\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n      * A sudoku solution must satisfy all of the following rules:\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n+     * \n      */\n     void solveSudoku(sudoku& board)\n     {\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-using sudoku = std::vector<std::vector<Cell>>;\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n-     */\n-    void solveSudoku(sudoku& board)\n-    {\n-    }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-using sudoku = std::vector<std::vector<Cell>>;\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n-     */\n-    void solveSudoku(sudoku& board) \n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723546874194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n      * A sudoku solution must satisfy all of the following rules:\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n-     * \n+     * some ideas:\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. Think of the graph in which vertices correspond to partially completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     void solveSudoku(sudoku& board)\n     {\n     }\n"
                },
                {
                    "date": 1723546971946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n      * Each of the digits 1-9 must occur exactly once in each row.\n      * Each of the digits 1-9 must occur exactly once in each column.\n      * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n      * some ideas:\n-     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. Think of the graph in which vertices correspond to partially completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n+     * Think of the graph in which vertices correspond to partially completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     void solveSudoku(sudoku& board)\n     {\n     }\n"
                },
                {
                    "date": 1723706094229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+using sudoku = std::vector<std::vector<Cell>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n+     * some ideas:\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n+     * Think of the graph in which vertices correspond to partially \n+     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n+     */\n+    void solveSudoku(sudoku& board)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723706101351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-using sudoku = std::vector<std::vector<Cell>>;\n+using sudoku = std::vector<std::vector<Legend>>;\n \n     /**\n      * https://leetcode.com/problems/sudoku-solver\n      * Write a program to solve a Sudoku puzzle by filling the empty cells.\n@@ -20,28 +20,5 @@\n      */\n     void solveSudoku(sudoku& board)\n     {\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-enum Cell { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-using sudoku = std::vector<std::vector<Cell>>;\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n-     * some ideas:\n-     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n-     * Think of the graph in which vertices correspond to partially completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n-     */\n-    void solveSudoku(sudoku& board)\n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723715870634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n+    \n     void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742450829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+using sudoku = std::vector<std::vector<Legend>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n+     * some ideas:\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n+     * Think of the graph in which vertices correspond to partially \n+     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n+     */\n+\n+    void solveSudoku(sudoku& board)\n+    {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742462166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,35 +17,10 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n-\n+    int M \n     void solveSudoku(sudoku& board)\n     {\n-        \n-    }\n-}\n-#include <vector>\n \n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-using sudoku = std::vector<std::vector<Legend>>;\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n-     * some ideas:\n-     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n-     * Think of the graph in which vertices correspond to partially \n-     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n-     */\n-    \n-    void solveSudoku(sudoku& board)\n-    {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742472531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n-    int M \n+    int M\n+    int N\n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742486867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n-    int M\n+    const int M = 9;\n     int N\n     void solveSudoku(sudoku& board)\n     {\n \n"
                },
                {
                    "date": 1723742492110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     const int M = 9;\n-    int N\n+    const int N\n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742510808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     const int M = 9;\n-    const int N\n+    const int N = 9;\n     void solveSudoku(sudoku& board)\n     {\n-\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742543254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,8 @@\n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     const int M = 9;\n     const int N = 9;\n-    void solveSudoku(sudoku& board)\n+    void solveSudoku(const sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742548831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,8 @@\n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     const int M = 9;\n     const int N = 9;\n-    void solveSudoku(const sudoku& board)\n+    void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742568113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n namespace algorithms::backtrack::leetcode::sudoku\n {\n \n enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+const int M = 9;\n+const int N = 9;\n using sudoku = std::vector<std::vector<Legend>>;\n \n     /**\n      * https://leetcode.com/problems/sudoku-solver\n@@ -21,6 +23,7 @@\n     const int M = 9;\n     const int N = 9;\n     void solveSudoku(sudoku& board)\n     {\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742713306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,9 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n-    const int M = 9;\n-    const int N = 9;\n+    \n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742720552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n      * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n-    \n+    // check row\n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742732609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n      * Think of the graph in which vertices correspond to partially \n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     // check row\n+    // check col\n+    // check 3 \n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742737978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     // check row\n     // check col\n-    // check 3 \n+    // check 3 x \n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742743420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n      * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n      */\n     // check row\n     // check col\n-    // check 3 x \n+    // check 3 x 3 square\n     void solveSudoku(sudoku& board)\n     {\n \n     }\n"
                },
                {
                    "date": 1723742770640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,6 @@\n     // check col\n     // check 3 x 3 square\n     void solveSudoku(sudoku& board)\n     {\n-\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742777515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n      */\n     // check row\n     // check col\n     // check 3 x 3 square\n+    int \n     void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742787741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n      */\n     // check row\n     // check col\n     // check 3 x 3 square\n-    int \n+    int empty\n     void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723742792928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n      */\n     // check row\n     // check col\n     // check 3 x 3 square\n-    int empty\n+    int empty_cells = 0;\n     void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723743367361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+const int M = 9;\n+const int N = 9;\n+using sudoku = std::vector<std::vector<Legend>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n+     * some ideas:\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n+     * Think of the graph in which vertices correspond to partially \n+     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n+     */\n+    // check row\n+    // check col\n+    // check 3 x 3 square\n+    int empty_cells = 0;\n+    \n+    void solveSudoku(sudoku& board)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723743374856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,39 +23,9 @@\n     // check row\n     // check col\n     // check 3 x 3 square\n     int empty_cells = 0;\n-    \n+    std::vector<>\n     void solveSudoku(sudoku& board)\n     {\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::backtrack::leetcode::sudoku\n-{\n-\n-enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n-const int M = 9;\n-const int N = 9;\n-using sudoku = std::vector<std::vector<Legend>>;\n-\n-    /**\n-     * https://leetcode.com/problems/sudoku-solver\n-     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n-     * A sudoku solution must satisfy all of the following rules:\n-     * Each of the digits 1-9 must occur exactly once in each row.\n-     * Each of the digits 1-9 must occur exactly once in each column.\n-     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n-     * some ideas:\n-     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n-     * Think of the graph in which vertices correspond to partially \n-     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n-     */\n-    // check row\n-    // check col\n-    // check 3 x 3 square\n-    int empty_cells = 0;\n-    void solveSudoku(sudoku& board)\n-    {\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723743385272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     // check row\n     // check col\n     // check 3 x 3 square\n     int empty_cells = 0;\n-    std::vector<int> \n+    std::vector<int> rows()\n     void solveSudoku(sudoku& board)\n     {\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723743531434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+#include <vector>\n+\n+namespace algorithms::backtrack::leetcode::sudoku\n+{\n+\n+enum Legend { Empty = 0, One, Two, Three, Four, Five, Six, Seven, Eight, Nine };\n+const int M = 9;\n+using sudoku = std::vector<std::vector<Legend>>;\n+using clues = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sudoku-solver\n+     * Write a program to solve a Sudoku puzzle by filling the empty cells.\n+     * A sudoku solution must satisfy all of the following rules:\n+     * Each of the digits 1-9 must occur exactly once in each row.\n+     * Each of the digits 1-9 must occur exactly once in each column.\n+     * Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.]\n+     * some ideas:\n+     * For example, imagine you want to use an algorithm to solve a Sudoku puzzle. \n+     * Think of the graph in which vertices correspond to partially \n+     * completed Sudoku puzzles (with some of the 81 squares blank, but no rules of Sudoku violated), and directed edges correspond to filling in one new entry of the puzzle (subject to the rules of Sudoku). The problem of computing a solution to the puzzle is exactly the problem of computing a directed path from the vertex corresponding to the initial state of the puzzle to the vertex corresponding to the completed puzzle.4\n+     */\n+    // check row\n+    // check col\n+    // check 3 x 3 square\n+    int empty_cells = 0;\n+    clues rows(M, std::vector<int>(M, 0));\n+    clues cols(M, std::vector<int>(M, 0));\n+    void solveSudoku(sudoku& board)\n+    {\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1723357424172,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::backtrack::leetcode\n{\n    // https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares\n    // Given a rectangle of size n x m, \n    // return the minimum number of integer-sided squares that tile the rectangle.\n    // hints:\n    //  Suppose you've placed a bunch of squares. \n    //    Where is the natural spot to place the next square?\n    //  The maximum number of squares to be placed will be <= max(n, m)\n    int tilingRectangle(int n, int m)\n    {\n        return 0;\n    }\n}"
        }
    ]
}