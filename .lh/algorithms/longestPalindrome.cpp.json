{
    "sourceFile": "algorithms/longestPalindrome.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1718359823510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718359840139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n \n \n \n-string longestPalindrome(string s) {\n\\ No newline at end of file\n+string longestPalindrome(string s)\n+{}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359849890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n+#include <str\n \n \n-\n string longestPalindrome(string s)\n {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359857870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-#include <str\n+#include <string>\n \n-\n-string longestPalindrome(string s)\n+std::string longestPalindrome(string s)\n {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359868299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n #include <string>\n \n-std::string longestPalindrome(string s)\n-{}\n\\ No newline at end of file\n+std::string longestPalindrome(std::string s)\n+{\n+    return \"\"\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359875865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #include <string>\n \n+\n+\n std::string longestPalindrome(std::string s)\n {\n-    return \"\"\n+    return \"\";\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359884294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n \n+namespace leetcode::\n \n-\n std::string longestPalindrome(std::string s)\n {\n     return \"\";\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359893601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #include <string>\n \n-namespace leetcode::\n+namespace leetcode::dp\n \n std::string longestPalindrome(std::string s)\n {\n     return \"\";\n"
                },
                {
                    "date": 1718359902033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n #include <string>\n \n namespace leetcode::dp\n+{\n \n-std::string longestPalindrome(std::string s)\n-{\n-    return \"\";\n+    std::string longestPalindrome(std::string s)\n+    {\n+        return \"\";\n+    }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718359912851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #include <string>\n \n namespace leetcode::dp\n {\n-\n+     \n+     \n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359917942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace leetcode::dp\n {\n      \n-     \n+    // https://leetcode.com/problems/longest-palindromic-substring \n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359928117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n \n namespace leetcode::dp\n {\n      \n-    // https://leetcode.com/problems/longest-palindromic-substring \n+    // https://leetcode.com/problems/longest-palindromic-substring\n+     \n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359933471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,13 @@\n namespace leetcode::dp\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n-     \n+    // Given a string s, return the longest \n+palindromic\n+ \n+substring\n+ in s\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359940245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,9 @@\n namespace leetcode::dp\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n-    // Given a string s, return the longest \n-palindromic\n- \n-substring\n- in s\n+    // Given a string s, return the longest palindromic substring in s\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359950587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n+    string longestPalindromeDp()\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359959901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    string longestPalindromeDp()\n+    string longestPalindromeDp(std::string, int )\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718359969346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n      \n     // https://leetcode.com/problems/longest-palindromic-substring\n     // Given a string s, return the longest palindromic substring in s\n-    string longestPalindromeDp(std::string, int left, int right)\n+    string longestPalindromeDp(std::string, int left, int right, std::str)\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n     }\n"
                },
                {
                    "date": 1718360007780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,11 @@\n     // Given a string s, return the longest palindromic substring in s\n     std::string longestPalindromeDp(std::string s, int l, int r, std::string& max)\n     {\n         if(l == r)\n-          return \n+          return s[l];\n+        \n+          \n     }\n     std::string longestPalindrome(std::string s)\n     {\n         return \"\";\n"
                }
            ],
            "date": 1718359823510,
            "name": "Commit-0",
            "content": "\n\n\nstring longestPalindrome(string s) {"
        }
    ]
}