{
    "sourceFile": "algorithms/dp/leetcode/minimumTimeRequired.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1720093481060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720093508116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,5 @@\n-namespace \n\\ No newline at end of file\n+namespace \n+\n+int minimumTimeRequired(vector<int>& jobs, int k) {\n+        \n+    }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093519976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-namespace \n+namespace algorithms::dp::leetcode\n \n int minimumTimeRequired(vector<int>& jobs, int k) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093525252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n namespace algorithms::dp::leetcode\n-\n-int minimumTimeRequired(vector<int>& jobs, int k) {\n-        \n+{\n+    int minimumTimeRequired(vector<int>& jobs, int k) {    \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093531647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n namespace algorithms::dp::leetcode\n {\n-    int minimumTimeRequired(vector<int>& jobs, int k) {    \n-    }\n\\ No newline at end of file\n+    int minimumTimeRequired(vector<int>& jobs, int k) { return 0; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093547296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+#include <vector>\n+\n namespace algorithms::dp::leetcode\n {\n     int minimumTimeRequired(vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093554936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n \n namespace algorithms::dp::leetcode\n {\n-    int minimumTimeRequired(vector<int>& jobs, int k) { return 0; }\n+    int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093572233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #include <vector>\n \n namespace algorithms::dp::leetcode\n {\n+    /*\n+    */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093579534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,11 @@\n \n namespace algorithms::dp::leetcode\n {\n     /*\n+      ou are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n+      There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n+\n+Return the minimum possible maximum working time of any assignment.\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093586555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n \n namespace algorithms::dp::leetcode\n {\n     /*\n-      ou are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n-      There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n-\n+      You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n+      There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n+      The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n Return the minimum possible maximum working time of any assignment.\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093595477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n {\n     /*\n       You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n       There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n-      The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n-Return the minimum possible maximum working time of any assignment.\n+      The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n+      Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n+      Return the minimum possible maximum working time of any assignment.\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093604208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace algorithms::dp::leetcode\n {\n     /*\n+      https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/description/\n       You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n       There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n       The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n       Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n"
                },
                {
                    "date": 1720093614064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,14 @@\n \n namespace algorithms::dp::leetcode\n {\n     /*\n-      https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/description/\n+      https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs\n       You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n       There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n       The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n       Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n       Return the minimum possible maximum working time of any assignment.\n+       <= k <= jobs.length <= 12\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093621200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n       There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n       The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n       Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n       Return the minimum possible maximum working time of any assignment.\n-       <= k <= jobs.length <= 12\n+      1 <= k <= jobs.length <= 12\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093627986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,8 @@\n       The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n       Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n       Return the minimum possible maximum working time of any assignment.\n       1 <= k <= jobs.length <= 12\n+      1 <= jobs[i] <= 107\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720093634718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n       There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n       The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n       Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n       Return the minimum possible maximum working time of any assignment.\n+      Constraints:\n       1 <= k <= jobs.length <= 12\n       1 <= jobs[i] <= 107\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n"
                },
                {
                    "date": 1720358802401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+#include <vector>\n+\n+namespace algorithms::dp::leetcode\n+{\n+    /*\n+      https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs\n+      You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n+      There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n+      The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n+      Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n+      Return the minimum possible maximum working time of any assignment.\n+      Constraints:\n+        1 <= k <= jobs.length <= 12\n+        1 <= jobs[i] <= 107\n+    */\n+    int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722602644650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,23 +12,7 @@\n       Constraints:\n         1 <= k <= jobs.length <= 12\n         1 <= jobs[i] <= 107\n     */\n-    int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n-}\n-#include <vector>\n-\n-namespace algorithms::dp::leetcode\n-{\n-    /*\n-      https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs\n-      You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\n-      There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. \n-      The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. \n-      Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\n-      Return the minimum possible maximum working time of any assignment.\n-      Constraints:\n-      1 <= k <= jobs.length <= 12\n-      1 <= jobs[i] <= 107\n-    */\n-    int minimumTimeRequired(std::vector<int>& jobs, int k) { return 0; }\n+    int minimumTimeRequired(std::vector<int>& jobs, int k) \n+    { return 0; }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722602649880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,6 +13,8 @@\n         1 <= k <= jobs.length <= 12\n         1 <= jobs[i] <= 107\n     */\n     int minimumTimeRequired(std::vector<int>& jobs, int k) \n-    { return 0; }\n+    { \n+        return 0; \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722602655669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       Constraints:\n         1 <= k <= jobs.length <= 12\n         1 <= jobs[i] <= 107\n     */\n-    int minimumTimeRequired(std::vector<int>& jobs, int k) \n+    int minimumTimeRequired(std::vector<int> jobs, int k) \n     { \n         return 0; \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722602707926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n       Return the minimum possible maximum working time of any assignment.\n       Constraints:\n         1 <= k <= jobs.length <= 12\n         1 <= jobs[i] <= 107\n+        \n     */\n     int minimumTimeRequired(std::vector<int> jobs, int k) \n     { \n         return 0; \n"
                },
                {
                    "date": 1722602713862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n       Return the minimum possible maximum working time of any assignment.\n       Constraints:\n         1 <= k <= jobs.length <= 12\n         1 <= jobs[i] <= 107\n-        \n+      hint: We can select a subset of tasks and assign it to a worker then solve the subproblem on the remaining tasks  \n     */\n     int minimumTimeRequired(std::vector<int> jobs, int k) \n     { \n         return 0; \n"
                }
            ],
            "date": 1720093481060,
            "name": "Commit-0",
            "content": "namespace "
        }
    ]
}