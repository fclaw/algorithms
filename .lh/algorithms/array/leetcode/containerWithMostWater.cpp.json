{
    "sourceFile": "algorithms/array/leetcode/containerWithMostWater.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1720283854918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1720283854918,
            "name": "Commit-0",
            "content": "#include <vector>\n#include <algorithm>\n\nnamespace algorithms::array::leetcode\n{\n    // https://leetcode.com/problems/container-with-most-water\n    int maxAreaHelper(std::vector<int>& xs, int left, int right, int volume)\n    {\n        if(left >= right)\n        return volume;\n\n        if(xs[left] < xs[right])\n        {\n        int left_tmp = left;\n        while(++left_tmp < right && \n            xs[left] > xs[left_tmp]);\n        int volume_left = (right - left_tmp) * std::min(xs[right], xs[left_tmp]);\n        return maxAreaHelper(xs, left_tmp, right, std::max(volume, volume_left));\n        }\n        else if(xs[left] > xs[right])\n        {\n            int right_tmp = right;\n            while(--right_tmp >= left &&\n            xs[right] > xs[right_tmp]);\n            int volume_right = (right_tmp - left) * std::min(xs[right_tmp], xs[left]);\n            return maxAreaHelper(xs, left, right_tmp, std::max(volume, volume_right));\n\n        }\n        else // both left and right are equal\n        {\n            int left_tmp = left;\n            while(++left_tmp < right && \n            xs[left] > xs[left_tmp]);\n\n            int right_tmp = right;\n            while(--right_tmp >= left &&\n            xs[right] > xs[right_tmp]);\n            \n            int l_r_volume = (right_tmp - left_tmp) * std::min(xs[right_tmp], xs[left_tmp]);\n            return maxAreaHelper(xs, left_tmp, right_tmp, std::max(volume, l_r_volume));\n        }\n    }\n\n    int maxArea(std::vector<int>& height)\n    {\n        int init_volume = (height.size() - 1) * std::min(height[0], height[height.size() - 1]);\n        return maxAreaHelper(height, 0, height.size() - 1, init_volume);\n    }\n}"
        }
    ]
}