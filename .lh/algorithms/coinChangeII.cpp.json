{
    "sourceFile": "algorithms/coinChangeII.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1718276528344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718276539448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace leetcode::dp\n {\n-    \n+    nt change(int amount, vector<int>& coins) {\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276546343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n+\n namespace leetcode::dp\n {\n-    nt change(int amount, vector<int>& coins) {\n+    int change(int amount, vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276553190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \n+#include <vector>\n \n-\n namespace leetcode::dp\n {\n     int change(int amount, vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276558843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,6 @@\n #include <vector>\n \n namespace leetcode::dp\n {\n-    int change(int amount, vector<int>& coins) {}\n+    int change(int amount, std::vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276574373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,15 @@\n #include <vector>\n \n namespace leetcode::dp\n {\n+    /*\n+      You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n+\n+Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n+\n+You may assume that you have an infinite number of each kind of coin.\n+\n+The answer is guaranteed to fit into a signed 32-bit integer.\n+    */\n     int change(int amount, std::vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276582247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,10 @@\n namespace leetcode::dp\n {\n     /*\n       You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n-\n-Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n-\n-You may assume that you have an infinite number of each kind of coin.\n-\n+      Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n+      You may assume that you have an infinite number of each kind of coin.\n The answer is guaranteed to fit into a signed 32-bit integer.\n     */\n     int change(int amount, std::vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276593126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,12 @@\n \n namespace leetcode::dp\n {\n     /*\n+      https://leetcode.com/problems/coin-change-ii\n       You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n       Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n       You may assume that you have an infinite number of each kind of coin.\n-The answer is guaranteed to fit into a signed 32-bit integer.\n+      The answer is guaranteed to fit into a signed 32-bit integer.\n     */\n     int change(int amount, std::vector<int>& coins) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276602596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,6 +9,9 @@\n       Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n       You may assume that you have an infinite number of each kind of coin.\n       The answer is guaranteed to fit into a signed 32-bit integer.\n     */\n-    int change(int amount, std::vector<int>& coins) {}\n+    int change(int amount, std::vector<int>& coins) \n+    {\n+        return 0;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718276621396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,17 @@\n       You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n       Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n       You may assume that you have an infinite number of each kind of coin.\n       The answer is guaranteed to fit into a signed 32-bit integer.\n+      \n+      Input: amount = 5, coins = [1,2,5]\n+Output: 4\n+Explanation: there are four ways to make up the amount:\n+5=5\n+5=2+2+1\n+5=2+1+1+1\n+5=1+1+1+1+1\n+\n     */\n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n"
                },
                {
                    "date": 1718276628331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,14 @@\n       You may assume that you have an infinite number of each kind of coin.\n       The answer is guaranteed to fit into a signed 32-bit integer.\n       \n       Input: amount = 5, coins = [1,2,5]\n-Output: 4\n-Explanation: there are four ways to make up the amount:\n-5=5\n-5=2+2+1\n-5=2+1+1+1\n-5=1+1+1+1+1\n+        Output: 4\n+        Explanation: there are four ways to make up the amount:\n+        5=5\n+        5=2+2+1\n+        5=2+1+1+1\n+        5=1+1+1+1+1\n \n     */\n     int change(int amount, std::vector<int>& coins) \n     {\n"
                },
                {
                    "date": 1718277309983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,17 @@\n       Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n       You may assume that you have an infinite number of each kind of coin.\n       The answer is guaranteed to fit into a signed 32-bit integer.\n       \n-      Input: amount = 5, coins = [1,2,5]\n+        Input: amount = 5, coins = [1,2,5]\n         Output: 4\n         Explanation: there are four ways to make up the amount:\n         5=5\n         5=2+2+1\n         5=2+1+1+1\n         5=1+1+1+1+1\n-\n     */\n+    \n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1718277315576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         5=2+2+1\n         5=2+1+1+1\n         5=1+1+1+1+1\n     */\n-    \n+    changeDp()\n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1718277325734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n         5=2+2+1\n         5=2+1+1+1\n         5=1+1+1+1+1\n     */\n-    changeDp()\n+    changeDp(int amount, std::vector<int>& coins)\n+    \n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1718277335043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,12 @@\n         5=2+2+1\n         5=2+1+1+1\n         5=1+1+1+1+1\n     */\n-    changeDp(int amount, std::vector<int>& coins)\n-    \n+    void changeDp(int amount, std::vector<int>& coins)\n+    {\n+\n+    }\n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1718277344184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         5=2+2+1\n         5=2+1+1+1\n         5=1+1+1+1+1\n     */\n-    void changeDp(int amount, std::vector<int>& coins)\n+    void changeDp(int amount, std::vector<int>& coins, int& )\n     {\n \n     }\n     int change(int amount, std::vector<int>& coins) \n"
                },
                {
                    "date": 1718277350136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n         5=1+1+1+1+1\n     */\n     void changeDp(int amount, std::vector<int>& coins, int& ways)\n     {\n-\n     }\n     int change(int amount, std::vector<int>& coins) \n     {\n         return 0;\n"
                },
                {
                    "date": 1718277382742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+\n+#include <vector>\n+\n+namespace leetcode::dp\n+{\n+    /*\n+      https://leetcode.com/problems/coin-change-ii\n+      You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n+      Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n+      You may assume that you have an infinite number of each kind of coin.\n+      The answer is guaranteed to fit into a signed 32-bit integer.\n+      \n+        Input: amount = 5, coins = [1,2,5]\n+        Output: 4\n+        Explanation: there are four ways to make up the amount:\n+        5=5\n+        5=2+2+1\n+        5=2+1+1+1\n+        5=1+1+1+1+1\n+    */\n+    void changeDp(int amount, std::vector<int>& coins, int& ways)\n+    {\n+        if(amount == 0)\n+          ways += 1;\n+\n+        for(auto )  \n+    }\n+    int change(int amount, std::vector<int>& coins) \n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1718276528344,
            "name": "Commit-0",
            "content": "\n\nnamespace leetcode::dp\n{\n    \n}"
        }
    ]
}