{
    "sourceFile": "algorithms/maths/onlinejudge/steps.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1729835396695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1729835406205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+#include <cassert>\n+#include <optional>\n+#include <iostream>\n \n-\n namespace algorithms::maths::onlinejudge::steps\n {\n-    \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835415703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,17 @@\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n {\n-\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        int num, denom;\n+        double n;\n+        while(std::cin >> num >> denom)\n+        {\n+            std::cin >> n;\n+            neighbour p = getNeighbour(num, denom, n);\n+            printf(\"%d %d\\n\", p.first, p.second);\n+        }\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835428872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n {\n+    /** https://onlinejudge.org/external/8/846.pdf  */\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         int num, denom;\n"
                },
                {
                    "date": 1729835442768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n {\n-    /** https://onlinejudge.org/external/8/846.pdf  */\n+    /** https://onlinejudge.org/external/8/846.pdf, uses the sum of arithmetic progression formula  */\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         int num, denom;\n"
                },
                {
                    "date": 1729835452793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,11 @@\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n {\n-    /** https://onlinejudge.org/external/8/846.pdf, uses the sum of arithmetic progression formula  */\n+    /** https://onlinejudge.org/external/8/846.pdf, \n+     * uses the sum of arithmetic progression formula  */\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        int num, denom;\n-        double n;\n-        while(std::cin >> num >> denom)\n-        {\n-            std::cin >> n;\n-            neighbour p = getNeighbour(num, denom, n);\n-            printf(\"%d %d\\n\", p.first, p.second);\n-        }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835462885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula  */\n+    int min\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n"
                },
                {
                    "date": 1729835468035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula  */\n-    int min\n+    int minSteps()\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n"
                },
                {
                    "date": 1729835479898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula  */\n-    int minSteps()\n+    int minSteps(int s, int e) { retrun 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n     }\n"
                },
                {
                    "date": 1729835488213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,11 @@\n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula  */\n-    int minSteps(int s, int e) { retrun 0; }\n+    int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835504317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,9 @@\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        \n+        int tc;\n+        std::cin >> tc;\n+        while(--tc >)\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835541842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,19 @@\n \n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n-     * uses the sum of arithmetic progression formula  */\n+     * uses the sum of arithmetic progression formula,\n+     * What is the minimum number of steps in order to get from x to y? The length of the first and the\n+last step must be 1  */\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         int tc;\n         std::cin >> tc;\n-        while(--tc >)\n+        while(--tc >= 0)\n+        {\n+\n+        }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835547794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n namespace algorithms::maths::onlinejudge::steps\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula,\n-     * What is the minimum number of steps in order to get from x to y? The length of the first and the\n-last step must be 1  */\n+     * What is the minimum number of steps in order to get from x to y? \n+     * The length of the first and the last step must be 1  */\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n"
                },
                {
                    "date": 1729835561569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n         int tc;\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n-\n+            int \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835572024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n         int tc;\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n-            int \n+            int s, e;\n+            std::cin >> e >> \n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835580478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n             int s, e;\n-            std::cin >> e >> \n+            std::cin >> e >> e;\n+            minSteps()\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835586175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,8 @@\n         while(--tc >= 0)\n         {\n             int s, e;\n             std::cin >> e >> e;\n-            minSteps()\n+            std::cout << minSteps()\n         }\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835591876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+#include <cassert>\n+#include <optional>\n+#include <iostream>\n+\n+namespace algorithms::maths::onlinejudge::steps\n+{\n+    /** https://onlinejudge.org/external/8/846.pdf, \n+     * uses the sum of arithmetic progression formula,\n+     * What is the minimum number of steps in order to get from x to y? \n+     * The length of the first and the last step must be 1  */\n+    int minSteps(int s, int e) { return 0; }\n+    void submit(std::optional<char*> file)\n+    {\n+        if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        int tc;\n+        std::cin >> tc;\n+        while(--tc >= 0)\n+        {\n+            int s, e;\n+            std::cin >> e >> e;\n+            std::cout << minSteps(s, e) << std::end\n+        }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835599610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,32 +17,8 @@\n         while(--tc >= 0)\n         {\n             int s, e;\n             std::cin >> e >> e;\n-            std::cout << minSteps(s, e) << std::end\n+            std::cout << minSteps(s, e) << std::endl;\n         }\n     }\n-}\n-#include <cassert>\n-#include <optional>\n-#include <iostream>\n-\n-namespace algorithms::maths::onlinejudge::steps\n-{\n-    /** https://onlinejudge.org/external/8/846.pdf, \n-     * uses the sum of arithmetic progression formula,\n-     * What is the minimum number of steps in order to get from x to y? \n-     * The length of the first and the last step must be 1  */\n-    int minSteps(int s, int e) { return 0; }\n-    void submit(std::optional<char*> file)\n-    {\n-        if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n-        int tc;\n-        std::cin >> tc;\n-        while(--tc >= 0)\n-        {\n-            int s, e;\n-            std::cin >> e >> e;\n-            std::cout << minSteps()\n-        }\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1729835793387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n {\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula,\n      * What is the minimum number of steps in order to get from x to y? \n-     * The length of the first and the last step must be 1  */\n+     * The length of the first and the last step must be 1.\n+     * The length of a step must be nonnegative and\n+can be by one bigger than, equal to, or by one smaller than the length of the previous step  */\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n"
                },
                {
                    "date": 1729835802404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     /** https://onlinejudge.org/external/8/846.pdf, \n      * uses the sum of arithmetic progression formula,\n      * What is the minimum number of steps in order to get from x to y? \n      * The length of the first and the last step must be 1.\n-     * The length of a step must be nonnegative and\n-can be by one bigger than, equal to, or by one smaller than the length of the previous step  */\n+     * The length of a step must be nonnegative and can be by one bigger than, equal to, or by one smaller \n+     * than the length of the previous step  */\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n"
                },
                {
                    "date": 1729835849625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n      * than the length of the previous step  */\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n-        if(file.has_value()) assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+        if(file.has_value()) \n+          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n         int tc;\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n"
                },
                {
                    "date": 1729838804811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          assert(std::freopen(file.value(), \"r\", stdin) != nullptr);\n+          std::freopen(file.value(), \"r\", stdin) != nullptr);\n         int tc;\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n"
                },
                {
                    "date": 1729838810655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-#include <cassert>\n+// #include <cassert>\n #include <optional>\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n@@ -13,9 +13,9 @@\n     int minSteps(int s, int e) { return 0; }\n     void submit(std::optional<char*> file)\n     {\n         if(file.has_value()) \n-          std::freopen(file.value(), \"r\", stdin) != nullptr);\n+          std::freopen(file.value(), \"r\", stdin);\n         int tc;\n         std::cin >> tc;\n         while(--tc >= 0)\n         {\n"
                },
                {
                    "date": 1729838843101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// #include <cassert>\n #include <optional>\n #include <iostream>\n \n namespace algorithms::maths::onlinejudge::steps\n"
                }
            ],
            "date": 1729835396695,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::maths::onlinejudge::steps\n{\n    \n}"
        }
    ]
}