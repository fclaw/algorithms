{
    "sourceFile": "algorithms/graph/leetcode/canReach.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1724996635666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724996643170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n \n \n namespace algorithms::graph::leetcode::can_reach\n {\n-    \n+    /**\n+     * https://leetcode.com/problems/jump-game-iii\n+     */\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996660999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,10 @@\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n+     * \n      */\n+        bool canReach(vector<int>& arr, int start) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996666182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n \n \n+\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n      * \n      */\n-        bool canReach(vector<int>& arr, int start) {\n+    bool canReach(vector<int>& arr, int start) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996672269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+#include <ve\n \n \n-\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n"
                },
                {
                    "date": 1724996679134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n-#include <ve\n+#include <vector>\n \n-\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n      * \n      */\n-    bool canReach(vector<int>& arr, int start) {\n+    bool canReach(std::vector<int>& arr, int start) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996684517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,8 @@\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n      * \n      */\n-    bool canReach(std::vector<int>& arr, int start) {\n+    bool canReach(const std::vector<int>& arr, int start) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996696097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n      * \n      */\n-    bool canReach(const std::vector<int>& arr, int start) {\n-        \n+    bool canReach(const std::vector<int>& xs, int start) \n+    {\n+        return false;    \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996708667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n-     * \n+     * Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\n+\n+Notice that you can not jump outside of the array at any time.\n      */\n     bool canReach(const std::vector<int>& xs, int start) \n     {\n         return false;    \n"
                },
                {
                    "date": 1724996714593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n namespace algorithms::graph::leetcode::can_reach\n {\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n-     * Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\n+     * Given an array of non-negative integers arr, you are initially positioned at start index of the array. \n+     * When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\n \n Notice that you can not jump outside of the array at any time.\n      */\n     bool canReach(const std::vector<int>& xs, int start) \n"
                },
                {
                    "date": 1724996722337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n     /**\n      * https://leetcode.com/problems/jump-game-iii\n      * Given an array of non-negative integers arr, you are initially positioned at start index of the array. \n      * When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\n-\n Notice that you can not jump outside of the array at any time.\n      */\n     bool canReach(const std::vector<int>& xs, int start) \n     {\n"
                },
                {
                    "date": 1724996730637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n      * https://leetcode.com/problems/jump-game-iii\n      * Given an array of non-negative integers arr, you are initially positioned at start index of the array. \n      * When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach any index with value 0.\n      * Notice that you can not jump outside of the array at any time. */\n-    bool canReach(const std::vector<int>& xs, int start) \n+    bool canReach(const std::vector<int>& xs, int start)\n     {\n         return false;    \n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1724996635666,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::leetcode::can_reach\n{\n    \n}"
        }
    ]
}