{
    "sourceFile": "algorithms/dp/leetcode/minOperations.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1719900066550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719900071980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n \n-int minDistance(string word1, string word2) {\n+int minDistance(std::string word1, string word2) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900077018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n \n-int minDistance(std::string word1, string word2) {\n+int minDistance(std::string word1, std::string word2) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900088289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <str\n \n \n-\n int minDistance(std::string word1, std::string word2) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900100823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n-#include <str\n+#include <string>\n \n+namespace algorithms::dp::leetcode\n+{\n \n int minDistance(std::string word1, std::string word2) {\n         \n     }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900107698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n #include <string>\n \n namespace algorithms::dp::leetcode\n {\n-\n-int minDistance(std::string word1, std::string word2) {\n+    int minDistance(std::string word1, std::string word2) {\n         \n\\ No newline at end of file\n-    }\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900113103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n #include <string>\n \n namespace algorithms::dp::leetcode\n {\n-    int minDistance(std::string word1, std::string word2) {\n-        \n-    }\n+    int minDistance(std::string word1, std::string word2) \n+    { }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900121099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #include <string>\n \n namespace algorithms::dp::leetcode\n {\n+    // https://leetcode.com/problems/edit-distance\n     int minDistance(std::string word1, std::string word2) \n     { }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900127185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,8 @@\n \n namespace algorithms::dp::leetcode\n {\n     // https://leetcode.com/problems/edit-distance\n+    \n     int minDistance(std::string word1, std::string word2) \n     { }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719900132607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n {\n     // https://leetcode.com/problems/edit-distance\n     Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\n You have the following three operations permitted on a word:\n-\n Insert a character\n Delete a character\n Replace a character\n     int minDistance(std::string word1, std::string word2) \n"
                }
            ],
            "date": 1719900066550,
            "name": "Commit-0",
            "content": "\n\n\nint minDistance(string word1, string word2) {\n        \n    }"
        }
    ]
}