{
    "sourceFile": "algorithms/graph.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1717665218227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717665229983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,5 +23,6 @@\n         }\n     }\n \n private:\n-    std::ve\n\\ No newline at end of file\n+       std::vector<std::vector<int>> adjList;\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717665238439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,5 @@\n             }\n             std::cout << std::endl;\n         }\n     }\n-\n-private:\n-       std::vector<std::vector<int>> adjList;\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717665243858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+#include <iostream>\n+#include <vector>\n+#include <string>\n+\n+class Graph {\n+private:\n+       std::vector<std::vector<int>> adjList;\n+public:\n+    Graph(int vertices) {\n+        adjList.resize(vertices);\n+    }\n+\n+    void addEdge(int vertex1, int vertex2) {\n+        adjList[vertex1].push_back(vertex2);\n+        adjList[vertex2].push_back(vertex1);  // For undirected graph\n+    }\n+\n+    void display() const {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << i << \" : \";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << neighbor << \" \";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717665252837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+#include <iostream>\n+#include <vector>\n+#include <string>\n+\n+class Graph {\n+private:\n+    std::vector<std::vector<int>> adjList;\n+public:\n+    Graph(int vertices) {\n+        adjList.resize(vertices);\n+    }\n+\n+    void addEdge(int vertex1, int vertex2) {\n+        adjList[vertex1].push_back(vertex2);\n+        adjList[vertex2].push_back(vertex1);  // For undirected graph\n+    }\n+\n+    void display() const {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << i << \" : \";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << neighbor << \" \";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717665260580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n #include <iostream>\n #include <vector>\n-#include <string>\n \n class Graph {\n private:\n     std::vector<std::vector<int>> adjList;\n@@ -23,57 +22,5 @@\n             }\n             std::cout << std::endl;\n         }\n     }\n-};\n-#include <iostream>\n-#include <vector>\n-#include <string>\n-\n-class Graph {\n-private:\n-       std::vector<std::vector<int>> adjList;\n-public:\n-    Graph(int vertices) {\n-        adjList.resize(vertices);\n-    }\n-\n-    void addEdge(int vertex1, int vertex2) {\n-        adjList[vertex1].push_back(vertex2);\n-        adjList[vertex2].push_back(vertex1);  // For undirected graph\n-    }\n-\n-    void display() const {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << i << \" : \";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << neighbor << \" \";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n-};\n-#include <iostream>\n-#include <vector>\n-#include <string>\n-\n-class Graph {\n-public:\n-    Graph(int vertices) {\n-        adjList.resize(vertices);\n-    }\n-\n-    void addEdge(int vertex1, int vertex2) {\n-        adjList[vertex1].push_back(vertex2);\n-        adjList[vertex2].push_back(vertex1);  // For undirected graph\n-    }\n-\n-    void display() const {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << i << \" : \";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << neighbor << \" \";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717665278745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,12 @@\n     Graph(int vertices) {\n         adjList.resize(vertices);\n     }\n \n-    void addEdge(int vertex1, int vertex2) {\n+    void addEdge(int vertex1, int vertex2) \n+    {\n         adjList[vertex1].push_back(vertex2);\n-        adjList[vertex2].push_back(vertex1);  // For undirected graph\n+        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n     }\n \n     void display() const {\n         for (size_t i = 0; i < adjList.size(); ++i) {\n"
                },
                {
                    "date": 1717665285209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n class Graph {\n private:\n     std::vector<std::vector<int>> adjList;\n public:\n-    Graph(int vertices) {\n+    Graph(int vertices) \n+    {\n         adjList.resize(vertices);\n     }\n \n     void addEdge(int vertex1, int vertex2) \n@@ -14,9 +15,10 @@\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n     }\n \n-    void display() const {\n+    void display() const \n+    {\n         for (size_t i = 0; i < adjList.size(); ++i) {\n             std::cout << i << \" : \";\n             for (const auto& neighbor : adjList[i]) {\n                 std::cout << neighbor << \" \";\n"
                },
                {
                    "date": 1717665486368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    void addEdge(int vertex1, int vertex2) \n+    Graph addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n     }\n"
                },
                {
                    "date": 1717665492284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     Graph addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n+        return this;\n     }\n \n     void display() const \n     {\n"
                },
                {
                    "date": 1717665506888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     Graph addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n-        return this;\n+        return *this;\n     }\n \n     void display() const \n     {\n"
                },
                {
                    "date": 1717665575515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    Graph addEdge(int vertex1, int vertex2) \n+    Graph& addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n         return *this;\n"
                },
                {
                    "date": 1717665685507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     Graph& addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n-        return *this;\n+        return this;\n     }\n \n     void display() const \n     {\n"
                },
                {
                    "date": 1717666103290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    Graph& addEdge(int vertex1, int vertex2) \n+    Graph* addEdge(int vertex1, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n         return this;\n@@ -26,5 +26,30 @@\n             }\n             std::cout << std::endl;\n         }\n     }\n+};\n+\n+class WeightedGraph {\n+public:\n+    WeightedGraph(int vertices) {\n+        adjList.resize(vertices);\n+    }\n+\n+    void addEdge(int vertex1, int vertex2, int weight) {\n+        adjList[vertex1].emplace_back(vertex2, weight);\n+        adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+    }\n+\n+    void display() const {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << \"Vertex \" << i << \":\\n\";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+\n+private:\n+    std::vector<std::vector<std::pair<int, int>>> adjList;  // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717666110151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+#include <iostream>\n+#include <vector>\n+\n+class Graph {\n+private:\n+    std::vector<std::vector<int>> adjList;\n+public:\n+    Graph(int vertices) \n+    {\n+        adjList.resize(vertices);\n+    }\n+\n+    Graph* addEdge(int vertex1, int vertex2) \n+    {\n+        adjList[vertex1].push_back(vertex2);\n+        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n+        return this;\n+    }\n+\n+    void display() const \n+    {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << i << \" : \";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << neighbor << \" \";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n+\n+class WeightedGraph {\n+public:\n+    WeightedGraph(int vertices) {\n+        adjList.resize(vertices);\n+    }\n+\n+    void addEdge(int vertex1, int vertex2, int weight) {\n+        adjList[vertex1].emplace_back(vertex2, weight);\n+        adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+    }\n+\n+    void display() const {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << \"Vertex \" << i << \":\\n\";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717666119262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,65 +29,16 @@\n     }\n };\n \n class WeightedGraph {\n-public:\n-    WeightedGraph(int vertices) {\n-        adjList.resize(vertices);\n-    }\n-\n-    void addEdge(int vertex1, int vertex2, int weight) {\n-        adjList[vertex1].emplace_back(vertex2, weight);\n-        adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n-    }\n-\n-    void display() const {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << \"Vertex \" << i << \":\\n\";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n-};\n-#include <iostream>\n-#include <vector>\n-\n-class Graph {\n private:\n-    std::vector<std::vector<int>> adjList;\n+    std::vector<std::vector<std::pair<int, int>>> adjList;  // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n public:\n-    Graph(int vertices) \n+    WeightedGraph(int vertices) \n     {\n         adjList.resize(vertices);\n     }\n \n-    Graph* addEdge(int vertex1, int vertex2) \n-    {\n-        adjList[vertex1].push_back(vertex2);\n-        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n-        return this;\n-    }\n-\n-    void display() const \n-    {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << i << \" : \";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << neighbor << \" \";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n-};\n-\n-class WeightedGraph {\n-public:\n-    WeightedGraph(int vertices) {\n-        adjList.resize(vertices);\n-    }\n-\n     void addEdge(int vertex1, int vertex2, int weight) {\n         adjList[vertex1].emplace_back(vertex2, weight);\n         adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n     }\n@@ -100,8 +51,5 @@\n             }\n             std::cout << std::endl;\n         }\n     }\n-\n-private:\n-    std::vector<std::vector<std::pair<int, int>>> adjList;  // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717666124654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,14 +37,16 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    void addEdge(int vertex1, int vertex2, int weight) {\n+    void addEdge(int vertex1, int vertex2, int weight) \n+    {\n         adjList[vertex1].emplace_back(vertex2, weight);\n         adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n     }\n \n-    void display() const {\n+    void display() const \n+    {\n         for (size_t i = 0; i < adjList.size(); ++i) {\n             std::cout << \"Vertex \" << i << \":\\n\";\n             for (const auto& neighbor : adjList[i]) {\n                 std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n"
                },
                {
                    "date": 1717666133852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n };\n \n class WeightedGraph {\n private:\n-    std::vector<std::vector<std::pair<int, int>>> adjList;  // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n+// Adjacency list: each vertex has a list of pairs (neighbor, weight)\n+    std::vector<std::vector<std::pair<int, int>>> adjList;\n public:\n     WeightedGraph(int vertices) \n     {\n         adjList.resize(vertices);\n"
                },
                {
                    "date": 1717666157629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n };\n \n class WeightedGraph {\n private:\n-// Adjacency list: each vertex has a list of pairs (neighbor, weight)\n+    // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n     std::vector<std::vector<std::pair<int, int>>> adjList;\n public:\n     WeightedGraph(int vertices) \n     {\n"
                },
                {
                    "date": 1717666285329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    void addEdge(int vertex1, int vertex2, int weight) \n+    WeightedGraph* addEdge(int vertex1, int vertex2, int weight) \n     {\n         adjList[vertex1].emplace_back(vertex2, weight);\n         adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n     }\n"
                },
                {
                    "date": 1717666293261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n \n     WeightedGraph* addEdge(int vertex1, int vertex2, int weight) \n     {\n         adjList[vertex1].emplace_back(vertex2, weight);\n-        adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+        // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+        return this;\n     }\n \n     void display() const \n     {\n"
                },
                {
                    "date": 1717666322726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    WeightedGraph* addEdge(int vertex1, int vertex2, int weight) \n+    WeightedGraph* addEdge(int , int vertex2, int weight) \n     {\n         adjList[vertex1].emplace_back(vertex2, weight);\n         // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n         return this;\n"
                },
                {
                    "date": 1717666328202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    WeightedGraph* addEdge(int , int vertex2, int weight) \n+    WeightedGraph* addEdge(int from, int to, int weight) \n     {\n         adjList[vertex1].emplace_back(vertex2, weight);\n         // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n         return this;\n"
                },
                {
                    "date": 1717666333407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     }\n \n     WeightedGraph* addEdge(int from, int to, int weight) \n     {\n-        adjList[vertex1].emplace_back(vertex2, weight);\n+        adjList[from].emplace_back(vertex2, weight);\n         // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n         return this;\n     }\n \n"
                },
                {
                    "date": 1717666338739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     }\n \n     WeightedGraph* addEdge(int from, int to, int weight) \n     {\n-        adjList[from].emplace_back(vertex2, weight);\n+        adjList[from].emplace_back(to, weight);\n         // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n         return this;\n     }\n \n"
                },
                {
                    "date": 1717666346729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    Graph* addEdge(int vertex1, int vertex2) \n+    Graph* addEdge(int from, int vertex2) \n     {\n         adjList[vertex1].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n         return this;\n"
                },
                {
                    "date": 1717666354603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+#include <iostream>\n+#include <vector>\n+\n+class Graph {\n+private:\n+    std::vector<std::vector<int>> adjList;\n+public:\n+    Graph(int vertices) \n+    {\n+        adjList.resize(vertices);\n+    }\n+\n+    Graph* addEdge(int source, int ) \n+    {\n+        adjList[vertex1].push_back(vertex2);\n+        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n+        return this;\n+    }\n+\n+    void display() const \n+    {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << i << \" : \";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << neighbor << \" \";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n+\n+class WeightedGraph {\n+private:\n+    // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n+    std::vector<std::vector<std::pair<int, int>>> adjList;\n+public:\n+    WeightedGraph(int vertices) \n+    {\n+        adjList.resize(vertices);\n+    }\n+\n+    WeightedGraph* addEdge(int from, int to, int weight) \n+    {\n+        adjList[from].emplace_back(to, weight);\n+        // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+        return this;\n+    }\n+\n+    void display() const \n+    {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << \"Vertex \" << i << \":\\n\";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717666362522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n     {\n         adjList.resize(vertices);\n     }\n \n-    Graph* addEdge(int source, int ) \n+    Graph* addEdge(int source, int dest) \n     {\n-        adjList[vertex1].push_back(vertex2);\n+        adjList[sour].push_back(vertex2);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n         return this;\n     }\n \n@@ -55,64 +55,5 @@\n             }\n             std::cout << std::endl;\n         }\n     }\n-};\n-#include <iostream>\n-#include <vector>\n-\n-class Graph {\n-private:\n-    std::vector<std::vector<int>> adjList;\n-public:\n-    Graph(int vertices) \n-    {\n-        adjList.resize(vertices);\n-    }\n-\n-    Graph* addEdge(int from, int vertex2) \n-    {\n-        adjList[vertex1].push_back(vertex2);\n-        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n-        return this;\n-    }\n-\n-    void display() const \n-    {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << i << \" : \";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << neighbor << \" \";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n-};\n-\n-class WeightedGraph {\n-private:\n-    // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n-    std::vector<std::vector<std::pair<int, int>>> adjList;\n-public:\n-    WeightedGraph(int vertices) \n-    {\n-        adjList.resize(vertices);\n-    }\n-\n-    WeightedGraph* addEdge(int from, int to, int weight) \n-    {\n-        adjList[from].emplace_back(to, weight);\n-        // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n-        return this;\n-    }\n-\n-    void display() const \n-    {\n-        for (size_t i = 0; i < adjList.size(); ++i) {\n-            std::cout << \"Vertex \" << i << \":\\n\";\n-            for (const auto& neighbor : adjList[i]) {\n-                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n-            }\n-            std::cout << std::endl;\n-        }\n-    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1717666368729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     }\n \n     Graph* addEdge(int source, int dest) \n     {\n-        adjList[sour].push_back(vertex2);\n+        adjList[source].push_back(dest);\n         // adjList[vertex2].push_back(vertex1);  // For undirected graph\n         return this;\n     }\n \n"
                },
                {
                    "date": 1717666395795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+#include <iostream>\n+#include <vector>\n+\n+class Graph {\n+private:\n+    std::vector<std::vector<int>> adjList;\n+public:\n+    Graph(int vertices) \n+    {\n+        adjList.resize(vertices);\n+    }\n+\n+    Graph* addEdge(int source, int dest) \n+    {\n+        adjList[source].push_back(dest);\n+        // adjList[vertex2].push_back(vertex1);  // For undirected graph\n+        return this;\n+    }\n+\n+    void display() const \n+    {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << i << \" : \";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << neighbor << \" \";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n+\n+class WeightedGraph {\n+private:\n+    // Adjacency list: each vertex has a list of pairs (neighbor, weight)\n+    std::vector<std::vector<std::pair<int, int>>> adjList;\n+public:\n+    WeightedGraph(int vertices) \n+    {\n+        adjList.resize(vertices);\n+    }\n+\n+    WeightedGraph* addEdge(int source, int to, int weight) \n+    {\n+        adjList[from].emplace_back(to, weight);\n+        // adjList[vertex2].emplace_back(vertex1, weight);  // For undirected graph\n+        return this;\n+    }\n+\n+    void display() const \n+    {\n+        for (size_t i = 0; i < adjList.size(); ++i) {\n+            std::cout << \"Vertex \" << i << \":\\n\";\n+            for (const auto& neighbor : adjList[i]) {\n+                std::cout << \" -> (Vertex: \" << neighbor.first << \", Weight: \" << neighbor.second << \")\\n\";\n+            }\n+            std::cout << std::endl;\n+        }\n+    }\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717665218227,
            "name": "Commit-0",
            "content": "#include <iostream>\n#include <vector>\n#include <string>\n\nclass Graph {\npublic:\n    Graph(int vertices) {\n        adjList.resize(vertices);\n    }\n\n    void addEdge(int vertex1, int vertex2) {\n        adjList[vertex1].push_back(vertex2);\n        adjList[vertex2].push_back(vertex1);  // For undirected graph\n    }\n\n    void display() const {\n        for (size_t i = 0; i < adjList.size(); ++i) {\n            std::cout << i << \" : \";\n            for (const auto& neighbor : adjList[i]) {\n                std::cout << neighbor << \" \";\n            }\n            std::cout << std::endl;\n        }\n    }\n\nprivate:\n    std::ve"
        }
    ]
}