{
    "sourceFile": "algorithms/graph/leetcode/minimumEffortPath.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1725016856653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725016863399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::leetcode::\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::min_effort\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016873775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,8 @@\n \n \n-namespace algorithms::graph::leetcode::min_effort\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::min_effort\n+{\n+    int minimumEffortPath(vector<vector<int>>& heights) {\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016880788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n \n \n namespace algorithms::graph::leetcode::min_effort\n {\n+\n+using heights = \n+\n     int minimumEffortPath(vector<vector<int>>& heights) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016890563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace algorithms::graph::leetcode::min_effort\n {\n \n using heights = \n"
                },
                {
                    "date": 1725016897700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::min_effort\n {\n \n-using heights = \n+using heights = vector<vector<int>>\n \n     int minimumEffortPath(vector<vector<int>>& heights) {\n         \n     }\n"
                },
                {
                    "date": 1725016904103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::min_effort\n {\n \n-using heights = vector<vector<int>>\n+using heights = std::vector<std::vector<int>>\n \n     int minimumEffortPath(vector<vector<int>>& heights) {\n         \n     }\n"
                },
                {
                    "date": 1725016909170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n namespace algorithms::graph::leetcode::min_effort\n {\n \n-using heights = std::vector<std::vector<int>>\n+using heights = std::vector<std::vector<int>>;\n \n-    int minimumEffortPath(vector<vector<int>>& heights) {\n+    int minimumEffortPath(& heights) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016914730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n {\n \n using heights = std::vector<std::vector<int>>;\n \n-    int minimumEffortPath(& heights) {\n+    int minimumEffortPath(const heights& heights) {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016921758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,12 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::min_effort\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+\n+    int minimumEffortPath(const heights& xs) \n+    {\n+        return 1;    \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725016931082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,20 +4,12 @@\n {\n \n using heights = std::vector<std::vector<int>>;\n \n+    /**\n+     * https://leetcode.com/problems/path-with-minimum-effort\n+     */\n     int minimumEffortPath(const heights& xs) \n     {\n         return 1;    \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::graph::leetcode::min_effort\n-{\n-\n-using heights = std::vector<std::vector<int>>;\n-\n-    int minimumEffortPath(const heights& heights) {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725017012670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,13 @@\n using heights = std::vector<std::vector<int>>;\n \n     /**\n      * https://leetcode.com/problems/path-with-minimum-effort\n+     * You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n+\n+A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n+\n+Return the minimum effort required to travel from the top-left cell to the bottom-right cell.\n      */\n     int minimumEffortPath(const heights& xs) \n     {\n         return 1;    \n"
                },
                {
                    "date": 1725017019558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n using heights = std::vector<std::vector<int>>;\n \n     /**\n      * https://leetcode.com/problems/path-with-minimum-effort\n-     * You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n+     * You are a hiker preparing for an upcoming hike. \n+     * You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n \n A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n \n Return the minimum effort required to travel from the top-left cell to the bottom-right cell.\n"
                },
                {
                    "date": 1725017029867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,10 @@\n     /**\n      * https://leetcode.com/problems/path-with-minimum-effort\n      * You are a hiker preparing for an upcoming hike. \n      * You are given heights, a 2D array of size rows x columns, where heights[row][col] \n-     * represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n+     * represents the height of cell (row, col). \n+     * You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n \n A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n \n Return the minimum effort required to travel from the top-left cell to the bottom-right cell.\n"
                },
                {
                    "date": 1725017062509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,22 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::min_effort\n+{\n+\n+using heights = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/path-with-minimum-effort\n+     * You are a hiker preparing for an upcoming hike. \n+     * You are given heights, a 2D array of size rows x columns, where heights[row][col] \n+     * represents the height of cell (row, col). \n+     * You are situated in the top-left cell, (0, 0), and \n+     * you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). \n+     * You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\n+     * A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\n+     * Return the minimum effort required to travel from the top-left cell to the bottom-right cell. */\n+    int minimumEffortPath(const heights& xs) \n+    {\n+        return 1;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1725016856653,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::leetcode::"
        }
    ]
}