{
    "sourceFile": "algorithms/onlinejudge/dp/lis.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1720527170309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720527195572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,15 @@\n-namespace algorithms::onlinejudge::dp\n\\ No newline at end of file\n+namespace algorithms::onlinejudge::dp\n+{\n+        int lengthOfLIS(std::vector<int> nums) \n+    {\n+        std::vector<int> dp(nums.size(), 1);\n+        // dp[0] = 1;\n+        for (int i = 1; i < dp.size(); i++)\n+          for (int j = 0; j < i; j++)\n+            if(nums[i] > nums[j])\n+              dp[i] = std::max(dp[i], 1 + dp[j]);\n+          \n+\n+        return *max_element(dp.begin(), dp.end());\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527217341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n namespace algorithms::onlinejudge::dp\n {\n-        int lengthOfLIS(std::vector<int> nums) \n+    /\n+    int lengthOfLIS(std::vector<int> nums) \n     {\n         std::vector<int> dp(nums.size(), 1);\n         // dp[0] = 1;\n         for (int i = 1; i < dp.size(); i++)\n"
                },
                {
                    "date": 1720527225384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n+\n+\n namespace algorithms::onlinejudge::dp\n {\n-    /\n+    /*\n+      https://onlinejudge.org/external/4/481.pdf\n+    */\n     int lengthOfLIS(std::vector<int> nums) \n     {\n         std::vector<int> dp(nums.size(), 1);\n         // dp[0] = 1;\n"
                },
                {
                    "date": 1720527232086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+#include <vector>\n \n-\n namespace algorithms::onlinejudge::dp\n {\n     /*\n       https://onlinejudge.org/external/4/481.pdf\n"
                },
                {
                    "date": 1720527247834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     */\n     int lengthOfLIS(std::vector<int> nums) \n     {\n         std::vector<int> dp(nums.size(), 1);\n-        // dp[0] = 1;\n+\n         for (int i = 1; i < dp.size(); i++)\n           for (int j = 0; j < i; j++)\n             if(nums[i] > nums[j])\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n"
                },
                {
                    "date": 1720527303435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+#include <vector>\n+\n+namespace algorithms::onlinejudge::dp\n+{\n+    /*\n+      https://onlinejudge.org/external/4/481.pdf\n+    */\n+    int lengthOfLIS(std::vector<int> nums) \n+    {\n+        std::vector<int> dp(nums.size(), 1);\n+\n+        for (int i = 1; i < dp.size(); i++)\n+          for (int j = 0; j < i; j++)\n+            if(nums[i] > nums[j])\n+              dp[i] = std::max(dp[i], 1 + dp[j]);\n+        \n+          \n+\n+        return *max_element(dp.begin(), dp.end());\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527314679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,30 +12,10 @@\n         for (int i = 1; i < dp.size(); i++)\n           for (int j = 0; j < i; j++)\n             if(nums[i] > nums[j])\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n-        \n-          \n \n-        return *max_element(dp.begin(), dp.end());\n-    }\n-}\n-#include <vector>\n+        std::vector<int>   \n \n-namespace algorithms::onlinejudge::dp\n-{\n-    /*\n-      https://onlinejudge.org/external/4/481.pdf\n-    */\n-    int lengthOfLIS(std::vector<int> nums) \n-    {\n-        std::vector<int> dp(nums.size(), 1);\n-\n-        for (int i = 1; i < dp.size(); i++)\n-          for (int j = 0; j < i; j++)\n-            if(nums[i] > nums[j])\n-              dp[i] = std::max(dp[i], 1 + dp[j]);\n-          \n-\n         return *max_element(dp.begin(), dp.end());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527326096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,11 @@\n           for (int j = 0; j < i; j++)\n             if(nums[i] > nums[j])\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n \n-        std::vector<int>   \n+        int \n \n+        std::vector<int> seq()  \n+\n         return *max_element(dp.begin(), dp.end());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527331695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n           for (int j = 0; j < i; j++)\n             if(nums[i] > nums[j])\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n \n-        int \n+        int l = *max_element(dp.begin(), dp.end());\n \n         std::vector<int> seq()  \n \n         return *max_element(dp.begin(), dp.end());\n"
                },
                {
                    "date": 1720527341458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n \n         int l = *max_element(dp.begin(), dp.end());\n \n-        std::vector<int> seq()  \n+        std::vector<int> seq(l);  \n \n-        return *max_element(dp.begin(), dp.end());\n+        return ;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527349160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n     /*\n       https://onlinejudge.org/external/4/481.pdf\n     */\n-    int lengthOfLIS(std::vector<int> nums) \n+    std::tuple<> lengthOfLIS(std::vector<int> nums) \n     {\n         std::vector<int> dp(nums.size(), 1);\n \n         for (int i = 1; i < dp.size(); i++)\n"
                },
                {
                    "date": 1720527358341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n     /*\n       https://onlinejudge.org/external/4/481.pdf\n     */\n-    std::tuple<> lengthOfLIS(std::vector<int> nums) \n+    std::tuple<int, std::vector<int>> lengthOfLIS(std::vector<int> nums) \n     {\n         std::vector<int> dp(nums.size(), 1);\n \n         for (int i = 1; i < dp.size(); i++)\n"
                },
                {
                    "date": 1720527364135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n               dp[i] = std::max(dp[i], 1 + dp[j]);\n \n         int l = *max_element(dp.begin(), dp.end());\n \n-        std::vector<int> seq(l);  \n+        std::vector<int> seq(l);\n \n         return ;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720527398078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \n         int l = *max_element(dp.begin(), dp.end());\n \n         std::vector<int> seq(l);\n+\n         \n \n         return ;\n     }\n"
                },
                {
                    "date": 1720527473947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n         auto ptr = max_element(dp.begin(), dp.end());\n         std::vector<int> seq(l);\n \n-        for(auto i = ptr; i != )\n+        for(auto i = ptr; i != dp.)\n \n         return ;\n     }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720527170309,
            "name": "Commit-0",
            "content": "namespace algorithms::onlinejudge::dp"
        }
    ]
}