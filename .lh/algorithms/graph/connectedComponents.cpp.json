{
    "sourceFile": "algorithms/graph/connectedComponents.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 40,
            "patches": [
                {
                    "date": 1723656722585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723656900539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace algorithms::graph::cc\n {\n-    \n+    ucc\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657096491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n \n namespace algorithms::graph::cc\n {\n-    ucc\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657102106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n \n \n namespace algorithms::graph::cc\n-{\n-    \n+{    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657122741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n \n \n namespace algorithms::graph::cc\n-{    \n+{\n+\n+using graph = std::vector<std::vector >\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657129146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+\n+\n+\n+namespace algorithms::graph::cc\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657142414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,10 @@\n+#include <vector>\n+#include <queue>\n \n \n-\n namespace algorithms::graph::cc\n {\n \n using graph = std::vector<std::vector<int>>;\n \n-}\n-\n-\n-namespace algorithms::graph::cc\n-{\n-\n-using graph = std::vector<std::vector >\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657147498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n #include <vector>\n #include <queue>\n \n-\n namespace algorithms::graph::cc\n {\n \n using graph = std::vector<std::vector<int>>;\n \n+   \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657171444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n namespace algorithms::graph::cc\n {\n \n using graph = std::vector<std::vector<int>>;\n-\n+using cc = \n    \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657182287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n namespace algorithms::graph::cc\n {\n \n using graph = std::vector<std::vector<int>>;\n-using cc = \n+using cc = std::vector<std::pair<int, ont>\n    \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657188322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n namespace algorithms::graph::cc\n {\n \n using graph = std::vector<std::vector<int>>;\n-using cc = std::vector<std::pair<int, ont>\n+using cc = std::vector<std::pair<int, int>>;\n+\n+\n    \n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657195222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,7 @@\n \n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n+    cc \n \n-   \n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657204548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,7 +6,7 @@\n \n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n-    cc \n+    cc countComponents()\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657210934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,7 +6,7 @@\n \n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n-    cc countComponents()\n+    cc countComponents(gra)\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657216463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,12 @@\n+#include <vector>\n+#include <queue>\n+\n+namespace algorithms::graph::cc\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+using cc = std::vector<std::pair<int, int>>;\n+\n+    cc countComponents(grap&)\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657223295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,19 +6,7 @@\n \n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n-    cc countComponents(grap&)\n+    cc countComponents(const graph& g)\n \n-}\n-#include <vector>\n-#include <queue>\n-\n-namespace algorithms::graph::cc\n-{\n-\n-using graph = std::vector<std::vector<int>>;\n-using cc = std::vector<std::pair<int, int>>;\n-\n-    cc countComponents(gra)\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657228434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,7 +6,7 @@\n \n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n-    cc countComponents(const graph& g)\n+    cc countComponents(int v, const graph& g)\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657237437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,8 @@\n using graph = std::vector<std::vector<int>>;\n using cc = std::vector<std::pair<int, int>>;\n \n     cc countComponents(int v, const graph& g)\n-\n+    {\n+        return \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657630506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,8 @@\n using cc = std::vector<std::pair<int, int>>;\n \n     cc countComponents(int v, const graph& g)\n     {\n-        return \n+        \n+        return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657637735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,8 @@\n using cc = std::vector<std::pair<int, int>>;\n \n     cc countComponents(int v, const graph& g)\n     {\n-        \n+        int vis\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657645174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,16 @@\n+#include <vector>\n+#include <queue>\n+\n+namespace algorithms::graph::cc\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+using cc = std::vector<std::pair<int, int>>;\n+\n+    cc countComponents(int v, const graph& g)\n+    {\n+        int visited = 0;\n+        cc \n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657650384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,23 +9,8 @@\n \n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n-        cc \n+        cc ans;\n         return {};\n     }\n-}\n-#include <vector>\n-#include <queue>\n-\n-namespace algorithms::graph::cc\n-{\n-\n-using graph = std::vector<std::vector<int>>;\n-using cc = std::vector<std::pair<int, int>>;\n-\n-    cc countComponents(int v, const graph& g)\n-    {\n-        int vis\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657661420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,7 +10,8 @@\n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n         cc ans;\n+        \n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657668082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,8 @@\n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n         cc ans;\n-        \n+        for(int i = 0; )\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657675749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,8 @@\n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n         cc ans;\n-        for(int i = 0; )\n+        for(int i = 0; i < v; i++)\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657688727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,7 +11,8 @@\n     {\n         int visited = 0;\n         cc ans;\n         for(int i = 0; i < v; i++)\n+          if(visited & (1 << i))\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657697022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,11 @@\n     {\n         int visited = 0;\n         cc ans;\n         for(int i = 0; i < v; i++)\n-          if(visited & (1 << i))\n+          if(!(visited & (1 << i)))\n+          {\n+            \n+          }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657702662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,14 @@\n \n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n+        int \n         cc ans;\n         for(int i = 0; i < v; i++)\n           if(!(visited & (1 << i)))\n           {\n-            \n+\n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657710223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,14 @@\n \n     cc countComponents(int v, const graph& g)\n     {\n         int visited = 0;\n-        int \n+        int n = 0;\n         cc ans;\n         for(int i = 0; i < v; i++)\n           if(!(visited & (1 << i)))\n           {\n-\n+            \n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657729135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n         cc ans;\n         for(int i = 0; i < v; i++)\n           if(!(visited & (1 << i)))\n           {\n+            n++;\n             \n           }\n         return {};\n     }\n"
                },
                {
                    "date": 1723657756890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         for(int i = 0; i < v; i++)\n           if(!(visited & (1 << i)))\n           {\n             n++;\n-            \n+            std::qu\n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657765396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,10 @@\n         for(int i = 0; i < v; i++)\n           if(!(visited & (1 << i)))\n           {\n             n++;\n-            std::qu\n+            std::queue<int> q;\n+            q.p\n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657770732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n           if(!(visited & (1 << i)))\n           {\n             n++;\n             std::queue<int> q;\n-            q.p\n+            q.push(i);\n+            \n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657779652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n           {\n             n++;\n             std::queue<int> q;\n             q.push(i);\n-            \n+            ans.push_back({})\n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657787629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+#include <vector>\n+#include <queue>\n+\n+namespace algorithms::graph::cc\n+{\n+\n+using graph = std::vector<std::vector<int>>;\n+using cc = std::vector<std::pair<int, int>>;\n+\n+    cc countComponents(int v, const graph& g)\n+    {\n+        int visited = 0;\n+        int n = 0;\n+        cc ans;\n+        for(int i = 0; i < v; i++)\n+          if(!(visited & (1 << i)))\n+          {\n+            n++;\n+            std::queue<int> q;\n+            q.push(i);\n+            ans.push_back({i, })\n+          }\n+        return {};\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657793731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,34 +17,10 @@\n           {\n             n++;\n             std::queue<int> q;\n             q.push(i);\n-            ans.push_back({i, })\n+            ans.push_back({i, n});\n+            while(!q.)\n           }\n         return {};\n     }\n-}\n-#include <vector>\n-#include <queue>\n-\n-namespace algorithms::graph::cc\n-{\n-\n-using graph = std::vector<std::vector<int>>;\n-using cc = std::vector<std::pair<int, int>>;\n-\n-    cc countComponents(int v, const graph& g)\n-    {\n-        int visited = 0;\n-        int n = 0;\n-        cc ans;\n-        for(int i = 0; i < v; i++)\n-          if(!(visited & (1 << i)))\n-          {\n-            n++;\n-            std::queue<int> q;\n-            q.push(i);\n-            ans.push_back({})\n-          }\n-        return {};\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657828711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,12 @@\n           {\n             n++;\n             std::queue<int> q;\n             q.push(i);\n-            ans.push_back({i, n});\n-            while(!q.)\n+            while(!q.empty())\n+            {\n+\n+            }\n           }\n         return {};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723657835389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n             std::queue<int> q;\n             q.push(i);\n             while(!q.empty())\n             {\n+                int v = \n+                ans.push_back({i, n});\n \n             }\n           }\n         return {};\n"
                },
                {
                    "date": 1723657842262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n             std::queue<int> q;\n             q.push(i);\n             while(!q.empty())\n             {\n-                int v = \n+                int v = q.front();\n                 ans.push_back({i, n});\n \n             }\n           }\n"
                },
                {
                    "date": 1723657849484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n             while(!q.empty())\n             {\n                 int v = q.front();\n                 q.pop();\n-                ans.push_back({i, n});\n+                ans.push_back({v, n});\n \n             }\n           }\n         return {};\n"
                },
                {
                    "date": 1723657856511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n             {\n                 int v = q.front();\n                 q.pop();\n                 ans.push_back({v, n});\n+                for(auto u : )\n \n             }\n           }\n         return {};\n"
                }
            ],
            "date": 1723656722585,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::cc\n{\n    \n}"
        }
    ]
}