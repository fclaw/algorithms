{
    "sourceFile": "algorithms/graph/leetcode/ladderLength.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1724926147875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724926194292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::leetcode::\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::doublets\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926200991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n \n \n-namespace algorithms::graph::leetcode::doublets\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::doublets\n+{\n+    ladderLength\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926209805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n namespace algorithms::graph::leetcode::doublets\n {\n+    /** */\n     ladderLength\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926228503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n \n \n namespace algorithms::graph::leetcode::doublets\n {\n-    /** */\n-    ladderLength\n+    /**\n+     * https://leetcode.com/problems/word-ladder\n+     * \n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926233626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,8 @@\n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n-     * \n+     * */\n     \n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926241613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n \n \n+\n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n+    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n+        \n+    }   \n     \n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926250864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n+#\n \n \n-\n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n"
                },
                {
                    "date": 1724926258846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-#\n+#include <\n \n \n namespace algorithms::graph::leetcode::doublets\n {\n"
                },
                {
                    "date": 1724926266711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-#include <\n+#include <string>\n \n \n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n-    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n+    int ladderLength(std::string beginWord, string endWord, vector<string>& wordList) {\n         \n     }   \n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926281237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n #include <string>\n+#include <vector>\n \n \n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n-    int ladderLength(std::string beginWord, string endWord, vector<string>& wordList) {\n+    int ladderLength(std::string beginWord, std::string endWord, vector<string>& wordList) {\n         \n     }   \n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926287171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n-    int ladderLength(std::string beginWord, std::string endWord, vector<string>& wordList) {\n+    int ladderLength(std::string beginWord, std::string endWord, std::vector<std::string>& wordList) {\n         \n     }   \n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926292819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n-    int ladderLength(std::string beginWord, std::string endWord, std::vector<std::string>& wordList) {\n+    int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) {\n         \n     }   \n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926308094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * */\n-    int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) {\n-        \n+    int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) \n+    {\n+        return 1;    \n     }   \n     \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724926359226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n namespace algorithms::graph::leetcode::doublets\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n+     * https://onlinejudge.org/external/101/10150.pdf\n      * */\n     int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) \n     {\n         return 1;    \n"
                },
                {
                    "date": 1724926370583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n {\n     /**\n      * https://leetcode.com/problems/word-ladder\n      * https://onlinejudge.org/external/101/10150.pdf\n-     * \n+     * A Doublet is a pair of words that differ in exactly one letter; for example, “booster” and “rooster” or\n+“rooster” and “roaster” or “roaster” and “roasted”\n      * */\n     int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) \n     {\n         return 1;    \n"
                },
                {
                    "date": 1724926530054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,9 @@\n      * Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\n      * sk == endWord\n      * Given two words, beginWord and endWord, and a dictionary wordList, \n      * return the number of words in the shortest transformation sequence from beginWord to endWord, \n-     * or 0 if no such sequence exists.\n-     * */\n+     * or 0 if no such sequence exists. */\n     int ladderLength(std::string beginWord, std::string endWord, const std::vector<std::string>& wordList) \n     {\n         return 1;    \n     }   \n"
                }
            ],
            "date": 1724926147875,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::leetcode::"
        }
    ]
}