{
    "sourceFile": "algorithms/graph/leetcode/slidingPuzzle.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1725371819376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725371828010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n \n \n-namespace algorithms::graph::leetcode::\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::Sliding Puzzle\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371833790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,6 @@\n \n \n-namespace algorithms::graph::leetcode::Sliding Puzzle\n\\ No newline at end of file\n+namespace algorithms::graph::leetcode::sliding_puzzle\n+{\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371842303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n \n \n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n-    \n+    int slidingPuzzle(vector<vector<int>>& board) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371848194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,9 @@\n+#\n+\n+\n+namespace algorithms::graph::leetcode::sliding_puzzle\n+{\n+    int slidingPuzzle(vector<vector<int>>& board) \n+    {   \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371857252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,11 @@\n-#\n+#include <vector>\n \n-\n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n+\n+\n+\n     int slidingPuzzle(vector<vector<int>>& board) \n     {   \n     }\n-}\n-\n-\n-namespace algorithms::graph::leetcode::sliding_puzzle\n-{\n-    int slidingPuzzle(vector<vector<int>>& board) {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371864521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n \n+using board = \n \n-\n     int slidingPuzzle(vector<vector<int>>& board) \n     {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371871046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n \n-using board = \n+using board = vector<vector<int>>\n \n     int slidingPuzzle(vector<vector<int>>& board) \n     {   \n     }\n"
                },
                {
                    "date": 1725371877190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n \n-using board = vector<vector<int>>\n+using board = std::vector<std::vector<int>>\n \n     int slidingPuzzle(vector<vector<int>>& board) \n     {   \n     }\n"
                },
                {
                    "date": 1725371884661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n namespace algorithms::graph::leetcode::sliding_puzzle\n {\n \n-using board = std::vector<std::vector<int>>\n+using board = std::vector<std::vector<int>>;\n \n-    int slidingPuzzle(vector<vector<int>>& board) \n+    int slidingPuzzle(const board& board) \n     {   \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371891414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n {\n \n using board = std::vector<std::vector<int>>;\n \n-    int slidingPuzzle(const board& board) \n-    {   \n+    int slidingPuzzle(const board& b) \n+    {\n+        return 0;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725371909622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,11 @@\n {\n \n using board = std::vector<std::vector<int>>;\n \n+    /**\n+     * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n+     */\n     int slidingPuzzle(const board& b) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1725371921001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,13 @@\n using board = std::vector<std::vector<int>>;\n \n     /**\n      * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n+     * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n+\n+The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n+\n+Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1\n      */\n     int slidingPuzzle(const board& b) \n     {\n         return 0;\n"
                },
                {
                    "date": 1725371928470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n using board = std::vector<std::vector<int>>;\n \n     /**\n      * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n-     * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n+     * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n+     * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n \n The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n \n Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1\n"
                },
                {
                    "date": 1725371938869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n     /**\n      * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n      * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n      * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n-\n The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n \n Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1\n      */\n"
                },
                {
                    "date": 1725371948855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,9 @@\n     /**\n      * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n      * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n      * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n-The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n-\n+     * The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1\n      */\n     int slidingPuzzle(const board& b) \n     {\n"
                },
                {
                    "date": 1725371958473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,10 @@\n      * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n      * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n      * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n      * The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n-Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1\n+     * Given the puzzle board board, return the least number of moves required so that the state of the board is solved. \n+     * If it is impossible for the state of the board to be solved, return -1\n      */\n     int slidingPuzzle(const board& b) \n     {\n         return 0;\n"
                },
                {
                    "date": 1725371988737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,10 @@\n      * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n      * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n      * The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n      * Given the puzzle board board, return the least number of moves required so that the state of the board is solved. \n-     * If it is impossible for the state of the board to be solved, return -1 */\n+     * If it is impossible for the state of the board to be solved, return -1 \n+     * Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move.*/\n     int slidingPuzzle(const board& b) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1725372146833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+#include <vector>\n+\n+namespace algorithms::graph::leetcode::sliding_puzzle\n+{\n+\n+using board = std::vector<std::vector<int>>;\n+\n+    /**\n+     * https://leetcode.com/problems/sliding-puzzle/?envType=problem-list-v2&envId=breadth-first-search\n+     * On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. \n+     * A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\n+     * The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\n+     * Given the puzzle board board, return the least number of moves required so that the state of the board is solved. \n+     * If it is impossible for the state of the board to be solved, return -1 \n+     * Perform a breadth-first-search, where the nodes are the puzzle boards and \n+     * edges are if two puzzle boards can be transformed into one another with one move.*/\n+    int slidingPuzzle(const board& b) \n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1725371819376,
            "name": "Commit-0",
            "content": "\n\nnamespace algorithms::graph::leetcode::"
        }
    ]
}