{
    "sourceFile": "algorithms/dp/leetcode/dungeonGame.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 132,
            "patches": [
                {
                    "date": 1719550795253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719563246577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,6 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        std::vector<std::vector<int>> dp(m, std::vector<int>(n, 0));\n-\n-        dp[0][0] = dungeon[0][0];\n-   \n-        return 1 - dp[m - 1][n - 1];\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719563257836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n       Return the knight's minimum initial health so that he can rescue the princess.\n       Note that any room can contain threats or power-ups, \n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n+    int calculateMinimumHPRec()\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n"
                },
                {
                    "date": 1719563271833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       Return the knight's minimum initial health so that he can rescue the princess.\n       Note that any room can contain threats or power-ups, \n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n-    int calculateMinimumHPRec()\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int )\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n"
                },
                {
                    "date": 1719563278443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,12 @@\n       Return the knight's minimum initial health so that he can rescue the princess.\n       Note that any room can contain threats or power-ups, \n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int )\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+      \n+    }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n"
                },
                {
                    "date": 1719563284953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n-      \n+        return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563291250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,6 +23,7 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n+        return calculateMinimumHPRec()\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719563297000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,7 +23,7 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        return calculateMinimumHPRec()\n+        return calculateMinimumHPRec(dungeon, )\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719563306714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,7 +23,7 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        return calculateMinimumHPRec(dungeon, )\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719563314516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n-        return 1;\n+        return ;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563418690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n-        return ;\n+        if()\n+        return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563426878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,12 @@\n       even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n-        if()\n+        if(i == 0 && j == 0)\n+        {\n+            \n+        }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563432226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n         {\n-            \n+            if()\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563438253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n         {\n-            if()\n+            if(dungeon[i][])\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563445541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-        {\n-            if(dungeon[i][])\n+          dungeon[i][j])\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563451858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          dungeon[i][j])\n+          dungeon[i][j] < 0 ?\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563458627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ?\n+          dungeon[i][j] < 0 ? health + abs()\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563465814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + abs()\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j])\n         }\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719563476182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j])\n-        }\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563482575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return 1;\n+        return std::min();\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563489254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min();\n+        return std::min(calculateMinimumHPRec(), calculateMinimumHPRec());\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563501478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min(calculateMinimumHPRec(), calculateMinimumHPRec());\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, ..), calculateMinimumHPRec());\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563508253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, ..), calculateMinimumHPRec());\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, ..), calculateMinimumHPRec(i, j - 1, ..));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563518529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, ..), calculateMinimumHPRec(i, j - 1, ..));\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(i, j - 1, ..));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563525675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(i, j - 1, ..));\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563531120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health);\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719563575803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+        if(i )  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563587286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        if(i )  \n+        if(i < 0)  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563593214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        if(i < 0)  \n+        if(i < 0 || j < 0)\n+          \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563619217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          \n+          return ;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563624979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return ;  \n+          return INT;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563630846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return INT;  \n+          return INT32_MAX;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563642354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return INT32_MAX;  \n+          return -1;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563648652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return -1;  \n+          return ;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563661947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return ;  \n+          return 0;  \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563670473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return 0;  \n+          return 0;\n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719563682904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return 0;\n+          return ;\n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564463954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return ;\n+          return INFINITY;\n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564472685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return INFINITY;\n+          return (int)INFINITY;\n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564550146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n+\n+        calculateMinimumHPRec(dungeon, i - 1, j, health);\n+\n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564557117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        calculateMinimumHPRec(dungeon, i - 1, j, health);\n+        int fromA calculateMinimumHPRec(dungeon, i - 1, j, health);\n \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719564563513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromA calculateMinimumHPRec(dungeon, i - 1, j, health);\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719564570407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+        if(i < 0 || j < 0)\n+          return (int)INFINITY;\n+\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n+        int fromLeft = \n+\n+        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564575608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n-        int fromLeft = \n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n@@ -33,41 +33,5 @@\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        if(i < 0 || j < 0)\n-          return (int)INFINITY;\n-\n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n-\n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564590473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        return std::min(calculateMinimumHPRec(dungeon, i - 1, j, health), calculateMinimumHPRec(dungeon, i, j - 1, health));\n+        return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719564600077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n #include <vector>\n+#include <ios\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/dungeon-game\n"
                },
                {
                    "date": 1719564609649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n #include <vector>\n-#include <ios\n+#include <iostream>\n \n namespace algorithms::leetcode::dp\n {\n     // https://leetcode.com/problems/dungeon-game\n@@ -26,8 +26,10 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n+        std::cout << \"\"\n+\n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564617860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"\"\n+        std::cout << \"fromAbove: \" << fromAbove << std::end\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719564627999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"fromAbove: \" << fromAbove << std::end\n+        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" std::endl\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719564633249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" std::endl\n+        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719564661421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,15 +26,15 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl\n+        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+        return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564675421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        return calculateMinimumHPRec(dungeon, m, n, 1);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564682808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+        return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564822469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,9 @@\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n+        \n+\n         return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564832011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,17 +26,16 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n-\n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n \n+\n         return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564838240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n+        std::cout << \": \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n \n-\n         return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564843433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout << \": \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n+        std::cout << \"m: \" << m << \", n: \" << fromLeft << std::endl;\n \n         return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564865625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout << \"m: \" << m << \", n: \" << fromLeft << std::endl;\n+        std::cout << \"m: \" << m << \", n: \" << n << std::endl;\n \n-        return calculateMinimumHPRec(dungeon, m, n, 1);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564888279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,16 +26,18 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n+        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n+\n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout << \"m: \" << m << \", n: \" << n << std::endl;\n+        \n \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+        return calculateMinimumHPRec(dungeon, m, n, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564895165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        \n-\n-        return calculateMinimumHPRec(dungeon, m, n, 1);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719564933307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,8 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n-        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n-\n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719564939375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n+        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n+\n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(fromAbove, fromLeft);\n"
                },
                {
                    "date": 1719564946351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        std::cout << \"fromAbove: \" << fromAbove << \", fromLeft: \" << fromLeft << std::endl;\n+        std::cout << \"i: \" << i << \", fromLeft: \" << fromLeft << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n"
                },
                {
                    "date": 1719565017851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,11 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         if(i < 0 || j < 0)\n-          return (int)INFINITY;\n+          return 232;\n \n-        std::cout << \"i: \" << i << \", fromLeft: \" << fromLeft << std::endl;\n+        std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n"
                },
                {
                    "date": 1719565027340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        if(i < 0 || j < 0)\n-          return 232;\n+        // if(i < 0 || j < 0)\n+        //   return 232;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n"
                },
                {
                    "date": 1719565037881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-        // if(i < 0 || j < 0)\n-        //   return 232;\n+        if(i < 0 || j < 0)\n+          return 232;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n"
                },
                {
                    "date": 1719565043842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,11 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+\n         if(i < 0 || j < 0)\n-          return 232;\n+          return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n"
                },
                {
                    "date": 1719565080577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health);\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health );\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719565088071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health );\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health - dungeon[]);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719565094168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+\n+        if(i < 0 || j < 0)\n+          return -23;\n+\n+        std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n+\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health - dungeon[i - 1][j]);\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n+\n+        return std::min(fromAbove, fromLeft);\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        \n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565100250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health - dungeon[i - 1][j]);\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, abs::(health - dungeon[i - 1][j]);\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(fromAbove, fromLeft);\n     }\n@@ -38,47 +38,5 @@\n         int n = dungeon[0].size();\n         \n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-\n-        if(i < 0 || j < 0)\n-          return -23;\n-\n-        std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n-\n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, health - dungeon[]);\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n-\n-        return std::min(fromAbove, fromLeft);\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565110457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, abs::(health - dungeon[i - 1][j]);\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j,std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719565117791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n           return -23;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j,std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, health);\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i - 1][j]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565136229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i - 1][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565160825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,10 @@\n \n         if(i < 0 || j < 0)\n           return -23;\n \n-        std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n-\n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565175665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n \n         if(i < 0 || j < 0)\n-          return -23;\n+          return (int)INFINITY;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n"
                },
                {
                    "date": 1719565193747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n+        \n+\n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n"
                },
                {
                    "date": 1719565204488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n-        \n+        std::cout << \"fromAbove:\" << \n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565211688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n-        std::cout << \"fromAbove:\" << \n+        std::cout << \"fromAbove:\" << fromAbove << std::end;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565246681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n-        std::cout << \"fromAbove:\" << fromAbove << std::end;\n+        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719565252976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1 > calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n"
                },
                {
                    "date": 1719565258122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : ;\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n"
                },
                {
                    "date": 1719565264111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : ;\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n"
                },
                {
                    "date": 1719565273161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n         return std::min(fromAbove, fromLeft);\n"
                },
                {
                    "date": 1719565278656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,13 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n \n-        if(i < 0 || j < 0)\n-          return (int)INFINITY;\n+        // if(i < 0 || j < 0)\n+        //   return (int)INFINITY;\n \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n         return std::min(fromAbove, fromLeft);\n"
                },
                {
                    "date": 1719565314205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, );\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565319423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, );\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565325130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs());\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - ));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565333606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - ));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565349914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+\n+        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n+\n+        return std::min(fromAbove, fromLeft);\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        \n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565372954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,47 +35,5 @@\n         int n = dungeon[0].size();\n         \n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-\n-        // if(i < 0 || j < 0)\n-        //   return (int)INFINITY;\n-\n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n-\n-        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n-\n-        return std::min(fromAbove, fromLeft);\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565456381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n \n+        if(i == 0)\n+\n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n"
                },
                {
                    "date": 1719565468875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+\n+        if(i == 0)\n+          \n+\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+\n+        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n+\n+        return std::min(fromAbove, fromLeft);\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        \n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565502786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,9 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-\n-        if(i == 0)\n           \n-\n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         std::cout << \"fromAbove:\" << fromAbove << std::endl;\n@@ -38,46 +35,5 @@\n         int n = dungeon[0].size();\n         \n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-\n-        if(i == 0)\n-\n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n-\n-        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n-\n-        return std::min(fromAbove, fromLeft);\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565554262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,7 +33,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m, n, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565571624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,7 +33,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m, n, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565645519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,7 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n+        \n+\n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565694935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        \n+        std::cout \n \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565715742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n           \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        // int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        // int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n-        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n+        // std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n@@ -35,7 +35,7 @@\n         int n = dungeon[0].size();\n         \n         std::cout \n \n-        return calculateMinimumHPRec(dungeon, m, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m, n, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565741235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,14 @@\n     {\n         if(i == 0 && j == 0)\n           dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n           \n-        // int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        // int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n-        // std::cout << \"fromAbove:\" << fromAbove << std::endl;\n+        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n \n-        return std::min(fromAbove, fromLeft);\n+        return 1;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719565752421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout \n+        std::cout << m << \", \" << n << std::end\n \n         return calculateMinimumHPRec(dungeon, m, n, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565779175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout << m << \", \" << n << std::end\n+        std::cout << m << \", \" << n << std::endl;\n \n-        return calculateMinimumHPRec(dungeon, m, n, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565803997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        std::cout << m << \", \" << n << std::endl;\n-\n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565811529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,9 @@\n           \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n-        std::cout << \"fromAbove:\" << fromAbove << std::endl;\n-\n-        return 1;\n+        return ;\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719565819458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+          return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n           \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n"
                },
                {
                    "date": 1719565824863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n           \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n-        return ;\n+        return std::min();\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719565831686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n           \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n-        return std::min();\n+        return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n"
                },
                {
                    "date": 1719565863363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565872044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+          \n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+\n+        return std::min(fromAbove, fromLeft);\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        \n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565898024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,42 +33,5 @@\n         int n = dungeon[0].size();\n         \n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-          \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n-\n-        return std::min(fromAbove, fromLeft);\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719565949244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,12 @@\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n           return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n-          \n+        \n+        if(i < 0 || j < 0)\n+          return \n+\n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n"
                },
                {
                    "date": 1719566004101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         if(i == 0 && j == 0)\n           return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n         \n         if(i < 0 || j < 0)\n-          return \n+          return (int)INFINITY;\n \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n"
                },
                {
                    "date": 1719566015475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719566022182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719566527236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,16 @@\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, );\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566546653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, );\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1 - dungeon[m - 1][n - 1]);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566552982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, 1 - dungeon[m - 1][n - 1]);\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566601192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] std::abs(1 - dungeon[m - 1][n - 1]));\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566608287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] std::abs(1 - dungeon[m - 1][n - 1]));\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) );\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566658482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          return dungeon[i][j] < 0 ? health + std::abs(dungeon[i][j]) : 1;\n+          return ;\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n@@ -34,7 +34,7 @@\n     {\n         int m = dungeon.size();\n         int n = dungeon[0].size();\n         \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) );\n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) : 1);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719566683440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     */\n     int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n     {\n         if(i == 0 && j == 0)\n-          return ;\n+          return health;\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n"
                },
                {
                    "date": 1719566741312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove =  calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719566748378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove =  calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719566754197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719566763279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n         int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n+        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719566873930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n         int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719566880839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : (int)INFINITY;\n-        int fromLeft = j - 1 > 0 ? calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719566924609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1])) : (int)INFINITY;\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n     int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n"
                },
                {
                    "date": 1719567269482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+#include <vector>\n+#include <iostream>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    // https://leetcode.com/problems/dungeon-game\n+    /*\n+      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n+      The dungeon consists of m x n rooms laid out in a 2D grid. \n+      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n+      The knight has an initial health point represented by a positive integer. \n+      If at any point his health point drops to 0 or below, he dies immediately.\n+      Some of the rooms are guarded by demons (represented by negative integers), \n+      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n+      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n+      Return the knight's minimum initial health so that he can rescue the princess.\n+      Note that any room can contain threats or power-ups, \n+      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n+    */\n+    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n+    {\n+        if(i == 0 && j == 0)\n+          return health;\n+        \n+        if(i < 0 || j < 0)\n+          return (int)INFINITY;\n+\n+        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n+\n+        return std::min(fromAbove, fromLeft);\n+    }\n+    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n+    {\n+        int m = dungeon.size();\n+        int n = dungeon[0].size();\n+        \n+        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) : 1);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719568902756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,45 +36,5 @@\n         int n = dungeon[0].size();\n         \n         return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) : 1);\n     }\n-}\n-#include <vector>\n-#include <iostream>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    // https://leetcode.com/problems/dungeon-game\n-    /*\n-      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n-      The dungeon consists of m x n rooms laid out in a 2D grid. \n-      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n-      The knight has an initial health point represented by a positive integer. \n-      If at any point his health point drops to 0 or below, he dies immediately.\n-      Some of the rooms are guarded by demons (represented by negative integers), \n-      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n-      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n-      Return the knight's minimum initial health so that he can rescue the princess.\n-      Note that any room can contain threats or power-ups, \n-      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n-    */\n-    int calculateMinimumHPRec(std::vector<std::vector<int>> dungeon, int i, int j, int health)\n-    {\n-        if(i == 0 && j == 0)\n-          return health;\n-        \n-        if(i < 0 || j < 0)\n-          return (int)INFINITY;\n-\n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n-        int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n-\n-        return std::min(fromAbove, fromLeft);\n-    }\n-    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n-    {\n-        int m = dungeon.size();\n-        int n = dungeon[0].size();\n-        \n-        return calculateMinimumHPRec(dungeon, m - 1, n - 1, dungeon[m - 1][n - 1] < 0 ? std::abs(1 - dungeon[m - 1][n - 1]) : 1);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719568968050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1  calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719568973773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         \n         if(i < 0 || j < 0)\n           return (int)INFINITY;\n \n-        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n+        int fromAbove = i - 1 > 0 ? calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j])) : 0;\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n     }\n"
                },
                {
                    "date": 1719569173770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n           return (int)INFINITY;\n \n         std::cout << \"i: \" << i << \", j: \" << j << std::endl;\n \n-        \n+        i = i - 1 < 0 :\n         int fromAbove = calculateMinimumHPRec(dungeon, i - 1, j, std::abs(health - dungeon[i - 1][j]));\n         int fromLeft = calculateMinimumHPRec(dungeon, i, j - 1, std::abs(health - dungeon[i][j - 1]));\n \n         return std::min(fromAbove, fromLeft);\n"
                }
            ],
            "date": 1719550795253,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace algorithms::leetcode::dp\n{\n    // https://leetcode.com/problems/dungeon-game\n    /*\n      The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. \n      The dungeon consists of m x n rooms laid out in a 2D grid. \n      Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\n      The knight has an initial health point represented by a positive integer. \n      If at any point his health point drops to 0 or below, he dies immediately.\n      Some of the rooms are guarded by demons (represented by negative integers), \n      so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n      To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n      Return the knight's minimum initial health so that he can rescue the princess.\n      Note that any room can contain threats or power-ups, \n      even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n    */\n    int calculateMinimumHP(std::vector<std::vector<int>> dungeon)\n    {\n        int m = dungeon.size();\n        int n = dungeon[0].size();\n        std::vector<std::vector<int>> dp(m, std::vector<int>(n, 0));\n\n        dp[0][0] = dungeon[0][0];\n   \n        return 1 - dp[m - 1][n - 1];\n    }\n}"
        }
    ]
}