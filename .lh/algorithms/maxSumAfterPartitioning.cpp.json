{
    "sourceFile": "algorithms/maxSumAfterPartitioning.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1718444671161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718444682397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+int maxSumAfterPartitioning(vector<int>& arr, int k) {\n+\n namespace leetcode::dp\n {\n-    \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444690124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-int maxSumAfterPartitioning(vector<int>& arr, int k) {\n \n+\n namespace leetcode::dp\n {\n-\n+int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444704653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n \n+\n namespace leetcode::dp\n {\n-int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n+    int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444717198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,6 +2,9 @@\n \n \n namespace leetcode::dp\n {\n+    // https://leetcode.com/problems/partition-array-for-maximum-sum\n+    /*\n+    */\n     int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444723245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,7 +4,9 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/partition-array-for-maximum-sum\n     /*\n+      Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n+Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n     */\n     int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444734815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n namespace leetcode::dp\n {\n     // https://leetcode.com/problems/partition-array-for-maximum-sum\n     /*\n-      Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n+      Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. \n+      After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n     */\n     int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718444740988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n     // https://leetcode.com/problems/partition-array-for-maximum-sum\n     /*\n       Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. \n       After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n-      Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.\n+      Return the largest sum of the given array after partitioning. \n+      Test cases are generated so that the answer fits in a 32-bit integer.\n     */\n     int maxSumAfterPartitioning(vector<int>& arr, int k) {}\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718600161224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n {\n     // https://leetcode.com/problems/partition-array-for-maximum-sum\n     /*\n       Given an integer array arr, partition the array into (contiguous) subArrays of length at most k. \n-      After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n+      After partitioning, each subArray has their values changed to become the maximum value of that subarray.\n       Return the largest sum of the given array after partitioning. \n       Test cases are generated so that the answer fits in a 32-bit integer.\n     */\n     int maxSumAfterPartitioning(std::vector<int>& arr, int k) \n"
                }
            ],
            "date": 1718444671161,
            "name": "Commit-0",
            "content": "namespace leetcode::dp\n{\n    \n}"
        }
    ]
}