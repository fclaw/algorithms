{
    "sourceFile": "algorithms/dp/leetcode/minFallingPathSum.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1721033526049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721033534949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    \n+    int minFallingPathSum(vector<vector<int>>& matrix) {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033543729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,6 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    int minFallingPathSum(vector<std::vector<int>>& matrix) {}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033553215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,9 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n-    int minFallingPathSum(vector<std::vector<int>>& matrix) {}\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    int minFallingPathSum(vector<vector<int>>& matrix) {\n+    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n+    {\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033605344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n #include <vector>\n \n namespace algorithms::leetcode::dp\n {\n+    /*\n+    */\n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n-        \n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033610609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,14 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    /*\n+        Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n+\n+A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n+    */\n+    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033621452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,24 +2,12 @@\n \n namespace algorithms::leetcode::dp\n {\n     /*\n-        Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n-\n-A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n+       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n+       A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n     */\n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n \n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    /*\n-    */\n-    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721033626882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n namespace algorithms::leetcode::dp\n {\n     /*\n        Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n-       A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n+       A falling path starts at any element in the first row and chooses \n+       the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n     */\n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n \n"
                },
                {
                    "date": 1721033639047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n {\n     /*\n        Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n        A falling path starts at any element in the first row and chooses \n-       the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n+       the element in the next row that is either directly below or diagonally left/right. \n+       Specifically, the next element from position \n+       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n     */\n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n \n"
                },
                {
                    "date": 1721033651748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    /*\n+       https://leetcode.com/problems/minimum-falling-path-sum\n+       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n+       A falling path starts at any element in the first row and chooses \n+       the element in the next row that is either directly below or diagonally left/right. \n+       Specifically, the next element from position \n+       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n+    */\n+    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n+    {\n+\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721034325678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    /*\n+       https://leetcode.com/problems/minimum-falling-path-sum\n+       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n+       A falling path starts at any element in the first row and chooses \n+       the element in the next row that is either directly below or diagonally left/right. \n+       Specifically, the next element from position \n+       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n+    */\n+    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721043590873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,42 +9,10 @@\n        the element in the next row that is either directly below or diagonally left/right. \n        Specifically, the next element from position \n        (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n     */\n+   \n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n         return 0;\n     }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    /*\n-       https://leetcode.com/problems/minimum-falling-path-sum\n-       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n-       A falling path starts at any element in the first row and chooses \n-       the element in the next row that is either directly below or diagonally left/right. \n-       Specifically, the next element from position \n-       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n-    */\n-    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n-    {\n-\n-    }\n-}\n-#include <vector>\n-\n-namespace algorithms::leetcode::dp\n-{\n-    /*\n-       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n-       A falling path starts at any element in the first row and chooses \n-       the element in the next row that is either directly below or diagonally left/right. \n-       Specifically, the next element from position \n-       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\n-    */\n-    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n-    {\n-\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721043598853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n        the element in the next row that is either directly below or diagonally left/right. \n        Specifically, the next element from position \n        (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n     */\n-    \n+    int rec()\n     int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n     {\n         return 0;\n     }\n"
                },
                {
                    "date": 1721043604755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,18 @@\n+#include <vector>\n+\n+namespace algorithms::leetcode::dp\n+{\n+    /*\n+       https://leetcode.com/problems/minimum-falling-path-sum\n+       Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\n+       A falling path starts at any element in the first row and chooses \n+       the element in the next row that is either directly below or diagonally left/right. \n+       Specifically, the next element from position \n+       (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1)\n+    */\n+    int rec(std::vector<std::vector<int>>& matrix)\n+    int minFallingPathSum(std::vector<std::vector<int>>& matrix) \n+    {\n+        return 0;\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1721033526049,
            "name": "Commit-0",
            "content": "#include <vector>\n\nnamespace algorithms::leetcode::dp\n{\n    \n}"
        }
    ]
}